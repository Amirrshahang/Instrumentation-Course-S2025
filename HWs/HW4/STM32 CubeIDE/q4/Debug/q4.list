
q4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cb4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08005dc8  08005dc8  00006dc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006184  08006184  000081d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006184  08006184  00007184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800618c  0800618c  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800618c  0800618c  0000718c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006190  08006190  00007190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006194  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  200001d4  08006368  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08006368  00008378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000522e  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001717  00000000  00000000  0000d42b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000638  00000000  00000000  0000eb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000047c  00000000  00000000  0000f180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000147ba  00000000  00000000  0000f5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007598  00000000  00000000  00023db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006c5e4  00000000  00000000  0002b34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00097932  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002894  00000000  00000000  00097978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0009a20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005dac 	.word	0x08005dac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08005dac 	.word	0x08005dac

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <LCD_EnablePulse>:
#define D5_PIN GPIO_PIN_11
#define D6_PIN GPIO_PIN_12
#define D7_PIN GPIO_PIN_13
#define LCD_GPIO GPIOB

static void LCD_EnablePulse(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_GPIO, E_PIN, GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2104      	movs	r1, #4
 8000f4c:	4807      	ldr	r0, [pc, #28]	@ (8000f6c <LCD_EnablePulse+0x28>)
 8000f4e:	f001 fb2d 	bl	80025ac <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000f52:	2001      	movs	r0, #1
 8000f54:	f000 fc6a 	bl	800182c <HAL_Delay>
    HAL_GPIO_WritePin(LCD_GPIO, E_PIN, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	4803      	ldr	r0, [pc, #12]	@ (8000f6c <LCD_EnablePulse+0x28>)
 8000f5e:	f001 fb25 	bl	80025ac <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000f62:	2001      	movs	r0, #1
 8000f64:	f000 fc62 	bl	800182c <HAL_Delay>
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40010c00 	.word	0x40010c00

08000f70 <LCD_Send4Bits>:

static void LCD_Send4Bits(uint8_t data) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_GPIO, D4_PIN, (data >> 0) & 0x01);
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	461a      	mov	r2, r3
 8000f84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f88:	4815      	ldr	r0, [pc, #84]	@ (8000fe0 <LCD_Send4Bits+0x70>)
 8000f8a:	f001 fb0f 	bl	80025ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_GPIO, D5_PIN, (data >> 1) & 0x01);
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	085b      	lsrs	r3, r3, #1
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fa0:	480f      	ldr	r0, [pc, #60]	@ (8000fe0 <LCD_Send4Bits+0x70>)
 8000fa2:	f001 fb03 	bl	80025ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_GPIO, D6_PIN, (data >> 2) & 0x01);
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fb8:	4809      	ldr	r0, [pc, #36]	@ (8000fe0 <LCD_Send4Bits+0x70>)
 8000fba:	f001 faf7 	bl	80025ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_GPIO, D7_PIN, (data >> 3) & 0x01);
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	08db      	lsrs	r3, r3, #3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	461a      	mov	r2, r3
 8000fcc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fd0:	4803      	ldr	r0, [pc, #12]	@ (8000fe0 <LCD_Send4Bits+0x70>)
 8000fd2:	f001 faeb 	bl	80025ac <HAL_GPIO_WritePin>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40010c00 	.word	0x40010c00

08000fe4 <LCD_SendCommand>:

static void LCD_SendCommand(uint8_t cmd) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_GPIO, RS_PIN, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2102      	movs	r1, #2
 8000ff2:	480d      	ldr	r0, [pc, #52]	@ (8001028 <LCD_SendCommand+0x44>)
 8000ff4:	f001 fada 	bl	80025ac <HAL_GPIO_WritePin>
    LCD_Send4Bits(cmd >> 4);
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ffb6 	bl	8000f70 <LCD_Send4Bits>
    LCD_EnablePulse();
 8001004:	f7ff ff9e 	bl	8000f44 <LCD_EnablePulse>
    LCD_Send4Bits(cmd & 0x0F);
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	b2db      	uxtb	r3, r3
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ffad 	bl	8000f70 <LCD_Send4Bits>
    LCD_EnablePulse();
 8001016:	f7ff ff95 	bl	8000f44 <LCD_EnablePulse>
    HAL_Delay(2);
 800101a:	2002      	movs	r0, #2
 800101c:	f000 fc06 	bl	800182c <HAL_Delay>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40010c00 	.word	0x40010c00

0800102c <LCD_SendData>:

static void LCD_SendData(uint8_t data) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_GPIO, RS_PIN, GPIO_PIN_SET);
 8001036:	2201      	movs	r2, #1
 8001038:	2102      	movs	r1, #2
 800103a:	480d      	ldr	r0, [pc, #52]	@ (8001070 <LCD_SendData+0x44>)
 800103c:	f001 fab6 	bl	80025ac <HAL_GPIO_WritePin>
    LCD_Send4Bits(data >> 4);
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	091b      	lsrs	r3, r3, #4
 8001044:	b2db      	uxtb	r3, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff ff92 	bl	8000f70 <LCD_Send4Bits>
    LCD_EnablePulse();
 800104c:	f7ff ff7a 	bl	8000f44 <LCD_EnablePulse>
    LCD_Send4Bits(data & 0x0F);
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	b2db      	uxtb	r3, r3
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff89 	bl	8000f70 <LCD_Send4Bits>
    LCD_EnablePulse();
 800105e:	f7ff ff71 	bl	8000f44 <LCD_EnablePulse>
    HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f000 fbe2 	bl	800182c <HAL_Delay>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40010c00 	.word	0x40010c00

08001074 <LCD_Init>:

void LCD_Init(void) {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 8001078:	2032      	movs	r0, #50	@ 0x32
 800107a:	f000 fbd7 	bl	800182c <HAL_Delay>
    LCD_Send4Bits(0x03); LCD_EnablePulse(); HAL_Delay(5);
 800107e:	2003      	movs	r0, #3
 8001080:	f7ff ff76 	bl	8000f70 <LCD_Send4Bits>
 8001084:	f7ff ff5e 	bl	8000f44 <LCD_EnablePulse>
 8001088:	2005      	movs	r0, #5
 800108a:	f000 fbcf 	bl	800182c <HAL_Delay>
    LCD_Send4Bits(0x03); LCD_EnablePulse(); HAL_Delay(5);
 800108e:	2003      	movs	r0, #3
 8001090:	f7ff ff6e 	bl	8000f70 <LCD_Send4Bits>
 8001094:	f7ff ff56 	bl	8000f44 <LCD_EnablePulse>
 8001098:	2005      	movs	r0, #5
 800109a:	f000 fbc7 	bl	800182c <HAL_Delay>
    LCD_Send4Bits(0x03); LCD_EnablePulse(); HAL_Delay(5);
 800109e:	2003      	movs	r0, #3
 80010a0:	f7ff ff66 	bl	8000f70 <LCD_Send4Bits>
 80010a4:	f7ff ff4e 	bl	8000f44 <LCD_EnablePulse>
 80010a8:	2005      	movs	r0, #5
 80010aa:	f000 fbbf 	bl	800182c <HAL_Delay>
    LCD_Send4Bits(0x02); LCD_EnablePulse(); HAL_Delay(1);
 80010ae:	2002      	movs	r0, #2
 80010b0:	f7ff ff5e 	bl	8000f70 <LCD_Send4Bits>
 80010b4:	f7ff ff46 	bl	8000f44 <LCD_EnablePulse>
 80010b8:	2001      	movs	r0, #1
 80010ba:	f000 fbb7 	bl	800182c <HAL_Delay>

    LCD_SendCommand(0x28); // 4-bit, 2-line
 80010be:	2028      	movs	r0, #40	@ 0x28
 80010c0:	f7ff ff90 	bl	8000fe4 <LCD_SendCommand>
    LCD_SendCommand(0x0C); // Display on, cursor off
 80010c4:	200c      	movs	r0, #12
 80010c6:	f7ff ff8d 	bl	8000fe4 <LCD_SendCommand>
    LCD_SendCommand(0x06); // Entry mode
 80010ca:	2006      	movs	r0, #6
 80010cc:	f7ff ff8a 	bl	8000fe4 <LCD_SendCommand>
    LCD_SendCommand(0x01); // Clear display
 80010d0:	2001      	movs	r0, #1
 80010d2:	f7ff ff87 	bl	8000fe4 <LCD_SendCommand>
    HAL_Delay(2);
 80010d6:	2002      	movs	r0, #2
 80010d8:	f000 fba8 	bl	800182c <HAL_Delay>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <LCD_SetCursor>:
void LCD_Clear(void) {
    LCD_SendCommand(0x01);
    HAL_Delay(2);
}

void LCD_SetCursor(uint8_t col, uint8_t row) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	460a      	mov	r2, r1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	71bb      	strb	r3, [r7, #6]
    uint8_t row_offsets[] = {0x00, 0x40};
 80010f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010f4:	81bb      	strh	r3, [r7, #12]
    LCD_SendCommand(0x80 | (col + row_offsets[row]));
 80010f6:	79bb      	ldrb	r3, [r7, #6]
 80010f8:	3310      	adds	r3, #16
 80010fa:	443b      	add	r3, r7
 80010fc:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	4413      	add	r3, r2
 8001104:	b2db      	uxtb	r3, r3
 8001106:	b25b      	sxtb	r3, r3
 8001108:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800110c:	b25b      	sxtb	r3, r3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff67 	bl	8000fe4 <LCD_SendCommand>
}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <LCD_Print>:

void LCD_Print(char* str) {
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001126:	e006      	b.n	8001136 <LCD_Print+0x18>
        LCD_SendData(*str++);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff7b 	bl	800102c <LCD_SendData>
    while (*str) {
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f4      	bne.n	8001128 <LCD_Print+0xa>
    }
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <LCD_PrintFloat>:

void LCD_PrintFloat(float value, uint8_t precision) {
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b089      	sub	sp, #36	@ 0x24
 800114c:	af02      	add	r7, sp, #8
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
    char buffer[16];
    snprintf(buffer, sizeof(buffer), "%.*f", precision, value);
 8001154:	78fc      	ldrb	r4, [r7, #3]
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff f966 	bl	8000428 <__aeabi_f2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	f107 0008 	add.w	r0, r7, #8
 8001164:	e9cd 2300 	strd	r2, r3, [sp]
 8001168:	4623      	mov	r3, r4
 800116a:	4a06      	ldr	r2, [pc, #24]	@ (8001184 <LCD_PrintFloat+0x3c>)
 800116c:	2110      	movs	r1, #16
 800116e:	f002 fc0b 	bl	8003988 <sniprintf>
    LCD_Print(buffer);
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ffd1 	bl	800111e <LCD_Print>
}
 800117c:	bf00      	nop
 800117e:	371c      	adds	r7, #28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd90      	pop	{r4, r7, pc}
 8001184:	08005dc8 	.word	0x08005dc8

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118e:	f000 faeb 	bl	8001768 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001192:	f000 f859 	bl	8001248 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001196:	f000 f8eb 	bl	8001370 <MX_GPIO_Init>
  MX_ADC1_Init();
 800119a:	f000 f8ab 	bl	80012f4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 800119e:	f7ff ff69 	bl	8001074 <LCD_Init>
  LCD_SetCursor(0, 0);
 80011a2:	2100      	movs	r1, #0
 80011a4:	2000      	movs	r0, #0
 80011a6:	f7ff ff9b 	bl	80010e0 <LCD_SetCursor>

  while (1)
      {


	          HAL_ADC_Start(&hadc1);
 80011aa:	4821      	ldr	r0, [pc, #132]	@ (8001230 <main+0xa8>)
 80011ac:	f000 fc3a 	bl	8001a24 <HAL_ADC_Start>
	          HAL_ADC_PollForConversion(&hadc1, 1000);
 80011b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011b4:	481e      	ldr	r0, [pc, #120]	@ (8001230 <main+0xa8>)
 80011b6:	f000 fd0f 	bl	8001bd8 <HAL_ADC_PollForConversion>
	          adc_value = HAL_ADC_GetValue(&hadc1);
 80011ba:	481d      	ldr	r0, [pc, #116]	@ (8001230 <main+0xa8>)
 80011bc:	f000 fe06 	bl	8001dcc <HAL_ADC_GetValue>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001234 <main+0xac>)
 80011c4:	6013      	str	r3, [r2, #0]
	          HAL_ADC_Stop(&hadc1);
 80011c6:	481a      	ldr	r0, [pc, #104]	@ (8001230 <main+0xa8>)
 80011c8:	f000 fcda 	bl	8001b80 <HAL_ADC_Stop>
	          LCD_SetCursor(0, 0);
 80011cc:	2100      	movs	r1, #0
 80011ce:	2000      	movs	r0, #0
 80011d0:	f7ff ff86 	bl	80010e0 <LCD_SetCursor>
	          //LCD_PrintInt(adc_value);

	          //LCD_SetCursor(0, 0);


	          float voltage = adc_value / 819.0f;
 80011d4:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <main+0xac>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fd0b 	bl	8000bf4 <__aeabi_ui2f>
 80011de:	4603      	mov	r3, r0
 80011e0:	4915      	ldr	r1, [pc, #84]	@ (8001238 <main+0xb0>)
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fe12 	bl	8000e0c <__aeabi_fdiv>
 80011e8:	4603      	mov	r3, r0
 80011ea:	607b      	str	r3, [r7, #4]
	          LCD_PrintFloat(voltage, 2);
 80011ec:	2102      	movs	r1, #2
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffaa 	bl	8001148 <LCD_PrintFloat>
	          LCD_SetCursor(0, 1);
 80011f4:	2101      	movs	r1, #1
 80011f6:	2000      	movs	r0, #0
 80011f8:	f7ff ff72 	bl	80010e0 <LCD_SetCursor>
	          float load = (voltage - 2.5102f + 0.001596f) / 0.0852f;
 80011fc:	490f      	ldr	r1, [pc, #60]	@ (800123c <main+0xb4>)
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff fc46 	bl	8000a90 <__aeabi_fsub>
 8001204:	4603      	mov	r3, r0
 8001206:	490e      	ldr	r1, [pc, #56]	@ (8001240 <main+0xb8>)
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fc43 	bl	8000a94 <__addsf3>
 800120e:	4603      	mov	r3, r0
 8001210:	490c      	ldr	r1, [pc, #48]	@ (8001244 <main+0xbc>)
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fdfa 	bl	8000e0c <__aeabi_fdiv>
 8001218:	4603      	mov	r3, r0
 800121a:	603b      	str	r3, [r7, #0]
	          LCD_PrintFloat(load, 2);
 800121c:	2102      	movs	r1, #2
 800121e:	6838      	ldr	r0, [r7, #0]
 8001220:	f7ff ff92 	bl	8001148 <LCD_PrintFloat>

	          HAL_Delay(100);
 8001224:	2064      	movs	r0, #100	@ 0x64
 8001226:	f000 fb01 	bl	800182c <HAL_Delay>
      {
 800122a:	bf00      	nop
 800122c:	e7bd      	b.n	80011aa <main+0x22>
 800122e:	bf00      	nop
 8001230:	200001f4 	.word	0x200001f4
 8001234:	200001f0 	.word	0x200001f0
 8001238:	444cc000 	.word	0x444cc000
 800123c:	4020a71e 	.word	0x4020a71e
 8001240:	3ad130e0 	.word	0x3ad130e0
 8001244:	3dae7d56 	.word	0x3dae7d56

08001248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b094      	sub	sp, #80	@ 0x50
 800124c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001252:	2228      	movs	r2, #40	@ 0x28
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f002 fc8e 	bl	8003b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001278:	2302      	movs	r3, #2
 800127a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800127c:	2301      	movs	r3, #1
 800127e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001280:	2310      	movs	r3, #16
 8001282:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001284:	2302      	movs	r3, #2
 8001286:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001288:	2300      	movs	r3, #0
 800128a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 800128c:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8001290:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001292:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001296:	4618      	mov	r0, r3
 8001298:	f001 f9a0 	bl	80025dc <HAL_RCC_OscConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80012a2:	f000 f8a5 	bl	80013f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a6:	230f      	movs	r3, #15
 80012a8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012aa:	2302      	movs	r3, #2
 80012ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80012ae:	2380      	movs	r3, #128	@ 0x80
 80012b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f001 fc0d 	bl	8002ae0 <HAL_RCC_ClockConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80012cc:	f000 f890 	bl	80013f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012d0:	2302      	movs	r3, #2
 80012d2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	4618      	mov	r0, r3
 80012dc:	f001 fd84 	bl	8002de8 <HAL_RCCEx_PeriphCLKConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80012e6:	f000 f883 	bl	80013f0 <Error_Handler>
  }
}
 80012ea:	bf00      	nop
 80012ec:	3750      	adds	r7, #80	@ 0x50
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001304:	4b18      	ldr	r3, [pc, #96]	@ (8001368 <MX_ADC1_Init+0x74>)
 8001306:	4a19      	ldr	r2, [pc, #100]	@ (800136c <MX_ADC1_Init+0x78>)
 8001308:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800130a:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <MX_ADC1_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001310:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <MX_ADC1_Init+0x74>)
 8001312:	2201      	movs	r2, #1
 8001314:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001316:	4b14      	ldr	r3, [pc, #80]	@ (8001368 <MX_ADC1_Init+0x74>)
 8001318:	2200      	movs	r2, #0
 800131a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800131c:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <MX_ADC1_Init+0x74>)
 800131e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001322:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001324:	4b10      	ldr	r3, [pc, #64]	@ (8001368 <MX_ADC1_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800132a:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <MX_ADC1_Init+0x74>)
 800132c:	2201      	movs	r2, #1
 800132e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001330:	480d      	ldr	r0, [pc, #52]	@ (8001368 <MX_ADC1_Init+0x74>)
 8001332:	f000 fa9f 	bl	8001874 <HAL_ADC_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800133c:	f000 f858 	bl	80013f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001340:	2300      	movs	r3, #0
 8001342:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001344:	2301      	movs	r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4619      	mov	r1, r3
 8001350:	4805      	ldr	r0, [pc, #20]	@ (8001368 <MX_ADC1_Init+0x74>)
 8001352:	f000 fd47 	bl	8001de4 <HAL_ADC_ConfigChannel>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800135c:	f000 f848 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200001f4 	.word	0x200001f4
 800136c:	40012400 	.word	0x40012400

08001370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001384:	4b18      	ldr	r3, [pc, #96]	@ (80013e8 <MX_GPIO_Init+0x78>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a17      	ldr	r2, [pc, #92]	@ (80013e8 <MX_GPIO_Init+0x78>)
 800138a:	f043 0304 	orr.w	r3, r3, #4
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <MX_GPIO_Init+0x78>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139c:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <MX_GPIO_Init+0x78>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a11      	ldr	r2, [pc, #68]	@ (80013e8 <MX_GPIO_Init+0x78>)
 80013a2:	f043 0308 	orr.w	r3, r3, #8
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <MX_GPIO_Init+0x78>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80013b4:	2200      	movs	r2, #0
 80013b6:	f643 4106 	movw	r1, #15366	@ 0x3c06
 80013ba:	480c      	ldr	r0, [pc, #48]	@ (80013ec <MX_GPIO_Init+0x7c>)
 80013bc:	f001 f8f6 	bl	80025ac <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 */

  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80013c0:	f643 4306 	movw	r3, #15366	@ 0x3c06
 80013c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2302      	movs	r3, #2
 80013d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d2:	f107 0308 	add.w	r3, r7, #8
 80013d6:	4619      	mov	r1, r3
 80013d8:	4804      	ldr	r0, [pc, #16]	@ (80013ec <MX_GPIO_Init+0x7c>)
 80013da:	f000 ff6b 	bl	80022b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010c00 	.word	0x40010c00

080013f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001402:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <HAL_MspInit+0x5c>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	4a14      	ldr	r2, [pc, #80]	@ (8001458 <HAL_MspInit+0x5c>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6193      	str	r3, [r2, #24]
 800140e:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <HAL_MspInit+0x5c>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <HAL_MspInit+0x5c>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	4a0e      	ldr	r2, [pc, #56]	@ (8001458 <HAL_MspInit+0x5c>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001424:	61d3      	str	r3, [r2, #28]
 8001426:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <HAL_MspInit+0x5c>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001432:	4b0a      	ldr	r3, [pc, #40]	@ (800145c <HAL_MspInit+0x60>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	4a04      	ldr	r2, [pc, #16]	@ (800145c <HAL_MspInit+0x60>)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	40021000 	.word	0x40021000
 800145c:	40010000 	.word	0x40010000

08001460 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a14      	ldr	r2, [pc, #80]	@ (80014cc <HAL_ADC_MspInit+0x6c>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d121      	bne.n	80014c4 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001480:	4b13      	ldr	r3, [pc, #76]	@ (80014d0 <HAL_ADC_MspInit+0x70>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	4a12      	ldr	r2, [pc, #72]	@ (80014d0 <HAL_ADC_MspInit+0x70>)
 8001486:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800148a:	6193      	str	r3, [r2, #24]
 800148c:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <HAL_ADC_MspInit+0x70>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001498:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <HAL_ADC_MspInit+0x70>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a0c      	ldr	r2, [pc, #48]	@ (80014d0 <HAL_ADC_MspInit+0x70>)
 800149e:	f043 0304 	orr.w	r3, r3, #4
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <HAL_ADC_MspInit+0x70>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014b0:	2301      	movs	r3, #1
 80014b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b4:	2303      	movs	r3, #3
 80014b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	4619      	mov	r1, r3
 80014be:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <HAL_ADC_MspInit+0x74>)
 80014c0:	f000 fef8 	bl	80022b4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80014c4:	bf00      	nop
 80014c6:	3720      	adds	r7, #32
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40012400 	.word	0x40012400
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010800 	.word	0x40010800

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <NMI_Handler+0x4>

080014e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <HardFault_Handler+0x4>

080014e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <MemManage_Handler+0x4>

080014f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <BusFault_Handler+0x4>

080014f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <UsageFault_Handler+0x4>

08001500 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001528:	f000 f964 	bl	80017f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return 1;
 8001534:	2301      	movs	r3, #1
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr

0800153e <_kill>:

int _kill(int pid, int sig)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001548:	f002 fb1e 	bl	8003b88 <__errno>
 800154c:	4603      	mov	r3, r0
 800154e:	2216      	movs	r2, #22
 8001550:	601a      	str	r2, [r3, #0]
  return -1;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <_exit>:

void _exit (int status)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001566:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff ffe7 	bl	800153e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <_exit+0x12>

08001574 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	e00a      	b.n	800159c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001586:	f3af 8000 	nop.w
 800158a:	4601      	mov	r1, r0
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	60ba      	str	r2, [r7, #8]
 8001592:	b2ca      	uxtb	r2, r1
 8001594:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	3301      	adds	r3, #1
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	dbf0      	blt.n	8001586 <_read+0x12>
  }

  return len;
 80015a4:	687b      	ldr	r3, [r7, #4]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e009      	b.n	80015d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	60ba      	str	r2, [r7, #8]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	3301      	adds	r3, #1
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	429a      	cmp	r2, r3
 80015da:	dbf1      	blt.n	80015c0 <_write+0x12>
  }
  return len;
 80015dc:	687b      	ldr	r3, [r7, #4]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <_close>:

int _close(int file)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800160c:	605a      	str	r2, [r3, #4]
  return 0;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr

0800161a <_isatty>:

int _isatty(int file)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001622:	2301      	movs	r3, #1
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800162e:	b480      	push	{r7}
 8001630:	b085      	sub	sp, #20
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
	...

08001648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001650:	4a14      	ldr	r2, [pc, #80]	@ (80016a4 <_sbrk+0x5c>)
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <_sbrk+0x60>)
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800165c:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001664:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <_sbrk+0x64>)
 8001666:	4a12      	ldr	r2, [pc, #72]	@ (80016b0 <_sbrk+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166a:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	429a      	cmp	r2, r3
 8001676:	d207      	bcs.n	8001688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001678:	f002 fa86 	bl	8003b88 <__errno>
 800167c:	4603      	mov	r3, r0
 800167e:	220c      	movs	r2, #12
 8001680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001682:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001686:	e009      	b.n	800169c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001688:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168e:	4b07      	ldr	r3, [pc, #28]	@ (80016ac <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	4a05      	ldr	r2, [pc, #20]	@ (80016ac <_sbrk+0x64>)
 8001698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800169a:	68fb      	ldr	r3, [r7, #12]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20002800 	.word	0x20002800
 80016a8:	00000400 	.word	0x00000400
 80016ac:	20000224 	.word	0x20000224
 80016b0:	20000378 	.word	0x20000378

080016b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80016b8:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <SystemInit+0x5c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a14      	ldr	r2, [pc, #80]	@ (8001710 <SystemInit+0x5c>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80016c4:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <SystemInit+0x5c>)
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	4911      	ldr	r1, [pc, #68]	@ (8001710 <SystemInit+0x5c>)
 80016ca:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <SystemInit+0x60>)
 80016cc:	4013      	ands	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <SystemInit+0x5c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001710 <SystemInit+0x5c>)
 80016d6:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 80016da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001710 <SystemInit+0x5c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001710 <SystemInit+0x5c>)
 80016e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80016ec:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <SystemInit+0x5c>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	4a07      	ldr	r2, [pc, #28]	@ (8001710 <SystemInit+0x5c>)
 80016f2:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 80016f6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80016f8:	4b05      	ldr	r3, [pc, #20]	@ (8001710 <SystemInit+0x5c>)
 80016fa:	f44f 021f 	mov.w	r2, #10420224	@ 0x9f0000
 80016fe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001700:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <SystemInit+0x64>)
 8001702:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001706:	609a      	str	r2, [r3, #8]
#endif 
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	40021000 	.word	0x40021000
 8001714:	f8ff0000 	.word	0xf8ff0000
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800171c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800171e:	e003      	b.n	8001728 <LoopCopyDataInit>

08001720 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001720:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001722:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001724:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001726:	3104      	adds	r1, #4

08001728 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001728:	480a      	ldr	r0, [pc, #40]	@ (8001754 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800172a:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800172c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800172e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001730:	d3f6      	bcc.n	8001720 <CopyDataInit>
  ldr r2, =_sbss
 8001732:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001734:	e002      	b.n	800173c <LoopFillZerobss>

08001736 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001738:	f842 3b04 	str.w	r3, [r2], #4

0800173c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800173c:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800173e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001740:	d3f9      	bcc.n	8001736 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001742:	f7ff ffb7 	bl	80016b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001746:	f002 fa25 	bl	8003b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800174a:	f7ff fd1d 	bl	8001188 <main>
  bx lr
 800174e:	4770      	bx	lr
  ldr r3, =_sidata
 8001750:	08006194 	.word	0x08006194
  ldr r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001758:	200001d4 	.word	0x200001d4
  ldr r2, =_sbss
 800175c:	200001d4 	.word	0x200001d4
  ldr r3, = _ebss
 8001760:	20000378 	.word	0x20000378

08001764 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC1_2_IRQHandler>
	...

08001768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800176c:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <HAL_Init+0x28>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a07      	ldr	r2, [pc, #28]	@ (8001790 <HAL_Init+0x28>)
 8001772:	f043 0310 	orr.w	r3, r3, #16
 8001776:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001778:	2003      	movs	r0, #3
 800177a:	f000 fd67 	bl	800224c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177e:	200f      	movs	r0, #15
 8001780:	f000 f808 	bl	8001794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001784:	f7ff fe3a 	bl	80013fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40022000 	.word	0x40022000

08001794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800179c:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <HAL_InitTick+0x54>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <HAL_InitTick+0x58>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4619      	mov	r1, r3
 80017a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 fd71 	bl	800229a <HAL_SYSTICK_Config>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e00e      	b.n	80017e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b0f      	cmp	r3, #15
 80017c6:	d80a      	bhi.n	80017de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c8:	2200      	movs	r2, #0
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017d0:	f000 fd47 	bl	8002262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d4:	4a06      	ldr	r2, [pc, #24]	@ (80017f0 <HAL_InitTick+0x5c>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	e000      	b.n	80017e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000000 	.word	0x20000000
 80017ec:	20000008 	.word	0x20000008
 80017f0:	20000004 	.word	0x20000004

080017f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f8:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <HAL_IncTick+0x1c>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <HAL_IncTick+0x20>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4413      	add	r3, r2
 8001804:	4a03      	ldr	r2, [pc, #12]	@ (8001814 <HAL_IncTick+0x20>)
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	20000008 	.word	0x20000008
 8001814:	20000228 	.word	0x20000228

08001818 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return uwTick;
 800181c:	4b02      	ldr	r3, [pc, #8]	@ (8001828 <HAL_GetTick+0x10>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	20000228 	.word	0x20000228

0800182c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff fff0 	bl	8001818 <HAL_GetTick>
 8001838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001844:	d005      	beq.n	8001852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001846:	4b0a      	ldr	r3, [pc, #40]	@ (8001870 <HAL_Delay+0x44>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001852:	bf00      	nop
 8001854:	f7ff ffe0 	bl	8001818 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	429a      	cmp	r2, r3
 8001862:	d8f7      	bhi.n	8001854 <HAL_Delay+0x28>
  {
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000008 	.word	0x20000008

08001874 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e0be      	b.n	8001a14 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d109      	bne.n	80018b8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff fdd4 	bl	8001460 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 fbdd 	bl	8002078 <ADC_ConversionStop_Disable>
 80018be:	4603      	mov	r3, r0
 80018c0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f040 8099 	bne.w	8001a02 <HAL_ADC_Init+0x18e>
 80018d0:	7dfb      	ldrb	r3, [r7, #23]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f040 8095 	bne.w	8001a02 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80018e0:	f023 0302 	bic.w	r3, r3, #2
 80018e4:	f043 0202 	orr.w	r2, r3, #2
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018f4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	7b1b      	ldrb	r3, [r3, #12]
 80018fa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018fc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	4313      	orrs	r3, r2
 8001902:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800190c:	d003      	beq.n	8001916 <HAL_ADC_Init+0xa2>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d102      	bne.n	800191c <HAL_ADC_Init+0xa8>
 8001916:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800191a:	e000      	b.n	800191e <HAL_ADC_Init+0xaa>
 800191c:	2300      	movs	r3, #0
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	7d1b      	ldrb	r3, [r3, #20]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d119      	bne.n	8001960 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	7b1b      	ldrb	r3, [r3, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d109      	bne.n	8001948 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	3b01      	subs	r3, #1
 800193a:	035a      	lsls	r2, r3, #13
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	e00b      	b.n	8001960 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194c:	f043 0220 	orr.w	r2, r3, #32
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001958:	f043 0201 	orr.w	r2, r3, #1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	430a      	orrs	r2, r1
 8001972:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	4b28      	ldr	r3, [pc, #160]	@ (8001a1c <HAL_ADC_Init+0x1a8>)
 800197c:	4013      	ands	r3, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6812      	ldr	r2, [r2, #0]
 8001982:	68b9      	ldr	r1, [r7, #8]
 8001984:	430b      	orrs	r3, r1
 8001986:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001990:	d003      	beq.n	800199a <HAL_ADC_Init+0x126>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d104      	bne.n	80019a4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	3b01      	subs	r3, #1
 80019a0:	051b      	lsls	r3, r3, #20
 80019a2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019aa:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	4b18      	ldr	r3, [pc, #96]	@ (8001a20 <HAL_ADC_Init+0x1ac>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d10b      	bne.n	80019e0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d2:	f023 0303 	bic.w	r3, r3, #3
 80019d6:	f043 0201 	orr.w	r2, r3, #1
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019de:	e018      	b.n	8001a12 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e4:	f023 0312 	bic.w	r3, r3, #18
 80019e8:	f043 0210 	orr.w	r2, r3, #16
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f4:	f043 0201 	orr.w	r2, r3, #1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a00:	e007      	b.n	8001a12 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a06:	f043 0210 	orr.w	r2, r3, #16
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	ffe1f7fd 	.word	0xffe1f7fd
 8001a20:	ff1f0efe 	.word	0xff1f0efe

08001a24 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_ADC_Start+0x1a>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e098      	b.n	8001b70 <HAL_ADC_Start+0x14c>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 fac4 	bl	8001fd4 <ADC_Enable>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f040 8087 	bne.w	8001b66 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a60:	f023 0301 	bic.w	r3, r3, #1
 8001a64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a41      	ldr	r2, [pc, #260]	@ (8001b78 <HAL_ADC_Start+0x154>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d105      	bne.n	8001a82 <HAL_ADC_Start+0x5e>
 8001a76:	4b41      	ldr	r3, [pc, #260]	@ (8001b7c <HAL_ADC_Start+0x158>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d115      	bne.n	8001aae <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a86:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d026      	beq.n	8001aea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001aa4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001aac:	e01d      	b.n	8001aea <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a2f      	ldr	r2, [pc, #188]	@ (8001b7c <HAL_ADC_Start+0x158>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d004      	beq.n	8001ace <HAL_ADC_Start+0xaa>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a2b      	ldr	r2, [pc, #172]	@ (8001b78 <HAL_ADC_Start+0x154>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d10d      	bne.n	8001aea <HAL_ADC_Start+0xc6>
 8001ace:	4b2b      	ldr	r3, [pc, #172]	@ (8001b7c <HAL_ADC_Start+0x158>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d007      	beq.n	8001aea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ade:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ae2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d006      	beq.n	8001b04 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afa:	f023 0206 	bic.w	r2, r3, #6
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b02:	e002      	b.n	8001b0a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f06f 0202 	mvn.w	r2, #2
 8001b1a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001b26:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001b2a:	d113      	bne.n	8001b54 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b30:	4a11      	ldr	r2, [pc, #68]	@ (8001b78 <HAL_ADC_Start+0x154>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d105      	bne.n	8001b42 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b36:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <HAL_ADC_Start+0x158>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d108      	bne.n	8001b54 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	e00c      	b.n	8001b6e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	e003      	b.n	8001b6e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40012800 	.word	0x40012800
 8001b7c:	40012400 	.word	0x40012400

08001b80 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_ADC_Stop+0x1a>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e01a      	b.n	8001bd0 <HAL_ADC_Stop+0x50>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 fa68 	bl	8002078 <ADC_ConversionStop_Disable>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d109      	bne.n	8001bc6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001bba:	f023 0301 	bic.w	r3, r3, #1
 8001bbe:	f043 0201 	orr.w	r2, r3, #1
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001bee:	f7ff fe13 	bl	8001818 <HAL_GetTick>
 8001bf2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00b      	beq.n	8001c1a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c06:	f043 0220 	orr.w	r2, r3, #32
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e0c8      	b.n	8001dac <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d12a      	bne.n	8001c7e <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d123      	bne.n	8001c7e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c36:	e01a      	b.n	8001c6e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c3e:	d016      	beq.n	8001c6e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d007      	beq.n	8001c56 <HAL_ADC_PollForConversion+0x7e>
 8001c46:	f7ff fde7 	bl	8001818 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d20b      	bcs.n	8001c6e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c5a:	f043 0204 	orr.w	r2, r3, #4
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	629a      	str	r2, [r3, #40]	@ 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e09e      	b.n	8001dac <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0dd      	beq.n	8001c38 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c7c:	e06c      	b.n	8001d58 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001c7e:	4b4d      	ldr	r3, [pc, #308]	@ (8001db4 <HAL_ADC_PollForConversion+0x1dc>)
 8001c80:	681c      	ldr	r4, [r3, #0]
 8001c82:	2002      	movs	r0, #2
 8001c84:	f001 f966 	bl	8002f54 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6919      	ldr	r1, [r3, #16]
 8001c94:	4b48      	ldr	r3, [pc, #288]	@ (8001db8 <HAL_ADC_PollForConversion+0x1e0>)
 8001c96:	400b      	ands	r3, r1
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d118      	bne.n	8001cce <HAL_ADC_PollForConversion+0xf6>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68d9      	ldr	r1, [r3, #12]
 8001ca2:	4b46      	ldr	r3, [pc, #280]	@ (8001dbc <HAL_ADC_PollForConversion+0x1e4>)
 8001ca4:	400b      	ands	r3, r1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d111      	bne.n	8001cce <HAL_ADC_PollForConversion+0xf6>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6919      	ldr	r1, [r3, #16]
 8001cb0:	4b43      	ldr	r3, [pc, #268]	@ (8001dc0 <HAL_ADC_PollForConversion+0x1e8>)
 8001cb2:	400b      	ands	r3, r1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d108      	bne.n	8001cca <HAL_ADC_PollForConversion+0xf2>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68d9      	ldr	r1, [r3, #12]
 8001cbe:	4b41      	ldr	r3, [pc, #260]	@ (8001dc4 <HAL_ADC_PollForConversion+0x1ec>)
 8001cc0:	400b      	ands	r3, r1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_ADC_PollForConversion+0xf2>
 8001cc6:	2314      	movs	r3, #20
 8001cc8:	e020      	b.n	8001d0c <HAL_ADC_PollForConversion+0x134>
 8001cca:	2329      	movs	r3, #41	@ 0x29
 8001ccc:	e01e      	b.n	8001d0c <HAL_ADC_PollForConversion+0x134>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6919      	ldr	r1, [r3, #16]
 8001cd4:	4b3a      	ldr	r3, [pc, #232]	@ (8001dc0 <HAL_ADC_PollForConversion+0x1e8>)
 8001cd6:	400b      	ands	r3, r1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d106      	bne.n	8001cea <HAL_ADC_PollForConversion+0x112>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68d9      	ldr	r1, [r3, #12]
 8001ce2:	4b38      	ldr	r3, [pc, #224]	@ (8001dc4 <HAL_ADC_PollForConversion+0x1ec>)
 8001ce4:	400b      	ands	r3, r1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00d      	beq.n	8001d06 <HAL_ADC_PollForConversion+0x12e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6919      	ldr	r1, [r3, #16]
 8001cf0:	4b35      	ldr	r3, [pc, #212]	@ (8001dc8 <HAL_ADC_PollForConversion+0x1f0>)
 8001cf2:	400b      	ands	r3, r1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d108      	bne.n	8001d0a <HAL_ADC_PollForConversion+0x132>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68d9      	ldr	r1, [r3, #12]
 8001cfe:	4b32      	ldr	r3, [pc, #200]	@ (8001dc8 <HAL_ADC_PollForConversion+0x1f0>)
 8001d00:	400b      	ands	r3, r1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_ADC_PollForConversion+0x132>
 8001d06:	2354      	movs	r3, #84	@ 0x54
 8001d08:	e000      	b.n	8001d0c <HAL_ADC_PollForConversion+0x134>
 8001d0a:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001d0c:	fb02 f303 	mul.w	r3, r2, r3
 8001d10:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d12:	e01d      	b.n	8001d50 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d1a:	d016      	beq.n	8001d4a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d007      	beq.n	8001d32 <HAL_ADC_PollForConversion+0x15a>
 8001d22:	f7ff fd79 	bl	8001818 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d20b      	bcs.n	8001d4a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d36:	f043 0204 	orr.w	r2, r3, #4
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	629a      	str	r2, [r3, #40]	@ 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e030      	b.n	8001dac <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d8dd      	bhi.n	8001d14 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0212 	mvn.w	r2, #18
 8001d60:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d66:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001d78:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001d7c:	d115      	bne.n	8001daa <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d111      	bne.n	8001daa <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d105      	bne.n	8001daa <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da2:	f043 0201 	orr.w	r2, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	371c      	adds	r7, #28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd90      	pop	{r4, r7, pc}
 8001db4:	20000000 	.word	0x20000000
 8001db8:	24924924 	.word	0x24924924
 8001dbc:	00924924 	.word	0x00924924
 8001dc0:	12492492 	.word	0x12492492
 8001dc4:	00492492 	.word	0x00492492
 8001dc8:	00249249 	.word	0x00249249

08001dcc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x20>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e0dc      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1da>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b06      	cmp	r3, #6
 8001e12:	d81c      	bhi.n	8001e4e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	3b05      	subs	r3, #5
 8001e26:	221f      	movs	r2, #31
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	4019      	ands	r1, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	6818      	ldr	r0, [r3, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3b05      	subs	r3, #5
 8001e40:	fa00 f203 	lsl.w	r2, r0, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e4c:	e03c      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b0c      	cmp	r3, #12
 8001e54:	d81c      	bhi.n	8001e90 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	3b23      	subs	r3, #35	@ 0x23
 8001e68:	221f      	movs	r2, #31
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	4019      	ands	r1, r3
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	3b23      	subs	r3, #35	@ 0x23
 8001e82:	fa00 f203 	lsl.w	r2, r0, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e8e:	e01b      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3b41      	subs	r3, #65	@ 0x41
 8001ea2:	221f      	movs	r2, #31
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	4019      	ands	r1, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	3b41      	subs	r3, #65	@ 0x41
 8001ebc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b09      	cmp	r3, #9
 8001ece:	d91c      	bls.n	8001f0a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68d9      	ldr	r1, [r3, #12]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	3b1e      	subs	r3, #30
 8001ee2:	2207      	movs	r2, #7
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	4019      	ands	r1, r3
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6898      	ldr	r0, [r3, #8]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4413      	add	r3, r2
 8001efa:	3b1e      	subs	r3, #30
 8001efc:	fa00 f203 	lsl.w	r2, r0, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	60da      	str	r2, [r3, #12]
 8001f08:	e019      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6919      	ldr	r1, [r3, #16]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4613      	mov	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4413      	add	r3, r2
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	4019      	ands	r1, r3
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6898      	ldr	r0, [r3, #8]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	fa00 f203 	lsl.w	r2, r0, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b10      	cmp	r3, #16
 8001f44:	d003      	beq.n	8001f4e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f4a:	2b11      	cmp	r3, #17
 8001f4c:	d132      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1d      	ldr	r2, [pc, #116]	@ (8001fc8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d125      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d126      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001f74:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b10      	cmp	r3, #16
 8001f7c:	d11a      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f7e:	4b13      	ldr	r3, [pc, #76]	@ (8001fcc <HAL_ADC_ConfigChannel+0x1e8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a13      	ldr	r2, [pc, #76]	@ (8001fd0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	0c9a      	lsrs	r2, r3, #18
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f94:	e002      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f9      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x1b2>
 8001fa2:	e007      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa8:	f043 0220 	orr.w	r2, r3, #32
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	40012400 	.word	0x40012400
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	431bde83 	.word	0x431bde83

08001fd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d039      	beq.n	8002066 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f042 0201 	orr.w	r2, r2, #1
 8002000:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002002:	4b1b      	ldr	r3, [pc, #108]	@ (8002070 <ADC_Enable+0x9c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a1b      	ldr	r2, [pc, #108]	@ (8002074 <ADC_Enable+0xa0>)
 8002008:	fba2 2303 	umull	r2, r3, r2, r3
 800200c:	0c9b      	lsrs	r3, r3, #18
 800200e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002010:	e002      	b.n	8002018 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	3b01      	subs	r3, #1
 8002016:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f9      	bne.n	8002012 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800201e:	f7ff fbfb 	bl	8001818 <HAL_GetTick>
 8002022:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002024:	e018      	b.n	8002058 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002026:	f7ff fbf7 	bl	8001818 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d911      	bls.n	8002058 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002038:	f043 0210 	orr.w	r2, r3, #16
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	629a      	str	r2, [r3, #40]	@ 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002044:	f043 0201 	orr.w	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e007      	b.n	8002068 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b01      	cmp	r3, #1
 8002064:	d1df      	bne.n	8002026 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000000 	.word	0x20000000
 8002074:	431bde83 	.word	0x431bde83

08002078 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b01      	cmp	r3, #1
 8002090:	d127      	bne.n	80020e2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0201 	bic.w	r2, r2, #1
 80020a0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020a2:	f7ff fbb9 	bl	8001818 <HAL_GetTick>
 80020a6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020a8:	e014      	b.n	80020d4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020aa:	f7ff fbb5 	bl	8001818 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d90d      	bls.n	80020d4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020bc:	f043 0210 	orr.w	r2, r3, #16
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c8:	f043 0201 	orr.w	r2, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e007      	b.n	80020e4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d0e3      	beq.n	80020aa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002108:	4013      	ands	r3, r2
 800210a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002114:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800211c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800211e:	4a04      	ldr	r2, [pc, #16]	@ (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	60d3      	str	r3, [r2, #12]
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002138:	4b04      	ldr	r3, [pc, #16]	@ (800214c <__NVIC_GetPriorityGrouping+0x18>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	f003 0307 	and.w	r3, r3, #7
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	6039      	str	r1, [r7, #0]
 800215a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	2b00      	cmp	r3, #0
 8002162:	db0a      	blt.n	800217a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	490c      	ldr	r1, [pc, #48]	@ (800219c <__NVIC_SetPriority+0x4c>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	0112      	lsls	r2, r2, #4
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	440b      	add	r3, r1
 8002174:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002178:	e00a      	b.n	8002190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4908      	ldr	r1, [pc, #32]	@ (80021a0 <__NVIC_SetPriority+0x50>)
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	3b04      	subs	r3, #4
 8002188:	0112      	lsls	r2, r2, #4
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	440b      	add	r3, r1
 800218e:	761a      	strb	r2, [r3, #24]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000e100 	.word	0xe000e100
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	@ 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f1c3 0307 	rsb	r3, r3, #7
 80021be:	2b04      	cmp	r3, #4
 80021c0:	bf28      	it	cs
 80021c2:	2304      	movcs	r3, #4
 80021c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3304      	adds	r3, #4
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d902      	bls.n	80021d4 <NVIC_EncodePriority+0x30>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b03      	subs	r3, #3
 80021d2:	e000      	b.n	80021d6 <NVIC_EncodePriority+0x32>
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	401a      	ands	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43d9      	mvns	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	4313      	orrs	r3, r2
         );
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3724      	adds	r7, #36	@ 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002218:	d301      	bcc.n	800221e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221a:	2301      	movs	r3, #1
 800221c:	e00f      	b.n	800223e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221e:	4a0a      	ldr	r2, [pc, #40]	@ (8002248 <SysTick_Config+0x40>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002226:	210f      	movs	r1, #15
 8002228:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800222c:	f7ff ff90 	bl	8002150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002230:	4b05      	ldr	r3, [pc, #20]	@ (8002248 <SysTick_Config+0x40>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002236:	4b04      	ldr	r3, [pc, #16]	@ (8002248 <SysTick_Config+0x40>)
 8002238:	2207      	movs	r2, #7
 800223a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	e000e010 	.word	0xe000e010

0800224c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ff49 	bl	80020ec <__NVIC_SetPriorityGrouping>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002262:	b580      	push	{r7, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	af00      	add	r7, sp, #0
 8002268:	4603      	mov	r3, r0
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002274:	f7ff ff5e 	bl	8002134 <__NVIC_GetPriorityGrouping>
 8002278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	6978      	ldr	r0, [r7, #20]
 8002280:	f7ff ff90 	bl	80021a4 <NVIC_EncodePriority>
 8002284:	4602      	mov	r2, r0
 8002286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff5f 	bl	8002150 <__NVIC_SetPriority>
}
 8002292:	bf00      	nop
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff ffb0 	bl	8002208 <SysTick_Config>
 80022a8:	4603      	mov	r3, r0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b08b      	sub	sp, #44	@ 0x2c
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022be:	2300      	movs	r3, #0
 80022c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022c2:	2300      	movs	r3, #0
 80022c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c6:	e161      	b.n	800258c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022c8:	2201      	movs	r2, #1
 80022ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	f040 8150 	bne.w	8002586 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4a97      	ldr	r2, [pc, #604]	@ (8002548 <HAL_GPIO_Init+0x294>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d05e      	beq.n	80023ae <HAL_GPIO_Init+0xfa>
 80022f0:	4a95      	ldr	r2, [pc, #596]	@ (8002548 <HAL_GPIO_Init+0x294>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d875      	bhi.n	80023e2 <HAL_GPIO_Init+0x12e>
 80022f6:	4a95      	ldr	r2, [pc, #596]	@ (800254c <HAL_GPIO_Init+0x298>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d058      	beq.n	80023ae <HAL_GPIO_Init+0xfa>
 80022fc:	4a93      	ldr	r2, [pc, #588]	@ (800254c <HAL_GPIO_Init+0x298>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d86f      	bhi.n	80023e2 <HAL_GPIO_Init+0x12e>
 8002302:	4a93      	ldr	r2, [pc, #588]	@ (8002550 <HAL_GPIO_Init+0x29c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d052      	beq.n	80023ae <HAL_GPIO_Init+0xfa>
 8002308:	4a91      	ldr	r2, [pc, #580]	@ (8002550 <HAL_GPIO_Init+0x29c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d869      	bhi.n	80023e2 <HAL_GPIO_Init+0x12e>
 800230e:	4a91      	ldr	r2, [pc, #580]	@ (8002554 <HAL_GPIO_Init+0x2a0>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d04c      	beq.n	80023ae <HAL_GPIO_Init+0xfa>
 8002314:	4a8f      	ldr	r2, [pc, #572]	@ (8002554 <HAL_GPIO_Init+0x2a0>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d863      	bhi.n	80023e2 <HAL_GPIO_Init+0x12e>
 800231a:	4a8f      	ldr	r2, [pc, #572]	@ (8002558 <HAL_GPIO_Init+0x2a4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d046      	beq.n	80023ae <HAL_GPIO_Init+0xfa>
 8002320:	4a8d      	ldr	r2, [pc, #564]	@ (8002558 <HAL_GPIO_Init+0x2a4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d85d      	bhi.n	80023e2 <HAL_GPIO_Init+0x12e>
 8002326:	2b12      	cmp	r3, #18
 8002328:	d82a      	bhi.n	8002380 <HAL_GPIO_Init+0xcc>
 800232a:	2b12      	cmp	r3, #18
 800232c:	d859      	bhi.n	80023e2 <HAL_GPIO_Init+0x12e>
 800232e:	a201      	add	r2, pc, #4	@ (adr r2, 8002334 <HAL_GPIO_Init+0x80>)
 8002330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002334:	080023af 	.word	0x080023af
 8002338:	08002389 	.word	0x08002389
 800233c:	0800239b 	.word	0x0800239b
 8002340:	080023dd 	.word	0x080023dd
 8002344:	080023e3 	.word	0x080023e3
 8002348:	080023e3 	.word	0x080023e3
 800234c:	080023e3 	.word	0x080023e3
 8002350:	080023e3 	.word	0x080023e3
 8002354:	080023e3 	.word	0x080023e3
 8002358:	080023e3 	.word	0x080023e3
 800235c:	080023e3 	.word	0x080023e3
 8002360:	080023e3 	.word	0x080023e3
 8002364:	080023e3 	.word	0x080023e3
 8002368:	080023e3 	.word	0x080023e3
 800236c:	080023e3 	.word	0x080023e3
 8002370:	080023e3 	.word	0x080023e3
 8002374:	080023e3 	.word	0x080023e3
 8002378:	08002391 	.word	0x08002391
 800237c:	080023a5 	.word	0x080023a5
 8002380:	4a76      	ldr	r2, [pc, #472]	@ (800255c <HAL_GPIO_Init+0x2a8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d013      	beq.n	80023ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002386:	e02c      	b.n	80023e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	623b      	str	r3, [r7, #32]
          break;
 800238e:	e029      	b.n	80023e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	3304      	adds	r3, #4
 8002396:	623b      	str	r3, [r7, #32]
          break;
 8002398:	e024      	b.n	80023e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	3308      	adds	r3, #8
 80023a0:	623b      	str	r3, [r7, #32]
          break;
 80023a2:	e01f      	b.n	80023e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	330c      	adds	r3, #12
 80023aa:	623b      	str	r3, [r7, #32]
          break;
 80023ac:	e01a      	b.n	80023e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d102      	bne.n	80023bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023b6:	2304      	movs	r3, #4
 80023b8:	623b      	str	r3, [r7, #32]
          break;
 80023ba:	e013      	b.n	80023e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d105      	bne.n	80023d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023c4:	2308      	movs	r3, #8
 80023c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	611a      	str	r2, [r3, #16]
          break;
 80023ce:	e009      	b.n	80023e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023d0:	2308      	movs	r3, #8
 80023d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	615a      	str	r2, [r3, #20]
          break;
 80023da:	e003      	b.n	80023e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023dc:	2300      	movs	r3, #0
 80023de:	623b      	str	r3, [r7, #32]
          break;
 80023e0:	e000      	b.n	80023e4 <HAL_GPIO_Init+0x130>
          break;
 80023e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	2bff      	cmp	r3, #255	@ 0xff
 80023e8:	d801      	bhi.n	80023ee <HAL_GPIO_Init+0x13a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	e001      	b.n	80023f2 <HAL_GPIO_Init+0x13e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3304      	adds	r3, #4
 80023f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	2bff      	cmp	r3, #255	@ 0xff
 80023f8:	d802      	bhi.n	8002400 <HAL_GPIO_Init+0x14c>
 80023fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	e002      	b.n	8002406 <HAL_GPIO_Init+0x152>
 8002400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002402:	3b08      	subs	r3, #8
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	210f      	movs	r1, #15
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	fa01 f303 	lsl.w	r3, r1, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	401a      	ands	r2, r3
 8002418:	6a39      	ldr	r1, [r7, #32]
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	fa01 f303 	lsl.w	r3, r1, r3
 8002420:	431a      	orrs	r2, r3
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 80a9 	beq.w	8002586 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002434:	4b4a      	ldr	r3, [pc, #296]	@ (8002560 <HAL_GPIO_Init+0x2ac>)
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	4a49      	ldr	r2, [pc, #292]	@ (8002560 <HAL_GPIO_Init+0x2ac>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6193      	str	r3, [r2, #24]
 8002440:	4b47      	ldr	r3, [pc, #284]	@ (8002560 <HAL_GPIO_Init+0x2ac>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800244c:	4a45      	ldr	r2, [pc, #276]	@ (8002564 <HAL_GPIO_Init+0x2b0>)
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	3302      	adds	r3, #2
 8002454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002458:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	220f      	movs	r2, #15
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	4013      	ands	r3, r2
 800246e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a3d      	ldr	r2, [pc, #244]	@ (8002568 <HAL_GPIO_Init+0x2b4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d00d      	beq.n	8002494 <HAL_GPIO_Init+0x1e0>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a3c      	ldr	r2, [pc, #240]	@ (800256c <HAL_GPIO_Init+0x2b8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d007      	beq.n	8002490 <HAL_GPIO_Init+0x1dc>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a3b      	ldr	r2, [pc, #236]	@ (8002570 <HAL_GPIO_Init+0x2bc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d101      	bne.n	800248c <HAL_GPIO_Init+0x1d8>
 8002488:	2302      	movs	r3, #2
 800248a:	e004      	b.n	8002496 <HAL_GPIO_Init+0x1e2>
 800248c:	2303      	movs	r3, #3
 800248e:	e002      	b.n	8002496 <HAL_GPIO_Init+0x1e2>
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <HAL_GPIO_Init+0x1e2>
 8002494:	2300      	movs	r3, #0
 8002496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002498:	f002 0203 	and.w	r2, r2, #3
 800249c:	0092      	lsls	r2, r2, #2
 800249e:	4093      	lsls	r3, r2
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024a6:	492f      	ldr	r1, [pc, #188]	@ (8002564 <HAL_GPIO_Init+0x2b0>)
 80024a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024aa:	089b      	lsrs	r3, r3, #2
 80024ac:	3302      	adds	r3, #2
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d006      	beq.n	80024ce <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002574 <HAL_GPIO_Init+0x2c0>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	492b      	ldr	r1, [pc, #172]	@ (8002574 <HAL_GPIO_Init+0x2c0>)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	600b      	str	r3, [r1, #0]
 80024cc:	e006      	b.n	80024dc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024ce:	4b29      	ldr	r3, [pc, #164]	@ (8002574 <HAL_GPIO_Init+0x2c0>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	4927      	ldr	r1, [pc, #156]	@ (8002574 <HAL_GPIO_Init+0x2c0>)
 80024d8:	4013      	ands	r3, r2
 80024da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d006      	beq.n	80024f6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024e8:	4b22      	ldr	r3, [pc, #136]	@ (8002574 <HAL_GPIO_Init+0x2c0>)
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	4921      	ldr	r1, [pc, #132]	@ (8002574 <HAL_GPIO_Init+0x2c0>)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	604b      	str	r3, [r1, #4]
 80024f4:	e006      	b.n	8002504 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002574 <HAL_GPIO_Init+0x2c0>)
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	491d      	ldr	r1, [pc, #116]	@ (8002574 <HAL_GPIO_Init+0x2c0>)
 8002500:	4013      	ands	r3, r2
 8002502:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d006      	beq.n	800251e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002510:	4b18      	ldr	r3, [pc, #96]	@ (8002574 <HAL_GPIO_Init+0x2c0>)
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	4917      	ldr	r1, [pc, #92]	@ (8002574 <HAL_GPIO_Init+0x2c0>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	608b      	str	r3, [r1, #8]
 800251c:	e006      	b.n	800252c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800251e:	4b15      	ldr	r3, [pc, #84]	@ (8002574 <HAL_GPIO_Init+0x2c0>)
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	43db      	mvns	r3, r3
 8002526:	4913      	ldr	r1, [pc, #76]	@ (8002574 <HAL_GPIO_Init+0x2c0>)
 8002528:	4013      	ands	r3, r2
 800252a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01f      	beq.n	8002578 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002538:	4b0e      	ldr	r3, [pc, #56]	@ (8002574 <HAL_GPIO_Init+0x2c0>)
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	490d      	ldr	r1, [pc, #52]	@ (8002574 <HAL_GPIO_Init+0x2c0>)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	60cb      	str	r3, [r1, #12]
 8002544:	e01f      	b.n	8002586 <HAL_GPIO_Init+0x2d2>
 8002546:	bf00      	nop
 8002548:	10320000 	.word	0x10320000
 800254c:	10310000 	.word	0x10310000
 8002550:	10220000 	.word	0x10220000
 8002554:	10210000 	.word	0x10210000
 8002558:	10120000 	.word	0x10120000
 800255c:	10110000 	.word	0x10110000
 8002560:	40021000 	.word	0x40021000
 8002564:	40010000 	.word	0x40010000
 8002568:	40010800 	.word	0x40010800
 800256c:	40010c00 	.word	0x40010c00
 8002570:	40011000 	.word	0x40011000
 8002574:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002578:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <HAL_GPIO_Init+0x2f4>)
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	43db      	mvns	r3, r3
 8002580:	4909      	ldr	r1, [pc, #36]	@ (80025a8 <HAL_GPIO_Init+0x2f4>)
 8002582:	4013      	ands	r3, r2
 8002584:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002588:	3301      	adds	r3, #1
 800258a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	fa22 f303 	lsr.w	r3, r2, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	f47f ae96 	bne.w	80022c8 <HAL_GPIO_Init+0x14>
  }
}
 800259c:	bf00      	nop
 800259e:	bf00      	nop
 80025a0:	372c      	adds	r7, #44	@ 0x2c
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	40010400 	.word	0x40010400

080025ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	807b      	strh	r3, [r7, #2]
 80025b8:	4613      	mov	r3, r2
 80025ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025bc:	787b      	ldrb	r3, [r7, #1]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025c2:	887a      	ldrh	r2, [r7, #2]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025c8:	e003      	b.n	80025d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025ca:	887b      	ldrh	r3, [r7, #2]
 80025cc:	041a      	lsls	r2, r3, #16
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	611a      	str	r2, [r3, #16]
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e272      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8087 	beq.w	800270a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025fc:	4b92      	ldr	r3, [pc, #584]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	2b04      	cmp	r3, #4
 8002606:	d00c      	beq.n	8002622 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002608:	4b8f      	ldr	r3, [pc, #572]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 030c 	and.w	r3, r3, #12
 8002610:	2b08      	cmp	r3, #8
 8002612:	d112      	bne.n	800263a <HAL_RCC_OscConfig+0x5e>
 8002614:	4b8c      	ldr	r3, [pc, #560]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800261c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002620:	d10b      	bne.n	800263a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002622:	4b89      	ldr	r3, [pc, #548]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d06c      	beq.n	8002708 <HAL_RCC_OscConfig+0x12c>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d168      	bne.n	8002708 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e24c      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002642:	d106      	bne.n	8002652 <HAL_RCC_OscConfig+0x76>
 8002644:	4b80      	ldr	r3, [pc, #512]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a7f      	ldr	r2, [pc, #508]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 800264a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	e02e      	b.n	80026b0 <HAL_RCC_OscConfig+0xd4>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0x98>
 800265a:	4b7b      	ldr	r3, [pc, #492]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a7a      	ldr	r2, [pc, #488]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002660:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	4b78      	ldr	r3, [pc, #480]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a77      	ldr	r2, [pc, #476]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 800266c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e01d      	b.n	80026b0 <HAL_RCC_OscConfig+0xd4>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0xbc>
 800267e:	4b72      	ldr	r3, [pc, #456]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a71      	ldr	r2, [pc, #452]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002684:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	4b6f      	ldr	r3, [pc, #444]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a6e      	ldr	r2, [pc, #440]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_OscConfig+0xd4>
 8002698:	4b6b      	ldr	r3, [pc, #428]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a6a      	ldr	r2, [pc, #424]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 800269e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	4b68      	ldr	r3, [pc, #416]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a67      	ldr	r2, [pc, #412]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 80026aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d013      	beq.n	80026e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7ff f8ae 	bl	8001818 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c0:	f7ff f8aa 	bl	8001818 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b64      	cmp	r3, #100	@ 0x64
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e200      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0xe4>
 80026de:	e014      	b.n	800270a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7ff f89a 	bl	8001818 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e8:	f7ff f896 	bl	8001818 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	@ 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e1ec      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fa:	4b53      	ldr	r3, [pc, #332]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x10c>
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d063      	beq.n	80027de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002716:	4b4c      	ldr	r3, [pc, #304]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00b      	beq.n	800273a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002722:	4b49      	ldr	r3, [pc, #292]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	2b08      	cmp	r3, #8
 800272c:	d11c      	bne.n	8002768 <HAL_RCC_OscConfig+0x18c>
 800272e:	4b46      	ldr	r3, [pc, #280]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d116      	bne.n	8002768 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273a:	4b43      	ldr	r3, [pc, #268]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <HAL_RCC_OscConfig+0x176>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d001      	beq.n	8002752 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e1c0      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002752:	4b3d      	ldr	r3, [pc, #244]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4939      	ldr	r1, [pc, #228]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002766:	e03a      	b.n	80027de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d020      	beq.n	80027b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002770:	4b36      	ldr	r3, [pc, #216]	@ (800284c <HAL_RCC_OscConfig+0x270>)
 8002772:	2201      	movs	r2, #1
 8002774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002776:	f7ff f84f 	bl	8001818 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800277e:	f7ff f84b 	bl	8001818 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e1a1      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002790:	4b2d      	ldr	r3, [pc, #180]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279c:	4b2a      	ldr	r3, [pc, #168]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4927      	ldr	r1, [pc, #156]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]
 80027b0:	e015      	b.n	80027de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b2:	4b26      	ldr	r3, [pc, #152]	@ (800284c <HAL_RCC_OscConfig+0x270>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7ff f82e 	bl	8001818 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c0:	f7ff f82a 	bl	8001818 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e180      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d03a      	beq.n	8002860 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d019      	beq.n	8002826 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f2:	4b17      	ldr	r3, [pc, #92]	@ (8002850 <HAL_RCC_OscConfig+0x274>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f8:	f7ff f80e 	bl	8001818 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002800:	f7ff f80a 	bl	8001818 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e160      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002812:	4b0d      	ldr	r3, [pc, #52]	@ (8002848 <HAL_RCC_OscConfig+0x26c>)
 8002814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800281e:	2001      	movs	r0, #1
 8002820:	f000 fac4 	bl	8002dac <RCC_Delay>
 8002824:	e01c      	b.n	8002860 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002826:	4b0a      	ldr	r3, [pc, #40]	@ (8002850 <HAL_RCC_OscConfig+0x274>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282c:	f7fe fff4 	bl	8001818 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002832:	e00f      	b.n	8002854 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002834:	f7fe fff0 	bl	8001818 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d908      	bls.n	8002854 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e146      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000
 800284c:	42420000 	.word	0x42420000
 8002850:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002854:	4b92      	ldr	r3, [pc, #584]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1e9      	bne.n	8002834 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80a6 	beq.w	80029ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002872:	4b8b      	ldr	r3, [pc, #556]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10d      	bne.n	800289a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	4b88      	ldr	r3, [pc, #544]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	4a87      	ldr	r2, [pc, #540]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002888:	61d3      	str	r3, [r2, #28]
 800288a:	4b85      	ldr	r3, [pc, #532]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002896:	2301      	movs	r3, #1
 8002898:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289a:	4b82      	ldr	r3, [pc, #520]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d118      	bne.n	80028d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028a6:	4b7f      	ldr	r3, [pc, #508]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a7e      	ldr	r2, [pc, #504]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c8>)
 80028ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b2:	f7fe ffb1 	bl	8001818 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ba:	f7fe ffad 	bl	8001818 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b64      	cmp	r3, #100	@ 0x64
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e103      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028cc:	4b75      	ldr	r3, [pc, #468]	@ (8002aa4 <HAL_RCC_OscConfig+0x4c8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d106      	bne.n	80028ee <HAL_RCC_OscConfig+0x312>
 80028e0:	4b6f      	ldr	r3, [pc, #444]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	4a6e      	ldr	r2, [pc, #440]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	6213      	str	r3, [r2, #32]
 80028ec:	e02d      	b.n	800294a <HAL_RCC_OscConfig+0x36e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10c      	bne.n	8002910 <HAL_RCC_OscConfig+0x334>
 80028f6:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	4a69      	ldr	r2, [pc, #420]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	f023 0301 	bic.w	r3, r3, #1
 8002900:	6213      	str	r3, [r2, #32]
 8002902:	4b67      	ldr	r3, [pc, #412]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	4a66      	ldr	r2, [pc, #408]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002908:	f023 0304 	bic.w	r3, r3, #4
 800290c:	6213      	str	r3, [r2, #32]
 800290e:	e01c      	b.n	800294a <HAL_RCC_OscConfig+0x36e>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	2b05      	cmp	r3, #5
 8002916:	d10c      	bne.n	8002932 <HAL_RCC_OscConfig+0x356>
 8002918:	4b61      	ldr	r3, [pc, #388]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	4a60      	ldr	r2, [pc, #384]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 800291e:	f043 0304 	orr.w	r3, r3, #4
 8002922:	6213      	str	r3, [r2, #32]
 8002924:	4b5e      	ldr	r3, [pc, #376]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	4a5d      	ldr	r2, [pc, #372]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6213      	str	r3, [r2, #32]
 8002930:	e00b      	b.n	800294a <HAL_RCC_OscConfig+0x36e>
 8002932:	4b5b      	ldr	r3, [pc, #364]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	4a5a      	ldr	r2, [pc, #360]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	6213      	str	r3, [r2, #32]
 800293e:	4b58      	ldr	r3, [pc, #352]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	4a57      	ldr	r2, [pc, #348]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002944:	f023 0304 	bic.w	r3, r3, #4
 8002948:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d015      	beq.n	800297e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002952:	f7fe ff61 	bl	8001818 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002958:	e00a      	b.n	8002970 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295a:	f7fe ff5d 	bl	8001818 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002968:	4293      	cmp	r3, r2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e0b1      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002970:	4b4b      	ldr	r3, [pc, #300]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0ee      	beq.n	800295a <HAL_RCC_OscConfig+0x37e>
 800297c:	e014      	b.n	80029a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297e:	f7fe ff4b 	bl	8001818 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002984:	e00a      	b.n	800299c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002986:	f7fe ff47 	bl	8001818 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002994:	4293      	cmp	r3, r2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e09b      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299c:	4b40      	ldr	r3, [pc, #256]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1ee      	bne.n	8002986 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029a8:	7dfb      	ldrb	r3, [r7, #23]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d105      	bne.n	80029ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ae:	4b3c      	ldr	r3, [pc, #240]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	4a3b      	ldr	r2, [pc, #236]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 8087 	beq.w	8002ad2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029c4:	4b36      	ldr	r3, [pc, #216]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 030c 	and.w	r3, r3, #12
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d061      	beq.n	8002a94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d146      	bne.n	8002a66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d8:	4b33      	ldr	r3, [pc, #204]	@ (8002aa8 <HAL_RCC_OscConfig+0x4cc>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029de:	f7fe ff1b 	bl	8001818 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e6:	f7fe ff17 	bl	8001818 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e06d      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f8:	4b29      	ldr	r3, [pc, #164]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f0      	bne.n	80029e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a0c:	d108      	bne.n	8002a20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a0e:	4b24      	ldr	r3, [pc, #144]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	4921      	ldr	r1, [pc, #132]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a20:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a19      	ldr	r1, [r3, #32]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	430b      	orrs	r3, r1
 8002a32:	491b      	ldr	r1, [pc, #108]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a38:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa8 <HAL_RCC_OscConfig+0x4cc>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3e:	f7fe feeb 	bl	8001818 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a46:	f7fe fee7 	bl	8001818 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e03d      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a58:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x46a>
 8002a64:	e035      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a66:	4b10      	ldr	r3, [pc, #64]	@ (8002aa8 <HAL_RCC_OscConfig+0x4cc>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7fe fed4 	bl	8001818 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a74:	f7fe fed0 	bl	8001818 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e026      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a86:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <HAL_RCC_OscConfig+0x4c4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x498>
 8002a92:	e01e      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d107      	bne.n	8002aac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e019      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40007000 	.word	0x40007000
 8002aa8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002aac:	4b0b      	ldr	r3, [pc, #44]	@ (8002adc <HAL_RCC_OscConfig+0x500>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d106      	bne.n	8002ace <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d001      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40021000 	.word	0x40021000

08002ae0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0d0      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002af4:	4b6a      	ldr	r3, [pc, #424]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d910      	bls.n	8002b24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b67      	ldr	r3, [pc, #412]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 0207 	bic.w	r2, r3, #7
 8002b0a:	4965      	ldr	r1, [pc, #404]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b63      	ldr	r3, [pc, #396]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0b8      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d020      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b3c:	4b59      	ldr	r3, [pc, #356]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4a58      	ldr	r2, [pc, #352]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b54:	4b53      	ldr	r3, [pc, #332]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4a52      	ldr	r2, [pc, #328]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b60:	4b50      	ldr	r3, [pc, #320]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	494d      	ldr	r1, [pc, #308]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d040      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	4b47      	ldr	r3, [pc, #284]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d115      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e07f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9e:	4b41      	ldr	r3, [pc, #260]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e073      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bae:	4b3d      	ldr	r3, [pc, #244]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e06b      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bbe:	4b39      	ldr	r3, [pc, #228]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f023 0203 	bic.w	r2, r3, #3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4936      	ldr	r1, [pc, #216]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd0:	f7fe fe22 	bl	8001818 <HAL_GetTick>
 8002bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd8:	f7fe fe1e 	bl	8001818 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e053      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 020c 	and.w	r2, r3, #12
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d1eb      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c00:	4b27      	ldr	r3, [pc, #156]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d210      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0e:	4b24      	ldr	r3, [pc, #144]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 0207 	bic.w	r2, r3, #7
 8002c16:	4922      	ldr	r1, [pc, #136]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e032      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c3c:	4b19      	ldr	r3, [pc, #100]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4916      	ldr	r1, [pc, #88]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c5a:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	490e      	ldr	r1, [pc, #56]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c6e:	f000 f821 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	490a      	ldr	r1, [pc, #40]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c80:	5ccb      	ldrb	r3, [r1, r3]
 8002c82:	fa22 f303 	lsr.w	r3, r2, r3
 8002c86:	4a09      	ldr	r2, [pc, #36]	@ (8002cac <HAL_RCC_ClockConfig+0x1cc>)
 8002c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c8a:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1d0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fd80 	bl	8001794 <HAL_InitTick>

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40022000 	.word	0x40022000
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	08005df4 	.word	0x08005df4
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	20000004 	.word	0x20000004

08002cb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb4:	b490      	push	{r4, r7}
 8002cb6:	b08a      	sub	sp, #40	@ 0x28
 8002cb8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cba:	4b29      	ldr	r3, [pc, #164]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0xac>)
 8002cbc:	1d3c      	adds	r4, r7, #4
 8002cbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cc4:	f240 2301 	movw	r3, #513	@ 0x201
 8002cc8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cde:	4b21      	ldr	r3, [pc, #132]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d002      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d003      	beq.n	8002cfa <HAL_RCC_GetSysClockFreq+0x46>
 8002cf2:	e02b      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cf6:	623b      	str	r3, [r7, #32]
      break;
 8002cf8:	e02b      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	0c9b      	lsrs	r3, r3, #18
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	3328      	adds	r3, #40	@ 0x28
 8002d04:	443b      	add	r3, r7
 8002d06:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d0a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d012      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d16:	4b13      	ldr	r3, [pc, #76]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	0c5b      	lsrs	r3, r3, #17
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	3328      	adds	r3, #40	@ 0x28
 8002d22:	443b      	add	r3, r7
 8002d24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	4a0e      	ldr	r2, [pc, #56]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d2e:	fb03 f202 	mul.w	r2, r3, r2
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d3a:	e004      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	4a0b      	ldr	r2, [pc, #44]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d40:	fb02 f303 	mul.w	r3, r2, r3
 8002d44:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8002d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d48:	623b      	str	r3, [r7, #32]
      break;
 8002d4a:	e002      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d4c:	4b06      	ldr	r3, [pc, #24]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d4e:	623b      	str	r3, [r7, #32]
      break;
 8002d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d52:	6a3b      	ldr	r3, [r7, #32]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3728      	adds	r7, #40	@ 0x28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc90      	pop	{r4, r7}
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	08005dd4 	.word	0x08005dd4
 8002d64:	40021000 	.word	0x40021000
 8002d68:	007a1200 	.word	0x007a1200
 8002d6c:	003d0900 	.word	0x003d0900

08002d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d74:	4b02      	ldr	r3, [pc, #8]	@ (8002d80 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr
 8002d80:	20000000 	.word	0x20000000

08002d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d88:	f7ff fff2 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	4b05      	ldr	r3, [pc, #20]	@ (8002da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	0adb      	lsrs	r3, r3, #11
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	4903      	ldr	r1, [pc, #12]	@ (8002da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d9a:	5ccb      	ldrb	r3, [r1, r3]
 8002d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40021000 	.word	0x40021000
 8002da8:	08005e04 	.word	0x08005e04

08002dac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002db4:	4b0a      	ldr	r3, [pc, #40]	@ (8002de0 <RCC_Delay+0x34>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a0a      	ldr	r2, [pc, #40]	@ (8002de4 <RCC_Delay+0x38>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	0a5b      	lsrs	r3, r3, #9
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	fb02 f303 	mul.w	r3, r2, r3
 8002dc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002dc8:	bf00      	nop
  }
  while (Delay --);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1e5a      	subs	r2, r3, #1
 8002dce:	60fa      	str	r2, [r7, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f9      	bne.n	8002dc8 <RCC_Delay+0x1c>
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr
 8002de0:	20000000 	.word	0x20000000
 8002de4:	10624dd3 	.word	0x10624dd3

08002de8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d07d      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002e04:	2300      	movs	r3, #0
 8002e06:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e08:	4b4f      	ldr	r3, [pc, #316]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10d      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e14:	4b4c      	ldr	r3, [pc, #304]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	4a4b      	ldr	r2, [pc, #300]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e1e:	61d3      	str	r3, [r2, #28]
 8002e20:	4b49      	ldr	r3, [pc, #292]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e30:	4b46      	ldr	r3, [pc, #280]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d118      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e3c:	4b43      	ldr	r3, [pc, #268]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a42      	ldr	r2, [pc, #264]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e48:	f7fe fce6 	bl	8001818 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4e:	e008      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e50:	f7fe fce2 	bl	8001818 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	@ 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e06d      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e62:	4b3a      	ldr	r3, [pc, #232]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e6e:	4b36      	ldr	r3, [pc, #216]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e76:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d02e      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d027      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e94:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e96:	4b2e      	ldr	r3, [pc, #184]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ea2:	4a29      	ldr	r2, [pc, #164]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d014      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb2:	f7fe fcb1 	bl	8001818 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7fe fcad 	bl	8001818 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e036      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0ee      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002edc:	4b1a      	ldr	r3, [pc, #104]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	4917      	ldr	r1, [pc, #92]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002eee:	7dfb      	ldrb	r3, [r7, #23]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d105      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef4:	4b14      	ldr	r3, [pc, #80]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	4a13      	ldr	r2, [pc, #76]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002efe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	490b      	ldr	r1, [pc, #44]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0310 	and.w	r3, r3, #16
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d008      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f2a:	4b07      	ldr	r3, [pc, #28]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	4904      	ldr	r1, [pc, #16]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	42420440 	.word	0x42420440

08002f54 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f54:	b590      	push	{r4, r7, lr}
 8002f56:	b08d      	sub	sp, #52	@ 0x34
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f5c:	4b58      	ldr	r3, [pc, #352]	@ (80030c0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002f5e:	f107 040c 	add.w	r4, r7, #12
 8002f62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f68:	f240 2301 	movw	r3, #513	@ 0x201
 8002f6c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f72:	2300      	movs	r3, #0
 8002f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f76:	2300      	movs	r3, #0
 8002f78:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b10      	cmp	r3, #16
 8002f86:	d00a      	beq.n	8002f9e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b10      	cmp	r3, #16
 8002f8c:	f200 808e 	bhi.w	80030ac <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d049      	beq.n	800302a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d079      	beq.n	8003090 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002f9c:	e086      	b.n	80030ac <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002f9e:	4b49      	ldr	r3, [pc, #292]	@ (80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002fa4:	4b47      	ldr	r3, [pc, #284]	@ (80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d07f      	beq.n	80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	0c9b      	lsrs	r3, r3, #18
 8002fb4:	f003 030f 	and.w	r3, r3, #15
 8002fb8:	3330      	adds	r3, #48	@ 0x30
 8002fba:	443b      	add	r3, r7
 8002fbc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002fc0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d017      	beq.n	8002ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fcc:	4b3d      	ldr	r3, [pc, #244]	@ (80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	0c5b      	lsrs	r3, r3, #17
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	3330      	adds	r3, #48	@ 0x30
 8002fd8:	443b      	add	r3, r7
 8002fda:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002fde:	627b      	str	r3, [r7, #36]	@ 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00d      	beq.n	8003006 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002fea:	4a37      	ldr	r2, [pc, #220]	@ (80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fee:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	fb02 f303 	mul.w	r3, r2, r3
 8002ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ffa:	e004      	b.n	8003006 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	4a33      	ldr	r2, [pc, #204]	@ (80030cc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003000:	fb02 f303 	mul.w	r3, r2, r3
 8003004:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003006:	4b2f      	ldr	r3, [pc, #188]	@ (80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800300e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003012:	d102      	bne.n	800301a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003016:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8003018:	e04a      	b.n	80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800301a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	4a2c      	ldr	r2, [pc, #176]	@ (80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003020:	fba2 2303 	umull	r2, r3, r2, r3
 8003024:	085b      	lsrs	r3, r3, #1
 8003026:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8003028:	e042      	b.n	80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800302a:	4b26      	ldr	r3, [pc, #152]	@ (80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800303a:	d108      	bne.n	800304e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003046:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800304a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800304c:	e01f      	b.n	800308e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003058:	d109      	bne.n	800306e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800305a:	4b1a      	ldr	r3, [pc, #104]	@ (80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003066:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800306a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800306c:	e00f      	b.n	800308e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003074:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003078:	d11c      	bne.n	80030b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800307a:	4b12      	ldr	r3, [pc, #72]	@ (80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d016      	beq.n	80030b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003086:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800308a:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 800308c:	e012      	b.n	80030b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800308e:	e011      	b.n	80030b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003090:	f7ff fe78 	bl	8002d84 <HAL_RCC_GetPCLK2Freq>
 8003094:	4602      	mov	r2, r0
 8003096:	4b0b      	ldr	r3, [pc, #44]	@ (80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	0b9b      	lsrs	r3, r3, #14
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	3301      	adds	r3, #1
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80030aa:	e004      	b.n	80030b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80030ac:	bf00      	nop
 80030ae:	e002      	b.n	80030b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80030b0:	bf00      	nop
 80030b2:	e000      	b.n	80030b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80030b4:	bf00      	nop
    }
  }
  return (frequency);
 80030b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3734      	adds	r7, #52	@ 0x34
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd90      	pop	{r4, r7, pc}
 80030c0:	08005de4 	.word	0x08005de4
 80030c4:	40021000 	.word	0x40021000
 80030c8:	007a1200 	.word	0x007a1200
 80030cc:	003d0900 	.word	0x003d0900
 80030d0:	aaaaaaab 	.word	0xaaaaaaab

080030d4 <__cvt>:
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030da:	461d      	mov	r5, r3
 80030dc:	bfbb      	ittet	lt
 80030de:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80030e2:	461d      	movlt	r5, r3
 80030e4:	2300      	movge	r3, #0
 80030e6:	232d      	movlt	r3, #45	@ 0x2d
 80030e8:	b088      	sub	sp, #32
 80030ea:	4614      	mov	r4, r2
 80030ec:	bfb8      	it	lt
 80030ee:	4614      	movlt	r4, r2
 80030f0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80030f2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80030f4:	7013      	strb	r3, [r2, #0]
 80030f6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80030f8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80030fc:	f023 0820 	bic.w	r8, r3, #32
 8003100:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003104:	d005      	beq.n	8003112 <__cvt+0x3e>
 8003106:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800310a:	d100      	bne.n	800310e <__cvt+0x3a>
 800310c:	3601      	adds	r6, #1
 800310e:	2302      	movs	r3, #2
 8003110:	e000      	b.n	8003114 <__cvt+0x40>
 8003112:	2303      	movs	r3, #3
 8003114:	aa07      	add	r2, sp, #28
 8003116:	9204      	str	r2, [sp, #16]
 8003118:	aa06      	add	r2, sp, #24
 800311a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800311e:	e9cd 3600 	strd	r3, r6, [sp]
 8003122:	4622      	mov	r2, r4
 8003124:	462b      	mov	r3, r5
 8003126:	f000 fdf7 	bl	8003d18 <_dtoa_r>
 800312a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800312e:	4607      	mov	r7, r0
 8003130:	d119      	bne.n	8003166 <__cvt+0x92>
 8003132:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003134:	07db      	lsls	r3, r3, #31
 8003136:	d50e      	bpl.n	8003156 <__cvt+0x82>
 8003138:	eb00 0906 	add.w	r9, r0, r6
 800313c:	2200      	movs	r2, #0
 800313e:	2300      	movs	r3, #0
 8003140:	4620      	mov	r0, r4
 8003142:	4629      	mov	r1, r5
 8003144:	f7fd fc30 	bl	80009a8 <__aeabi_dcmpeq>
 8003148:	b108      	cbz	r0, 800314e <__cvt+0x7a>
 800314a:	f8cd 901c 	str.w	r9, [sp, #28]
 800314e:	2230      	movs	r2, #48	@ 0x30
 8003150:	9b07      	ldr	r3, [sp, #28]
 8003152:	454b      	cmp	r3, r9
 8003154:	d31e      	bcc.n	8003194 <__cvt+0xc0>
 8003156:	4638      	mov	r0, r7
 8003158:	9b07      	ldr	r3, [sp, #28]
 800315a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800315c:	1bdb      	subs	r3, r3, r7
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	b008      	add	sp, #32
 8003162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003166:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800316a:	eb00 0906 	add.w	r9, r0, r6
 800316e:	d1e5      	bne.n	800313c <__cvt+0x68>
 8003170:	7803      	ldrb	r3, [r0, #0]
 8003172:	2b30      	cmp	r3, #48	@ 0x30
 8003174:	d10a      	bne.n	800318c <__cvt+0xb8>
 8003176:	2200      	movs	r2, #0
 8003178:	2300      	movs	r3, #0
 800317a:	4620      	mov	r0, r4
 800317c:	4629      	mov	r1, r5
 800317e:	f7fd fc13 	bl	80009a8 <__aeabi_dcmpeq>
 8003182:	b918      	cbnz	r0, 800318c <__cvt+0xb8>
 8003184:	f1c6 0601 	rsb	r6, r6, #1
 8003188:	f8ca 6000 	str.w	r6, [sl]
 800318c:	f8da 3000 	ldr.w	r3, [sl]
 8003190:	4499      	add	r9, r3
 8003192:	e7d3      	b.n	800313c <__cvt+0x68>
 8003194:	1c59      	adds	r1, r3, #1
 8003196:	9107      	str	r1, [sp, #28]
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	e7d9      	b.n	8003150 <__cvt+0x7c>

0800319c <__exponent>:
 800319c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800319e:	2900      	cmp	r1, #0
 80031a0:	bfb6      	itet	lt
 80031a2:	232d      	movlt	r3, #45	@ 0x2d
 80031a4:	232b      	movge	r3, #43	@ 0x2b
 80031a6:	4249      	neglt	r1, r1
 80031a8:	2909      	cmp	r1, #9
 80031aa:	7002      	strb	r2, [r0, #0]
 80031ac:	7043      	strb	r3, [r0, #1]
 80031ae:	dd29      	ble.n	8003204 <__exponent+0x68>
 80031b0:	f10d 0307 	add.w	r3, sp, #7
 80031b4:	461d      	mov	r5, r3
 80031b6:	270a      	movs	r7, #10
 80031b8:	fbb1 f6f7 	udiv	r6, r1, r7
 80031bc:	461a      	mov	r2, r3
 80031be:	fb07 1416 	mls	r4, r7, r6, r1
 80031c2:	3430      	adds	r4, #48	@ 0x30
 80031c4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80031c8:	460c      	mov	r4, r1
 80031ca:	2c63      	cmp	r4, #99	@ 0x63
 80031cc:	4631      	mov	r1, r6
 80031ce:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80031d2:	dcf1      	bgt.n	80031b8 <__exponent+0x1c>
 80031d4:	3130      	adds	r1, #48	@ 0x30
 80031d6:	1e94      	subs	r4, r2, #2
 80031d8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80031dc:	4623      	mov	r3, r4
 80031de:	1c41      	adds	r1, r0, #1
 80031e0:	42ab      	cmp	r3, r5
 80031e2:	d30a      	bcc.n	80031fa <__exponent+0x5e>
 80031e4:	f10d 0309 	add.w	r3, sp, #9
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	42ac      	cmp	r4, r5
 80031ec:	bf88      	it	hi
 80031ee:	2300      	movhi	r3, #0
 80031f0:	3302      	adds	r3, #2
 80031f2:	4403      	add	r3, r0
 80031f4:	1a18      	subs	r0, r3, r0
 80031f6:	b003      	add	sp, #12
 80031f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031fa:	f813 6b01 	ldrb.w	r6, [r3], #1
 80031fe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003202:	e7ed      	b.n	80031e0 <__exponent+0x44>
 8003204:	2330      	movs	r3, #48	@ 0x30
 8003206:	3130      	adds	r1, #48	@ 0x30
 8003208:	7083      	strb	r3, [r0, #2]
 800320a:	70c1      	strb	r1, [r0, #3]
 800320c:	1d03      	adds	r3, r0, #4
 800320e:	e7f1      	b.n	80031f4 <__exponent+0x58>

08003210 <_printf_float>:
 8003210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003214:	b091      	sub	sp, #68	@ 0x44
 8003216:	460c      	mov	r4, r1
 8003218:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800321c:	4616      	mov	r6, r2
 800321e:	461f      	mov	r7, r3
 8003220:	4605      	mov	r5, r0
 8003222:	f000 fcdf 	bl	8003be4 <_localeconv_r>
 8003226:	6803      	ldr	r3, [r0, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	9308      	str	r3, [sp, #32]
 800322c:	f7fc ff90 	bl	8000150 <strlen>
 8003230:	2300      	movs	r3, #0
 8003232:	930e      	str	r3, [sp, #56]	@ 0x38
 8003234:	f8d8 3000 	ldr.w	r3, [r8]
 8003238:	9009      	str	r0, [sp, #36]	@ 0x24
 800323a:	3307      	adds	r3, #7
 800323c:	f023 0307 	bic.w	r3, r3, #7
 8003240:	f103 0208 	add.w	r2, r3, #8
 8003244:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003248:	f8d4 b000 	ldr.w	fp, [r4]
 800324c:	f8c8 2000 	str.w	r2, [r8]
 8003250:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003254:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003258:	930b      	str	r3, [sp, #44]	@ 0x2c
 800325a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800325e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003262:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003266:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800326a:	4b9c      	ldr	r3, [pc, #624]	@ (80034dc <_printf_float+0x2cc>)
 800326c:	f7fd fbce 	bl	8000a0c <__aeabi_dcmpun>
 8003270:	bb70      	cbnz	r0, 80032d0 <_printf_float+0xc0>
 8003272:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003276:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800327a:	4b98      	ldr	r3, [pc, #608]	@ (80034dc <_printf_float+0x2cc>)
 800327c:	f7fd fba8 	bl	80009d0 <__aeabi_dcmple>
 8003280:	bb30      	cbnz	r0, 80032d0 <_printf_float+0xc0>
 8003282:	2200      	movs	r2, #0
 8003284:	2300      	movs	r3, #0
 8003286:	4640      	mov	r0, r8
 8003288:	4649      	mov	r1, r9
 800328a:	f7fd fb97 	bl	80009bc <__aeabi_dcmplt>
 800328e:	b110      	cbz	r0, 8003296 <_printf_float+0x86>
 8003290:	232d      	movs	r3, #45	@ 0x2d
 8003292:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003296:	4a92      	ldr	r2, [pc, #584]	@ (80034e0 <_printf_float+0x2d0>)
 8003298:	4b92      	ldr	r3, [pc, #584]	@ (80034e4 <_printf_float+0x2d4>)
 800329a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800329e:	bf8c      	ite	hi
 80032a0:	4690      	movhi	r8, r2
 80032a2:	4698      	movls	r8, r3
 80032a4:	2303      	movs	r3, #3
 80032a6:	f04f 0900 	mov.w	r9, #0
 80032aa:	6123      	str	r3, [r4, #16]
 80032ac:	f02b 0304 	bic.w	r3, fp, #4
 80032b0:	6023      	str	r3, [r4, #0]
 80032b2:	4633      	mov	r3, r6
 80032b4:	4621      	mov	r1, r4
 80032b6:	4628      	mov	r0, r5
 80032b8:	9700      	str	r7, [sp, #0]
 80032ba:	aa0f      	add	r2, sp, #60	@ 0x3c
 80032bc:	f000 f9d4 	bl	8003668 <_printf_common>
 80032c0:	3001      	adds	r0, #1
 80032c2:	f040 8090 	bne.w	80033e6 <_printf_float+0x1d6>
 80032c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032ca:	b011      	add	sp, #68	@ 0x44
 80032cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032d0:	4642      	mov	r2, r8
 80032d2:	464b      	mov	r3, r9
 80032d4:	4640      	mov	r0, r8
 80032d6:	4649      	mov	r1, r9
 80032d8:	f7fd fb98 	bl	8000a0c <__aeabi_dcmpun>
 80032dc:	b148      	cbz	r0, 80032f2 <_printf_float+0xe2>
 80032de:	464b      	mov	r3, r9
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	bfb8      	it	lt
 80032e4:	232d      	movlt	r3, #45	@ 0x2d
 80032e6:	4a80      	ldr	r2, [pc, #512]	@ (80034e8 <_printf_float+0x2d8>)
 80032e8:	bfb8      	it	lt
 80032ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80032ee:	4b7f      	ldr	r3, [pc, #508]	@ (80034ec <_printf_float+0x2dc>)
 80032f0:	e7d3      	b.n	800329a <_printf_float+0x8a>
 80032f2:	6863      	ldr	r3, [r4, #4]
 80032f4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	d13f      	bne.n	800337c <_printf_float+0x16c>
 80032fc:	2306      	movs	r3, #6
 80032fe:	6063      	str	r3, [r4, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003306:	6023      	str	r3, [r4, #0]
 8003308:	9206      	str	r2, [sp, #24]
 800330a:	aa0e      	add	r2, sp, #56	@ 0x38
 800330c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003310:	aa0d      	add	r2, sp, #52	@ 0x34
 8003312:	9203      	str	r2, [sp, #12]
 8003314:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003318:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800331c:	6863      	ldr	r3, [r4, #4]
 800331e:	4642      	mov	r2, r8
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	4628      	mov	r0, r5
 8003324:	464b      	mov	r3, r9
 8003326:	910a      	str	r1, [sp, #40]	@ 0x28
 8003328:	f7ff fed4 	bl	80030d4 <__cvt>
 800332c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800332e:	4680      	mov	r8, r0
 8003330:	2947      	cmp	r1, #71	@ 0x47
 8003332:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003334:	d128      	bne.n	8003388 <_printf_float+0x178>
 8003336:	1cc8      	adds	r0, r1, #3
 8003338:	db02      	blt.n	8003340 <_printf_float+0x130>
 800333a:	6863      	ldr	r3, [r4, #4]
 800333c:	4299      	cmp	r1, r3
 800333e:	dd40      	ble.n	80033c2 <_printf_float+0x1b2>
 8003340:	f1aa 0a02 	sub.w	sl, sl, #2
 8003344:	fa5f fa8a 	uxtb.w	sl, sl
 8003348:	4652      	mov	r2, sl
 800334a:	3901      	subs	r1, #1
 800334c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003350:	910d      	str	r1, [sp, #52]	@ 0x34
 8003352:	f7ff ff23 	bl	800319c <__exponent>
 8003356:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003358:	4681      	mov	r9, r0
 800335a:	1813      	adds	r3, r2, r0
 800335c:	2a01      	cmp	r2, #1
 800335e:	6123      	str	r3, [r4, #16]
 8003360:	dc02      	bgt.n	8003368 <_printf_float+0x158>
 8003362:	6822      	ldr	r2, [r4, #0]
 8003364:	07d2      	lsls	r2, r2, #31
 8003366:	d501      	bpl.n	800336c <_printf_float+0x15c>
 8003368:	3301      	adds	r3, #1
 800336a:	6123      	str	r3, [r4, #16]
 800336c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003370:	2b00      	cmp	r3, #0
 8003372:	d09e      	beq.n	80032b2 <_printf_float+0xa2>
 8003374:	232d      	movs	r3, #45	@ 0x2d
 8003376:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800337a:	e79a      	b.n	80032b2 <_printf_float+0xa2>
 800337c:	2947      	cmp	r1, #71	@ 0x47
 800337e:	d1bf      	bne.n	8003300 <_printf_float+0xf0>
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1bd      	bne.n	8003300 <_printf_float+0xf0>
 8003384:	2301      	movs	r3, #1
 8003386:	e7ba      	b.n	80032fe <_printf_float+0xee>
 8003388:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800338c:	d9dc      	bls.n	8003348 <_printf_float+0x138>
 800338e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003392:	d118      	bne.n	80033c6 <_printf_float+0x1b6>
 8003394:	2900      	cmp	r1, #0
 8003396:	6863      	ldr	r3, [r4, #4]
 8003398:	dd0b      	ble.n	80033b2 <_printf_float+0x1a2>
 800339a:	6121      	str	r1, [r4, #16]
 800339c:	b913      	cbnz	r3, 80033a4 <_printf_float+0x194>
 800339e:	6822      	ldr	r2, [r4, #0]
 80033a0:	07d0      	lsls	r0, r2, #31
 80033a2:	d502      	bpl.n	80033aa <_printf_float+0x19a>
 80033a4:	3301      	adds	r3, #1
 80033a6:	440b      	add	r3, r1
 80033a8:	6123      	str	r3, [r4, #16]
 80033aa:	f04f 0900 	mov.w	r9, #0
 80033ae:	65a1      	str	r1, [r4, #88]	@ 0x58
 80033b0:	e7dc      	b.n	800336c <_printf_float+0x15c>
 80033b2:	b913      	cbnz	r3, 80033ba <_printf_float+0x1aa>
 80033b4:	6822      	ldr	r2, [r4, #0]
 80033b6:	07d2      	lsls	r2, r2, #31
 80033b8:	d501      	bpl.n	80033be <_printf_float+0x1ae>
 80033ba:	3302      	adds	r3, #2
 80033bc:	e7f4      	b.n	80033a8 <_printf_float+0x198>
 80033be:	2301      	movs	r3, #1
 80033c0:	e7f2      	b.n	80033a8 <_printf_float+0x198>
 80033c2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80033c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80033c8:	4299      	cmp	r1, r3
 80033ca:	db05      	blt.n	80033d8 <_printf_float+0x1c8>
 80033cc:	6823      	ldr	r3, [r4, #0]
 80033ce:	6121      	str	r1, [r4, #16]
 80033d0:	07d8      	lsls	r0, r3, #31
 80033d2:	d5ea      	bpl.n	80033aa <_printf_float+0x19a>
 80033d4:	1c4b      	adds	r3, r1, #1
 80033d6:	e7e7      	b.n	80033a8 <_printf_float+0x198>
 80033d8:	2900      	cmp	r1, #0
 80033da:	bfcc      	ite	gt
 80033dc:	2201      	movgt	r2, #1
 80033de:	f1c1 0202 	rsble	r2, r1, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	e7e0      	b.n	80033a8 <_printf_float+0x198>
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	055a      	lsls	r2, r3, #21
 80033ea:	d407      	bmi.n	80033fc <_printf_float+0x1ec>
 80033ec:	6923      	ldr	r3, [r4, #16]
 80033ee:	4642      	mov	r2, r8
 80033f0:	4631      	mov	r1, r6
 80033f2:	4628      	mov	r0, r5
 80033f4:	47b8      	blx	r7
 80033f6:	3001      	adds	r0, #1
 80033f8:	d12b      	bne.n	8003452 <_printf_float+0x242>
 80033fa:	e764      	b.n	80032c6 <_printf_float+0xb6>
 80033fc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003400:	f240 80dc 	bls.w	80035bc <_printf_float+0x3ac>
 8003404:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003408:	2200      	movs	r2, #0
 800340a:	2300      	movs	r3, #0
 800340c:	f7fd facc 	bl	80009a8 <__aeabi_dcmpeq>
 8003410:	2800      	cmp	r0, #0
 8003412:	d033      	beq.n	800347c <_printf_float+0x26c>
 8003414:	2301      	movs	r3, #1
 8003416:	4631      	mov	r1, r6
 8003418:	4628      	mov	r0, r5
 800341a:	4a35      	ldr	r2, [pc, #212]	@ (80034f0 <_printf_float+0x2e0>)
 800341c:	47b8      	blx	r7
 800341e:	3001      	adds	r0, #1
 8003420:	f43f af51 	beq.w	80032c6 <_printf_float+0xb6>
 8003424:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003428:	4543      	cmp	r3, r8
 800342a:	db02      	blt.n	8003432 <_printf_float+0x222>
 800342c:	6823      	ldr	r3, [r4, #0]
 800342e:	07d8      	lsls	r0, r3, #31
 8003430:	d50f      	bpl.n	8003452 <_printf_float+0x242>
 8003432:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003436:	4631      	mov	r1, r6
 8003438:	4628      	mov	r0, r5
 800343a:	47b8      	blx	r7
 800343c:	3001      	adds	r0, #1
 800343e:	f43f af42 	beq.w	80032c6 <_printf_float+0xb6>
 8003442:	f04f 0900 	mov.w	r9, #0
 8003446:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800344a:	f104 0a1a 	add.w	sl, r4, #26
 800344e:	45c8      	cmp	r8, r9
 8003450:	dc09      	bgt.n	8003466 <_printf_float+0x256>
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	079b      	lsls	r3, r3, #30
 8003456:	f100 8102 	bmi.w	800365e <_printf_float+0x44e>
 800345a:	68e0      	ldr	r0, [r4, #12]
 800345c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800345e:	4298      	cmp	r0, r3
 8003460:	bfb8      	it	lt
 8003462:	4618      	movlt	r0, r3
 8003464:	e731      	b.n	80032ca <_printf_float+0xba>
 8003466:	2301      	movs	r3, #1
 8003468:	4652      	mov	r2, sl
 800346a:	4631      	mov	r1, r6
 800346c:	4628      	mov	r0, r5
 800346e:	47b8      	blx	r7
 8003470:	3001      	adds	r0, #1
 8003472:	f43f af28 	beq.w	80032c6 <_printf_float+0xb6>
 8003476:	f109 0901 	add.w	r9, r9, #1
 800347a:	e7e8      	b.n	800344e <_printf_float+0x23e>
 800347c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800347e:	2b00      	cmp	r3, #0
 8003480:	dc38      	bgt.n	80034f4 <_printf_float+0x2e4>
 8003482:	2301      	movs	r3, #1
 8003484:	4631      	mov	r1, r6
 8003486:	4628      	mov	r0, r5
 8003488:	4a19      	ldr	r2, [pc, #100]	@ (80034f0 <_printf_float+0x2e0>)
 800348a:	47b8      	blx	r7
 800348c:	3001      	adds	r0, #1
 800348e:	f43f af1a 	beq.w	80032c6 <_printf_float+0xb6>
 8003492:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003496:	ea59 0303 	orrs.w	r3, r9, r3
 800349a:	d102      	bne.n	80034a2 <_printf_float+0x292>
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	07d9      	lsls	r1, r3, #31
 80034a0:	d5d7      	bpl.n	8003452 <_printf_float+0x242>
 80034a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80034a6:	4631      	mov	r1, r6
 80034a8:	4628      	mov	r0, r5
 80034aa:	47b8      	blx	r7
 80034ac:	3001      	adds	r0, #1
 80034ae:	f43f af0a 	beq.w	80032c6 <_printf_float+0xb6>
 80034b2:	f04f 0a00 	mov.w	sl, #0
 80034b6:	f104 0b1a 	add.w	fp, r4, #26
 80034ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80034bc:	425b      	negs	r3, r3
 80034be:	4553      	cmp	r3, sl
 80034c0:	dc01      	bgt.n	80034c6 <_printf_float+0x2b6>
 80034c2:	464b      	mov	r3, r9
 80034c4:	e793      	b.n	80033ee <_printf_float+0x1de>
 80034c6:	2301      	movs	r3, #1
 80034c8:	465a      	mov	r2, fp
 80034ca:	4631      	mov	r1, r6
 80034cc:	4628      	mov	r0, r5
 80034ce:	47b8      	blx	r7
 80034d0:	3001      	adds	r0, #1
 80034d2:	f43f aef8 	beq.w	80032c6 <_printf_float+0xb6>
 80034d6:	f10a 0a01 	add.w	sl, sl, #1
 80034da:	e7ee      	b.n	80034ba <_printf_float+0x2aa>
 80034dc:	7fefffff 	.word	0x7fefffff
 80034e0:	08005e10 	.word	0x08005e10
 80034e4:	08005e0c 	.word	0x08005e0c
 80034e8:	08005e18 	.word	0x08005e18
 80034ec:	08005e14 	.word	0x08005e14
 80034f0:	08005e1c 	.word	0x08005e1c
 80034f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80034f6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80034fa:	4553      	cmp	r3, sl
 80034fc:	bfa8      	it	ge
 80034fe:	4653      	movge	r3, sl
 8003500:	2b00      	cmp	r3, #0
 8003502:	4699      	mov	r9, r3
 8003504:	dc36      	bgt.n	8003574 <_printf_float+0x364>
 8003506:	f04f 0b00 	mov.w	fp, #0
 800350a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800350e:	f104 021a 	add.w	r2, r4, #26
 8003512:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003514:	930a      	str	r3, [sp, #40]	@ 0x28
 8003516:	eba3 0309 	sub.w	r3, r3, r9
 800351a:	455b      	cmp	r3, fp
 800351c:	dc31      	bgt.n	8003582 <_printf_float+0x372>
 800351e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003520:	459a      	cmp	sl, r3
 8003522:	dc3a      	bgt.n	800359a <_printf_float+0x38a>
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	07da      	lsls	r2, r3, #31
 8003528:	d437      	bmi.n	800359a <_printf_float+0x38a>
 800352a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800352c:	ebaa 0903 	sub.w	r9, sl, r3
 8003530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003532:	ebaa 0303 	sub.w	r3, sl, r3
 8003536:	4599      	cmp	r9, r3
 8003538:	bfa8      	it	ge
 800353a:	4699      	movge	r9, r3
 800353c:	f1b9 0f00 	cmp.w	r9, #0
 8003540:	dc33      	bgt.n	80035aa <_printf_float+0x39a>
 8003542:	f04f 0800 	mov.w	r8, #0
 8003546:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800354a:	f104 0b1a 	add.w	fp, r4, #26
 800354e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003550:	ebaa 0303 	sub.w	r3, sl, r3
 8003554:	eba3 0309 	sub.w	r3, r3, r9
 8003558:	4543      	cmp	r3, r8
 800355a:	f77f af7a 	ble.w	8003452 <_printf_float+0x242>
 800355e:	2301      	movs	r3, #1
 8003560:	465a      	mov	r2, fp
 8003562:	4631      	mov	r1, r6
 8003564:	4628      	mov	r0, r5
 8003566:	47b8      	blx	r7
 8003568:	3001      	adds	r0, #1
 800356a:	f43f aeac 	beq.w	80032c6 <_printf_float+0xb6>
 800356e:	f108 0801 	add.w	r8, r8, #1
 8003572:	e7ec      	b.n	800354e <_printf_float+0x33e>
 8003574:	4642      	mov	r2, r8
 8003576:	4631      	mov	r1, r6
 8003578:	4628      	mov	r0, r5
 800357a:	47b8      	blx	r7
 800357c:	3001      	adds	r0, #1
 800357e:	d1c2      	bne.n	8003506 <_printf_float+0x2f6>
 8003580:	e6a1      	b.n	80032c6 <_printf_float+0xb6>
 8003582:	2301      	movs	r3, #1
 8003584:	4631      	mov	r1, r6
 8003586:	4628      	mov	r0, r5
 8003588:	920a      	str	r2, [sp, #40]	@ 0x28
 800358a:	47b8      	blx	r7
 800358c:	3001      	adds	r0, #1
 800358e:	f43f ae9a 	beq.w	80032c6 <_printf_float+0xb6>
 8003592:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003594:	f10b 0b01 	add.w	fp, fp, #1
 8003598:	e7bb      	b.n	8003512 <_printf_float+0x302>
 800359a:	4631      	mov	r1, r6
 800359c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80035a0:	4628      	mov	r0, r5
 80035a2:	47b8      	blx	r7
 80035a4:	3001      	adds	r0, #1
 80035a6:	d1c0      	bne.n	800352a <_printf_float+0x31a>
 80035a8:	e68d      	b.n	80032c6 <_printf_float+0xb6>
 80035aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80035ac:	464b      	mov	r3, r9
 80035ae:	4631      	mov	r1, r6
 80035b0:	4628      	mov	r0, r5
 80035b2:	4442      	add	r2, r8
 80035b4:	47b8      	blx	r7
 80035b6:	3001      	adds	r0, #1
 80035b8:	d1c3      	bne.n	8003542 <_printf_float+0x332>
 80035ba:	e684      	b.n	80032c6 <_printf_float+0xb6>
 80035bc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80035c0:	f1ba 0f01 	cmp.w	sl, #1
 80035c4:	dc01      	bgt.n	80035ca <_printf_float+0x3ba>
 80035c6:	07db      	lsls	r3, r3, #31
 80035c8:	d536      	bpl.n	8003638 <_printf_float+0x428>
 80035ca:	2301      	movs	r3, #1
 80035cc:	4642      	mov	r2, r8
 80035ce:	4631      	mov	r1, r6
 80035d0:	4628      	mov	r0, r5
 80035d2:	47b8      	blx	r7
 80035d4:	3001      	adds	r0, #1
 80035d6:	f43f ae76 	beq.w	80032c6 <_printf_float+0xb6>
 80035da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80035de:	4631      	mov	r1, r6
 80035e0:	4628      	mov	r0, r5
 80035e2:	47b8      	blx	r7
 80035e4:	3001      	adds	r0, #1
 80035e6:	f43f ae6e 	beq.w	80032c6 <_printf_float+0xb6>
 80035ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80035ee:	2200      	movs	r2, #0
 80035f0:	2300      	movs	r3, #0
 80035f2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80035f6:	f7fd f9d7 	bl	80009a8 <__aeabi_dcmpeq>
 80035fa:	b9c0      	cbnz	r0, 800362e <_printf_float+0x41e>
 80035fc:	4653      	mov	r3, sl
 80035fe:	f108 0201 	add.w	r2, r8, #1
 8003602:	4631      	mov	r1, r6
 8003604:	4628      	mov	r0, r5
 8003606:	47b8      	blx	r7
 8003608:	3001      	adds	r0, #1
 800360a:	d10c      	bne.n	8003626 <_printf_float+0x416>
 800360c:	e65b      	b.n	80032c6 <_printf_float+0xb6>
 800360e:	2301      	movs	r3, #1
 8003610:	465a      	mov	r2, fp
 8003612:	4631      	mov	r1, r6
 8003614:	4628      	mov	r0, r5
 8003616:	47b8      	blx	r7
 8003618:	3001      	adds	r0, #1
 800361a:	f43f ae54 	beq.w	80032c6 <_printf_float+0xb6>
 800361e:	f108 0801 	add.w	r8, r8, #1
 8003622:	45d0      	cmp	r8, sl
 8003624:	dbf3      	blt.n	800360e <_printf_float+0x3fe>
 8003626:	464b      	mov	r3, r9
 8003628:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800362c:	e6e0      	b.n	80033f0 <_printf_float+0x1e0>
 800362e:	f04f 0800 	mov.w	r8, #0
 8003632:	f104 0b1a 	add.w	fp, r4, #26
 8003636:	e7f4      	b.n	8003622 <_printf_float+0x412>
 8003638:	2301      	movs	r3, #1
 800363a:	4642      	mov	r2, r8
 800363c:	e7e1      	b.n	8003602 <_printf_float+0x3f2>
 800363e:	2301      	movs	r3, #1
 8003640:	464a      	mov	r2, r9
 8003642:	4631      	mov	r1, r6
 8003644:	4628      	mov	r0, r5
 8003646:	47b8      	blx	r7
 8003648:	3001      	adds	r0, #1
 800364a:	f43f ae3c 	beq.w	80032c6 <_printf_float+0xb6>
 800364e:	f108 0801 	add.w	r8, r8, #1
 8003652:	68e3      	ldr	r3, [r4, #12]
 8003654:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003656:	1a5b      	subs	r3, r3, r1
 8003658:	4543      	cmp	r3, r8
 800365a:	dcf0      	bgt.n	800363e <_printf_float+0x42e>
 800365c:	e6fd      	b.n	800345a <_printf_float+0x24a>
 800365e:	f04f 0800 	mov.w	r8, #0
 8003662:	f104 0919 	add.w	r9, r4, #25
 8003666:	e7f4      	b.n	8003652 <_printf_float+0x442>

08003668 <_printf_common>:
 8003668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800366c:	4616      	mov	r6, r2
 800366e:	4698      	mov	r8, r3
 8003670:	688a      	ldr	r2, [r1, #8]
 8003672:	690b      	ldr	r3, [r1, #16]
 8003674:	4607      	mov	r7, r0
 8003676:	4293      	cmp	r3, r2
 8003678:	bfb8      	it	lt
 800367a:	4613      	movlt	r3, r2
 800367c:	6033      	str	r3, [r6, #0]
 800367e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003682:	460c      	mov	r4, r1
 8003684:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003688:	b10a      	cbz	r2, 800368e <_printf_common+0x26>
 800368a:	3301      	adds	r3, #1
 800368c:	6033      	str	r3, [r6, #0]
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	0699      	lsls	r1, r3, #26
 8003692:	bf42      	ittt	mi
 8003694:	6833      	ldrmi	r3, [r6, #0]
 8003696:	3302      	addmi	r3, #2
 8003698:	6033      	strmi	r3, [r6, #0]
 800369a:	6825      	ldr	r5, [r4, #0]
 800369c:	f015 0506 	ands.w	r5, r5, #6
 80036a0:	d106      	bne.n	80036b0 <_printf_common+0x48>
 80036a2:	f104 0a19 	add.w	sl, r4, #25
 80036a6:	68e3      	ldr	r3, [r4, #12]
 80036a8:	6832      	ldr	r2, [r6, #0]
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	42ab      	cmp	r3, r5
 80036ae:	dc2b      	bgt.n	8003708 <_printf_common+0xa0>
 80036b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80036b4:	6822      	ldr	r2, [r4, #0]
 80036b6:	3b00      	subs	r3, #0
 80036b8:	bf18      	it	ne
 80036ba:	2301      	movne	r3, #1
 80036bc:	0692      	lsls	r2, r2, #26
 80036be:	d430      	bmi.n	8003722 <_printf_common+0xba>
 80036c0:	4641      	mov	r1, r8
 80036c2:	4638      	mov	r0, r7
 80036c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80036c8:	47c8      	blx	r9
 80036ca:	3001      	adds	r0, #1
 80036cc:	d023      	beq.n	8003716 <_printf_common+0xae>
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	6922      	ldr	r2, [r4, #16]
 80036d2:	f003 0306 	and.w	r3, r3, #6
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	bf14      	ite	ne
 80036da:	2500      	movne	r5, #0
 80036dc:	6833      	ldreq	r3, [r6, #0]
 80036de:	f04f 0600 	mov.w	r6, #0
 80036e2:	bf08      	it	eq
 80036e4:	68e5      	ldreq	r5, [r4, #12]
 80036e6:	f104 041a 	add.w	r4, r4, #26
 80036ea:	bf08      	it	eq
 80036ec:	1aed      	subeq	r5, r5, r3
 80036ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80036f2:	bf08      	it	eq
 80036f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036f8:	4293      	cmp	r3, r2
 80036fa:	bfc4      	itt	gt
 80036fc:	1a9b      	subgt	r3, r3, r2
 80036fe:	18ed      	addgt	r5, r5, r3
 8003700:	42b5      	cmp	r5, r6
 8003702:	d11a      	bne.n	800373a <_printf_common+0xd2>
 8003704:	2000      	movs	r0, #0
 8003706:	e008      	b.n	800371a <_printf_common+0xb2>
 8003708:	2301      	movs	r3, #1
 800370a:	4652      	mov	r2, sl
 800370c:	4641      	mov	r1, r8
 800370e:	4638      	mov	r0, r7
 8003710:	47c8      	blx	r9
 8003712:	3001      	adds	r0, #1
 8003714:	d103      	bne.n	800371e <_printf_common+0xb6>
 8003716:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800371a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800371e:	3501      	adds	r5, #1
 8003720:	e7c1      	b.n	80036a6 <_printf_common+0x3e>
 8003722:	2030      	movs	r0, #48	@ 0x30
 8003724:	18e1      	adds	r1, r4, r3
 8003726:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003730:	4422      	add	r2, r4
 8003732:	3302      	adds	r3, #2
 8003734:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003738:	e7c2      	b.n	80036c0 <_printf_common+0x58>
 800373a:	2301      	movs	r3, #1
 800373c:	4622      	mov	r2, r4
 800373e:	4641      	mov	r1, r8
 8003740:	4638      	mov	r0, r7
 8003742:	47c8      	blx	r9
 8003744:	3001      	adds	r0, #1
 8003746:	d0e6      	beq.n	8003716 <_printf_common+0xae>
 8003748:	3601      	adds	r6, #1
 800374a:	e7d9      	b.n	8003700 <_printf_common+0x98>

0800374c <_printf_i>:
 800374c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003750:	7e0f      	ldrb	r7, [r1, #24]
 8003752:	4691      	mov	r9, r2
 8003754:	2f78      	cmp	r7, #120	@ 0x78
 8003756:	4680      	mov	r8, r0
 8003758:	460c      	mov	r4, r1
 800375a:	469a      	mov	sl, r3
 800375c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800375e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003762:	d807      	bhi.n	8003774 <_printf_i+0x28>
 8003764:	2f62      	cmp	r7, #98	@ 0x62
 8003766:	d80a      	bhi.n	800377e <_printf_i+0x32>
 8003768:	2f00      	cmp	r7, #0
 800376a:	f000 80d1 	beq.w	8003910 <_printf_i+0x1c4>
 800376e:	2f58      	cmp	r7, #88	@ 0x58
 8003770:	f000 80b8 	beq.w	80038e4 <_printf_i+0x198>
 8003774:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003778:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800377c:	e03a      	b.n	80037f4 <_printf_i+0xa8>
 800377e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003782:	2b15      	cmp	r3, #21
 8003784:	d8f6      	bhi.n	8003774 <_printf_i+0x28>
 8003786:	a101      	add	r1, pc, #4	@ (adr r1, 800378c <_printf_i+0x40>)
 8003788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800378c:	080037e5 	.word	0x080037e5
 8003790:	080037f9 	.word	0x080037f9
 8003794:	08003775 	.word	0x08003775
 8003798:	08003775 	.word	0x08003775
 800379c:	08003775 	.word	0x08003775
 80037a0:	08003775 	.word	0x08003775
 80037a4:	080037f9 	.word	0x080037f9
 80037a8:	08003775 	.word	0x08003775
 80037ac:	08003775 	.word	0x08003775
 80037b0:	08003775 	.word	0x08003775
 80037b4:	08003775 	.word	0x08003775
 80037b8:	080038f7 	.word	0x080038f7
 80037bc:	08003823 	.word	0x08003823
 80037c0:	080038b1 	.word	0x080038b1
 80037c4:	08003775 	.word	0x08003775
 80037c8:	08003775 	.word	0x08003775
 80037cc:	08003919 	.word	0x08003919
 80037d0:	08003775 	.word	0x08003775
 80037d4:	08003823 	.word	0x08003823
 80037d8:	08003775 	.word	0x08003775
 80037dc:	08003775 	.word	0x08003775
 80037e0:	080038b9 	.word	0x080038b9
 80037e4:	6833      	ldr	r3, [r6, #0]
 80037e6:	1d1a      	adds	r2, r3, #4
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6032      	str	r2, [r6, #0]
 80037ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80037f4:	2301      	movs	r3, #1
 80037f6:	e09c      	b.n	8003932 <_printf_i+0x1e6>
 80037f8:	6833      	ldr	r3, [r6, #0]
 80037fa:	6820      	ldr	r0, [r4, #0]
 80037fc:	1d19      	adds	r1, r3, #4
 80037fe:	6031      	str	r1, [r6, #0]
 8003800:	0606      	lsls	r6, r0, #24
 8003802:	d501      	bpl.n	8003808 <_printf_i+0xbc>
 8003804:	681d      	ldr	r5, [r3, #0]
 8003806:	e003      	b.n	8003810 <_printf_i+0xc4>
 8003808:	0645      	lsls	r5, r0, #25
 800380a:	d5fb      	bpl.n	8003804 <_printf_i+0xb8>
 800380c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003810:	2d00      	cmp	r5, #0
 8003812:	da03      	bge.n	800381c <_printf_i+0xd0>
 8003814:	232d      	movs	r3, #45	@ 0x2d
 8003816:	426d      	negs	r5, r5
 8003818:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800381c:	230a      	movs	r3, #10
 800381e:	4858      	ldr	r0, [pc, #352]	@ (8003980 <_printf_i+0x234>)
 8003820:	e011      	b.n	8003846 <_printf_i+0xfa>
 8003822:	6821      	ldr	r1, [r4, #0]
 8003824:	6833      	ldr	r3, [r6, #0]
 8003826:	0608      	lsls	r0, r1, #24
 8003828:	f853 5b04 	ldr.w	r5, [r3], #4
 800382c:	d402      	bmi.n	8003834 <_printf_i+0xe8>
 800382e:	0649      	lsls	r1, r1, #25
 8003830:	bf48      	it	mi
 8003832:	b2ad      	uxthmi	r5, r5
 8003834:	2f6f      	cmp	r7, #111	@ 0x6f
 8003836:	6033      	str	r3, [r6, #0]
 8003838:	bf14      	ite	ne
 800383a:	230a      	movne	r3, #10
 800383c:	2308      	moveq	r3, #8
 800383e:	4850      	ldr	r0, [pc, #320]	@ (8003980 <_printf_i+0x234>)
 8003840:	2100      	movs	r1, #0
 8003842:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003846:	6866      	ldr	r6, [r4, #4]
 8003848:	2e00      	cmp	r6, #0
 800384a:	60a6      	str	r6, [r4, #8]
 800384c:	db05      	blt.n	800385a <_printf_i+0x10e>
 800384e:	6821      	ldr	r1, [r4, #0]
 8003850:	432e      	orrs	r6, r5
 8003852:	f021 0104 	bic.w	r1, r1, #4
 8003856:	6021      	str	r1, [r4, #0]
 8003858:	d04b      	beq.n	80038f2 <_printf_i+0x1a6>
 800385a:	4616      	mov	r6, r2
 800385c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003860:	fb03 5711 	mls	r7, r3, r1, r5
 8003864:	5dc7      	ldrb	r7, [r0, r7]
 8003866:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800386a:	462f      	mov	r7, r5
 800386c:	42bb      	cmp	r3, r7
 800386e:	460d      	mov	r5, r1
 8003870:	d9f4      	bls.n	800385c <_printf_i+0x110>
 8003872:	2b08      	cmp	r3, #8
 8003874:	d10b      	bne.n	800388e <_printf_i+0x142>
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	07df      	lsls	r7, r3, #31
 800387a:	d508      	bpl.n	800388e <_printf_i+0x142>
 800387c:	6923      	ldr	r3, [r4, #16]
 800387e:	6861      	ldr	r1, [r4, #4]
 8003880:	4299      	cmp	r1, r3
 8003882:	bfde      	ittt	le
 8003884:	2330      	movle	r3, #48	@ 0x30
 8003886:	f806 3c01 	strble.w	r3, [r6, #-1]
 800388a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800388e:	1b92      	subs	r2, r2, r6
 8003890:	6122      	str	r2, [r4, #16]
 8003892:	464b      	mov	r3, r9
 8003894:	4621      	mov	r1, r4
 8003896:	4640      	mov	r0, r8
 8003898:	f8cd a000 	str.w	sl, [sp]
 800389c:	aa03      	add	r2, sp, #12
 800389e:	f7ff fee3 	bl	8003668 <_printf_common>
 80038a2:	3001      	adds	r0, #1
 80038a4:	d14a      	bne.n	800393c <_printf_i+0x1f0>
 80038a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038aa:	b004      	add	sp, #16
 80038ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	f043 0320 	orr.w	r3, r3, #32
 80038b6:	6023      	str	r3, [r4, #0]
 80038b8:	2778      	movs	r7, #120	@ 0x78
 80038ba:	4832      	ldr	r0, [pc, #200]	@ (8003984 <_printf_i+0x238>)
 80038bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	6831      	ldr	r1, [r6, #0]
 80038c4:	061f      	lsls	r7, r3, #24
 80038c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80038ca:	d402      	bmi.n	80038d2 <_printf_i+0x186>
 80038cc:	065f      	lsls	r7, r3, #25
 80038ce:	bf48      	it	mi
 80038d0:	b2ad      	uxthmi	r5, r5
 80038d2:	6031      	str	r1, [r6, #0]
 80038d4:	07d9      	lsls	r1, r3, #31
 80038d6:	bf44      	itt	mi
 80038d8:	f043 0320 	orrmi.w	r3, r3, #32
 80038dc:	6023      	strmi	r3, [r4, #0]
 80038de:	b11d      	cbz	r5, 80038e8 <_printf_i+0x19c>
 80038e0:	2310      	movs	r3, #16
 80038e2:	e7ad      	b.n	8003840 <_printf_i+0xf4>
 80038e4:	4826      	ldr	r0, [pc, #152]	@ (8003980 <_printf_i+0x234>)
 80038e6:	e7e9      	b.n	80038bc <_printf_i+0x170>
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	f023 0320 	bic.w	r3, r3, #32
 80038ee:	6023      	str	r3, [r4, #0]
 80038f0:	e7f6      	b.n	80038e0 <_printf_i+0x194>
 80038f2:	4616      	mov	r6, r2
 80038f4:	e7bd      	b.n	8003872 <_printf_i+0x126>
 80038f6:	6833      	ldr	r3, [r6, #0]
 80038f8:	6825      	ldr	r5, [r4, #0]
 80038fa:	1d18      	adds	r0, r3, #4
 80038fc:	6961      	ldr	r1, [r4, #20]
 80038fe:	6030      	str	r0, [r6, #0]
 8003900:	062e      	lsls	r6, r5, #24
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	d501      	bpl.n	800390a <_printf_i+0x1be>
 8003906:	6019      	str	r1, [r3, #0]
 8003908:	e002      	b.n	8003910 <_printf_i+0x1c4>
 800390a:	0668      	lsls	r0, r5, #25
 800390c:	d5fb      	bpl.n	8003906 <_printf_i+0x1ba>
 800390e:	8019      	strh	r1, [r3, #0]
 8003910:	2300      	movs	r3, #0
 8003912:	4616      	mov	r6, r2
 8003914:	6123      	str	r3, [r4, #16]
 8003916:	e7bc      	b.n	8003892 <_printf_i+0x146>
 8003918:	6833      	ldr	r3, [r6, #0]
 800391a:	2100      	movs	r1, #0
 800391c:	1d1a      	adds	r2, r3, #4
 800391e:	6032      	str	r2, [r6, #0]
 8003920:	681e      	ldr	r6, [r3, #0]
 8003922:	6862      	ldr	r2, [r4, #4]
 8003924:	4630      	mov	r0, r6
 8003926:	f000 f961 	bl	8003bec <memchr>
 800392a:	b108      	cbz	r0, 8003930 <_printf_i+0x1e4>
 800392c:	1b80      	subs	r0, r0, r6
 800392e:	6060      	str	r0, [r4, #4]
 8003930:	6863      	ldr	r3, [r4, #4]
 8003932:	6123      	str	r3, [r4, #16]
 8003934:	2300      	movs	r3, #0
 8003936:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800393a:	e7aa      	b.n	8003892 <_printf_i+0x146>
 800393c:	4632      	mov	r2, r6
 800393e:	4649      	mov	r1, r9
 8003940:	4640      	mov	r0, r8
 8003942:	6923      	ldr	r3, [r4, #16]
 8003944:	47d0      	blx	sl
 8003946:	3001      	adds	r0, #1
 8003948:	d0ad      	beq.n	80038a6 <_printf_i+0x15a>
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	079b      	lsls	r3, r3, #30
 800394e:	d413      	bmi.n	8003978 <_printf_i+0x22c>
 8003950:	68e0      	ldr	r0, [r4, #12]
 8003952:	9b03      	ldr	r3, [sp, #12]
 8003954:	4298      	cmp	r0, r3
 8003956:	bfb8      	it	lt
 8003958:	4618      	movlt	r0, r3
 800395a:	e7a6      	b.n	80038aa <_printf_i+0x15e>
 800395c:	2301      	movs	r3, #1
 800395e:	4632      	mov	r2, r6
 8003960:	4649      	mov	r1, r9
 8003962:	4640      	mov	r0, r8
 8003964:	47d0      	blx	sl
 8003966:	3001      	adds	r0, #1
 8003968:	d09d      	beq.n	80038a6 <_printf_i+0x15a>
 800396a:	3501      	adds	r5, #1
 800396c:	68e3      	ldr	r3, [r4, #12]
 800396e:	9903      	ldr	r1, [sp, #12]
 8003970:	1a5b      	subs	r3, r3, r1
 8003972:	42ab      	cmp	r3, r5
 8003974:	dcf2      	bgt.n	800395c <_printf_i+0x210>
 8003976:	e7eb      	b.n	8003950 <_printf_i+0x204>
 8003978:	2500      	movs	r5, #0
 800397a:	f104 0619 	add.w	r6, r4, #25
 800397e:	e7f5      	b.n	800396c <_printf_i+0x220>
 8003980:	08005e1e 	.word	0x08005e1e
 8003984:	08005e2f 	.word	0x08005e2f

08003988 <sniprintf>:
 8003988:	b40c      	push	{r2, r3}
 800398a:	b530      	push	{r4, r5, lr}
 800398c:	4b18      	ldr	r3, [pc, #96]	@ (80039f0 <sniprintf+0x68>)
 800398e:	1e0c      	subs	r4, r1, #0
 8003990:	681d      	ldr	r5, [r3, #0]
 8003992:	b09d      	sub	sp, #116	@ 0x74
 8003994:	da08      	bge.n	80039a8 <sniprintf+0x20>
 8003996:	238b      	movs	r3, #139	@ 0x8b
 8003998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800399c:	602b      	str	r3, [r5, #0]
 800399e:	b01d      	add	sp, #116	@ 0x74
 80039a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039a4:	b002      	add	sp, #8
 80039a6:	4770      	bx	lr
 80039a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80039ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80039b6:	bf0c      	ite	eq
 80039b8:	4623      	moveq	r3, r4
 80039ba:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80039be:	9304      	str	r3, [sp, #16]
 80039c0:	9307      	str	r3, [sp, #28]
 80039c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039c6:	9002      	str	r0, [sp, #8]
 80039c8:	9006      	str	r0, [sp, #24]
 80039ca:	f8ad 3016 	strh.w	r3, [sp, #22]
 80039ce:	4628      	mov	r0, r5
 80039d0:	ab21      	add	r3, sp, #132	@ 0x84
 80039d2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80039d4:	a902      	add	r1, sp, #8
 80039d6:	9301      	str	r3, [sp, #4]
 80039d8:	f000 ffce 	bl	8004978 <_svfiprintf_r>
 80039dc:	1c43      	adds	r3, r0, #1
 80039de:	bfbc      	itt	lt
 80039e0:	238b      	movlt	r3, #139	@ 0x8b
 80039e2:	602b      	strlt	r3, [r5, #0]
 80039e4:	2c00      	cmp	r4, #0
 80039e6:	d0da      	beq.n	800399e <sniprintf+0x16>
 80039e8:	2200      	movs	r2, #0
 80039ea:	9b02      	ldr	r3, [sp, #8]
 80039ec:	701a      	strb	r2, [r3, #0]
 80039ee:	e7d6      	b.n	800399e <sniprintf+0x16>
 80039f0:	20000018 	.word	0x20000018

080039f4 <std>:
 80039f4:	2300      	movs	r3, #0
 80039f6:	b510      	push	{r4, lr}
 80039f8:	4604      	mov	r4, r0
 80039fa:	e9c0 3300 	strd	r3, r3, [r0]
 80039fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a02:	6083      	str	r3, [r0, #8]
 8003a04:	8181      	strh	r1, [r0, #12]
 8003a06:	6643      	str	r3, [r0, #100]	@ 0x64
 8003a08:	81c2      	strh	r2, [r0, #14]
 8003a0a:	6183      	str	r3, [r0, #24]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	2208      	movs	r2, #8
 8003a10:	305c      	adds	r0, #92	@ 0x5c
 8003a12:	f000 f8b1 	bl	8003b78 <memset>
 8003a16:	4b0d      	ldr	r3, [pc, #52]	@ (8003a4c <std+0x58>)
 8003a18:	6224      	str	r4, [r4, #32]
 8003a1a:	6263      	str	r3, [r4, #36]	@ 0x24
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a50 <std+0x5c>)
 8003a1e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003a20:	4b0c      	ldr	r3, [pc, #48]	@ (8003a54 <std+0x60>)
 8003a22:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003a24:	4b0c      	ldr	r3, [pc, #48]	@ (8003a58 <std+0x64>)
 8003a26:	6323      	str	r3, [r4, #48]	@ 0x30
 8003a28:	4b0c      	ldr	r3, [pc, #48]	@ (8003a5c <std+0x68>)
 8003a2a:	429c      	cmp	r4, r3
 8003a2c:	d006      	beq.n	8003a3c <std+0x48>
 8003a2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003a32:	4294      	cmp	r4, r2
 8003a34:	d002      	beq.n	8003a3c <std+0x48>
 8003a36:	33d0      	adds	r3, #208	@ 0xd0
 8003a38:	429c      	cmp	r4, r3
 8003a3a:	d105      	bne.n	8003a48 <std+0x54>
 8003a3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a44:	f000 b8ca 	b.w	8003bdc <__retarget_lock_init_recursive>
 8003a48:	bd10      	pop	{r4, pc}
 8003a4a:	bf00      	nop
 8003a4c:	08005521 	.word	0x08005521
 8003a50:	08005543 	.word	0x08005543
 8003a54:	0800557b 	.word	0x0800557b
 8003a58:	0800559f 	.word	0x0800559f
 8003a5c:	2000022c 	.word	0x2000022c

08003a60 <stdio_exit_handler>:
 8003a60:	4a02      	ldr	r2, [pc, #8]	@ (8003a6c <stdio_exit_handler+0xc>)
 8003a62:	4903      	ldr	r1, [pc, #12]	@ (8003a70 <stdio_exit_handler+0x10>)
 8003a64:	4803      	ldr	r0, [pc, #12]	@ (8003a74 <stdio_exit_handler+0x14>)
 8003a66:	f000 b869 	b.w	8003b3c <_fwalk_sglue>
 8003a6a:	bf00      	nop
 8003a6c:	2000000c 	.word	0x2000000c
 8003a70:	08004dc5 	.word	0x08004dc5
 8003a74:	2000001c 	.word	0x2000001c

08003a78 <cleanup_stdio>:
 8003a78:	6841      	ldr	r1, [r0, #4]
 8003a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003aac <cleanup_stdio+0x34>)
 8003a7c:	b510      	push	{r4, lr}
 8003a7e:	4299      	cmp	r1, r3
 8003a80:	4604      	mov	r4, r0
 8003a82:	d001      	beq.n	8003a88 <cleanup_stdio+0x10>
 8003a84:	f001 f99e 	bl	8004dc4 <_fflush_r>
 8003a88:	68a1      	ldr	r1, [r4, #8]
 8003a8a:	4b09      	ldr	r3, [pc, #36]	@ (8003ab0 <cleanup_stdio+0x38>)
 8003a8c:	4299      	cmp	r1, r3
 8003a8e:	d002      	beq.n	8003a96 <cleanup_stdio+0x1e>
 8003a90:	4620      	mov	r0, r4
 8003a92:	f001 f997 	bl	8004dc4 <_fflush_r>
 8003a96:	68e1      	ldr	r1, [r4, #12]
 8003a98:	4b06      	ldr	r3, [pc, #24]	@ (8003ab4 <cleanup_stdio+0x3c>)
 8003a9a:	4299      	cmp	r1, r3
 8003a9c:	d004      	beq.n	8003aa8 <cleanup_stdio+0x30>
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003aa4:	f001 b98e 	b.w	8004dc4 <_fflush_r>
 8003aa8:	bd10      	pop	{r4, pc}
 8003aaa:	bf00      	nop
 8003aac:	2000022c 	.word	0x2000022c
 8003ab0:	20000294 	.word	0x20000294
 8003ab4:	200002fc 	.word	0x200002fc

08003ab8 <global_stdio_init.part.0>:
 8003ab8:	b510      	push	{r4, lr}
 8003aba:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae8 <global_stdio_init.part.0+0x30>)
 8003abc:	4c0b      	ldr	r4, [pc, #44]	@ (8003aec <global_stdio_init.part.0+0x34>)
 8003abe:	4a0c      	ldr	r2, [pc, #48]	@ (8003af0 <global_stdio_init.part.0+0x38>)
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	2104      	movs	r1, #4
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f7ff ff94 	bl	80039f4 <std>
 8003acc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	2109      	movs	r1, #9
 8003ad4:	f7ff ff8e 	bl	80039f4 <std>
 8003ad8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003adc:	2202      	movs	r2, #2
 8003ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ae2:	2112      	movs	r1, #18
 8003ae4:	f7ff bf86 	b.w	80039f4 <std>
 8003ae8:	20000364 	.word	0x20000364
 8003aec:	2000022c 	.word	0x2000022c
 8003af0:	08003a61 	.word	0x08003a61

08003af4 <__sfp_lock_acquire>:
 8003af4:	4801      	ldr	r0, [pc, #4]	@ (8003afc <__sfp_lock_acquire+0x8>)
 8003af6:	f000 b872 	b.w	8003bde <__retarget_lock_acquire_recursive>
 8003afa:	bf00      	nop
 8003afc:	20000369 	.word	0x20000369

08003b00 <__sfp_lock_release>:
 8003b00:	4801      	ldr	r0, [pc, #4]	@ (8003b08 <__sfp_lock_release+0x8>)
 8003b02:	f000 b86d 	b.w	8003be0 <__retarget_lock_release_recursive>
 8003b06:	bf00      	nop
 8003b08:	20000369 	.word	0x20000369

08003b0c <__sinit>:
 8003b0c:	b510      	push	{r4, lr}
 8003b0e:	4604      	mov	r4, r0
 8003b10:	f7ff fff0 	bl	8003af4 <__sfp_lock_acquire>
 8003b14:	6a23      	ldr	r3, [r4, #32]
 8003b16:	b11b      	cbz	r3, 8003b20 <__sinit+0x14>
 8003b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b1c:	f7ff bff0 	b.w	8003b00 <__sfp_lock_release>
 8003b20:	4b04      	ldr	r3, [pc, #16]	@ (8003b34 <__sinit+0x28>)
 8003b22:	6223      	str	r3, [r4, #32]
 8003b24:	4b04      	ldr	r3, [pc, #16]	@ (8003b38 <__sinit+0x2c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1f5      	bne.n	8003b18 <__sinit+0xc>
 8003b2c:	f7ff ffc4 	bl	8003ab8 <global_stdio_init.part.0>
 8003b30:	e7f2      	b.n	8003b18 <__sinit+0xc>
 8003b32:	bf00      	nop
 8003b34:	08003a79 	.word	0x08003a79
 8003b38:	20000364 	.word	0x20000364

08003b3c <_fwalk_sglue>:
 8003b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b40:	4607      	mov	r7, r0
 8003b42:	4688      	mov	r8, r1
 8003b44:	4614      	mov	r4, r2
 8003b46:	2600      	movs	r6, #0
 8003b48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b4c:	f1b9 0901 	subs.w	r9, r9, #1
 8003b50:	d505      	bpl.n	8003b5e <_fwalk_sglue+0x22>
 8003b52:	6824      	ldr	r4, [r4, #0]
 8003b54:	2c00      	cmp	r4, #0
 8003b56:	d1f7      	bne.n	8003b48 <_fwalk_sglue+0xc>
 8003b58:	4630      	mov	r0, r6
 8003b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b5e:	89ab      	ldrh	r3, [r5, #12]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d907      	bls.n	8003b74 <_fwalk_sglue+0x38>
 8003b64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	d003      	beq.n	8003b74 <_fwalk_sglue+0x38>
 8003b6c:	4629      	mov	r1, r5
 8003b6e:	4638      	mov	r0, r7
 8003b70:	47c0      	blx	r8
 8003b72:	4306      	orrs	r6, r0
 8003b74:	3568      	adds	r5, #104	@ 0x68
 8003b76:	e7e9      	b.n	8003b4c <_fwalk_sglue+0x10>

08003b78 <memset>:
 8003b78:	4603      	mov	r3, r0
 8003b7a:	4402      	add	r2, r0
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d100      	bne.n	8003b82 <memset+0xa>
 8003b80:	4770      	bx	lr
 8003b82:	f803 1b01 	strb.w	r1, [r3], #1
 8003b86:	e7f9      	b.n	8003b7c <memset+0x4>

08003b88 <__errno>:
 8003b88:	4b01      	ldr	r3, [pc, #4]	@ (8003b90 <__errno+0x8>)
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	20000018 	.word	0x20000018

08003b94 <__libc_init_array>:
 8003b94:	b570      	push	{r4, r5, r6, lr}
 8003b96:	2600      	movs	r6, #0
 8003b98:	4d0c      	ldr	r5, [pc, #48]	@ (8003bcc <__libc_init_array+0x38>)
 8003b9a:	4c0d      	ldr	r4, [pc, #52]	@ (8003bd0 <__libc_init_array+0x3c>)
 8003b9c:	1b64      	subs	r4, r4, r5
 8003b9e:	10a4      	asrs	r4, r4, #2
 8003ba0:	42a6      	cmp	r6, r4
 8003ba2:	d109      	bne.n	8003bb8 <__libc_init_array+0x24>
 8003ba4:	f002 f902 	bl	8005dac <_init>
 8003ba8:	2600      	movs	r6, #0
 8003baa:	4d0a      	ldr	r5, [pc, #40]	@ (8003bd4 <__libc_init_array+0x40>)
 8003bac:	4c0a      	ldr	r4, [pc, #40]	@ (8003bd8 <__libc_init_array+0x44>)
 8003bae:	1b64      	subs	r4, r4, r5
 8003bb0:	10a4      	asrs	r4, r4, #2
 8003bb2:	42a6      	cmp	r6, r4
 8003bb4:	d105      	bne.n	8003bc2 <__libc_init_array+0x2e>
 8003bb6:	bd70      	pop	{r4, r5, r6, pc}
 8003bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bbc:	4798      	blx	r3
 8003bbe:	3601      	adds	r6, #1
 8003bc0:	e7ee      	b.n	8003ba0 <__libc_init_array+0xc>
 8003bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bc6:	4798      	blx	r3
 8003bc8:	3601      	adds	r6, #1
 8003bca:	e7f2      	b.n	8003bb2 <__libc_init_array+0x1e>
 8003bcc:	0800618c 	.word	0x0800618c
 8003bd0:	0800618c 	.word	0x0800618c
 8003bd4:	0800618c 	.word	0x0800618c
 8003bd8:	08006190 	.word	0x08006190

08003bdc <__retarget_lock_init_recursive>:
 8003bdc:	4770      	bx	lr

08003bde <__retarget_lock_acquire_recursive>:
 8003bde:	4770      	bx	lr

08003be0 <__retarget_lock_release_recursive>:
 8003be0:	4770      	bx	lr
	...

08003be4 <_localeconv_r>:
 8003be4:	4800      	ldr	r0, [pc, #0]	@ (8003be8 <_localeconv_r+0x4>)
 8003be6:	4770      	bx	lr
 8003be8:	20000158 	.word	0x20000158

08003bec <memchr>:
 8003bec:	4603      	mov	r3, r0
 8003bee:	b510      	push	{r4, lr}
 8003bf0:	b2c9      	uxtb	r1, r1
 8003bf2:	4402      	add	r2, r0
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	d101      	bne.n	8003bfe <memchr+0x12>
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	e003      	b.n	8003c06 <memchr+0x1a>
 8003bfe:	7804      	ldrb	r4, [r0, #0]
 8003c00:	3301      	adds	r3, #1
 8003c02:	428c      	cmp	r4, r1
 8003c04:	d1f6      	bne.n	8003bf4 <memchr+0x8>
 8003c06:	bd10      	pop	{r4, pc}

08003c08 <quorem>:
 8003c08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c0c:	6903      	ldr	r3, [r0, #16]
 8003c0e:	690c      	ldr	r4, [r1, #16]
 8003c10:	4607      	mov	r7, r0
 8003c12:	42a3      	cmp	r3, r4
 8003c14:	db7e      	blt.n	8003d14 <quorem+0x10c>
 8003c16:	3c01      	subs	r4, #1
 8003c18:	00a3      	lsls	r3, r4, #2
 8003c1a:	f100 0514 	add.w	r5, r0, #20
 8003c1e:	f101 0814 	add.w	r8, r1, #20
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c28:	9301      	str	r3, [sp, #4]
 8003c2a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003c2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c32:	3301      	adds	r3, #1
 8003c34:	429a      	cmp	r2, r3
 8003c36:	fbb2 f6f3 	udiv	r6, r2, r3
 8003c3a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003c3e:	d32e      	bcc.n	8003c9e <quorem+0x96>
 8003c40:	f04f 0a00 	mov.w	sl, #0
 8003c44:	46c4      	mov	ip, r8
 8003c46:	46ae      	mov	lr, r5
 8003c48:	46d3      	mov	fp, sl
 8003c4a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003c4e:	b298      	uxth	r0, r3
 8003c50:	fb06 a000 	mla	r0, r6, r0, sl
 8003c54:	0c1b      	lsrs	r3, r3, #16
 8003c56:	0c02      	lsrs	r2, r0, #16
 8003c58:	fb06 2303 	mla	r3, r6, r3, r2
 8003c5c:	f8de 2000 	ldr.w	r2, [lr]
 8003c60:	b280      	uxth	r0, r0
 8003c62:	b292      	uxth	r2, r2
 8003c64:	1a12      	subs	r2, r2, r0
 8003c66:	445a      	add	r2, fp
 8003c68:	f8de 0000 	ldr.w	r0, [lr]
 8003c6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003c76:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003c7a:	b292      	uxth	r2, r2
 8003c7c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003c80:	45e1      	cmp	r9, ip
 8003c82:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003c86:	f84e 2b04 	str.w	r2, [lr], #4
 8003c8a:	d2de      	bcs.n	8003c4a <quorem+0x42>
 8003c8c:	9b00      	ldr	r3, [sp, #0]
 8003c8e:	58eb      	ldr	r3, [r5, r3]
 8003c90:	b92b      	cbnz	r3, 8003c9e <quorem+0x96>
 8003c92:	9b01      	ldr	r3, [sp, #4]
 8003c94:	3b04      	subs	r3, #4
 8003c96:	429d      	cmp	r5, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	d32f      	bcc.n	8003cfc <quorem+0xf4>
 8003c9c:	613c      	str	r4, [r7, #16]
 8003c9e:	4638      	mov	r0, r7
 8003ca0:	f001 fb36 	bl	8005310 <__mcmp>
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	db25      	blt.n	8003cf4 <quorem+0xec>
 8003ca8:	4629      	mov	r1, r5
 8003caa:	2000      	movs	r0, #0
 8003cac:	f858 2b04 	ldr.w	r2, [r8], #4
 8003cb0:	f8d1 c000 	ldr.w	ip, [r1]
 8003cb4:	fa1f fe82 	uxth.w	lr, r2
 8003cb8:	fa1f f38c 	uxth.w	r3, ip
 8003cbc:	eba3 030e 	sub.w	r3, r3, lr
 8003cc0:	4403      	add	r3, r0
 8003cc2:	0c12      	lsrs	r2, r2, #16
 8003cc4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003cc8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003cd2:	45c1      	cmp	r9, r8
 8003cd4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003cd8:	f841 3b04 	str.w	r3, [r1], #4
 8003cdc:	d2e6      	bcs.n	8003cac <quorem+0xa4>
 8003cde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ce2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ce6:	b922      	cbnz	r2, 8003cf2 <quorem+0xea>
 8003ce8:	3b04      	subs	r3, #4
 8003cea:	429d      	cmp	r5, r3
 8003cec:	461a      	mov	r2, r3
 8003cee:	d30b      	bcc.n	8003d08 <quorem+0x100>
 8003cf0:	613c      	str	r4, [r7, #16]
 8003cf2:	3601      	adds	r6, #1
 8003cf4:	4630      	mov	r0, r6
 8003cf6:	b003      	add	sp, #12
 8003cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cfc:	6812      	ldr	r2, [r2, #0]
 8003cfe:	3b04      	subs	r3, #4
 8003d00:	2a00      	cmp	r2, #0
 8003d02:	d1cb      	bne.n	8003c9c <quorem+0x94>
 8003d04:	3c01      	subs	r4, #1
 8003d06:	e7c6      	b.n	8003c96 <quorem+0x8e>
 8003d08:	6812      	ldr	r2, [r2, #0]
 8003d0a:	3b04      	subs	r3, #4
 8003d0c:	2a00      	cmp	r2, #0
 8003d0e:	d1ef      	bne.n	8003cf0 <quorem+0xe8>
 8003d10:	3c01      	subs	r4, #1
 8003d12:	e7ea      	b.n	8003cea <quorem+0xe2>
 8003d14:	2000      	movs	r0, #0
 8003d16:	e7ee      	b.n	8003cf6 <quorem+0xee>

08003d18 <_dtoa_r>:
 8003d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d1c:	4614      	mov	r4, r2
 8003d1e:	461d      	mov	r5, r3
 8003d20:	69c7      	ldr	r7, [r0, #28]
 8003d22:	b097      	sub	sp, #92	@ 0x5c
 8003d24:	4681      	mov	r9, r0
 8003d26:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003d2a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8003d2c:	b97f      	cbnz	r7, 8003d4e <_dtoa_r+0x36>
 8003d2e:	2010      	movs	r0, #16
 8003d30:	f000 ff1e 	bl	8004b70 <malloc>
 8003d34:	4602      	mov	r2, r0
 8003d36:	f8c9 001c 	str.w	r0, [r9, #28]
 8003d3a:	b920      	cbnz	r0, 8003d46 <_dtoa_r+0x2e>
 8003d3c:	21ef      	movs	r1, #239	@ 0xef
 8003d3e:	4bac      	ldr	r3, [pc, #688]	@ (8003ff0 <_dtoa_r+0x2d8>)
 8003d40:	48ac      	ldr	r0, [pc, #688]	@ (8003ff4 <_dtoa_r+0x2dc>)
 8003d42:	f001 fcdd 	bl	8005700 <__assert_func>
 8003d46:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003d4a:	6007      	str	r7, [r0, #0]
 8003d4c:	60c7      	str	r7, [r0, #12]
 8003d4e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003d52:	6819      	ldr	r1, [r3, #0]
 8003d54:	b159      	cbz	r1, 8003d6e <_dtoa_r+0x56>
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	2301      	movs	r3, #1
 8003d5a:	4093      	lsls	r3, r2
 8003d5c:	604a      	str	r2, [r1, #4]
 8003d5e:	608b      	str	r3, [r1, #8]
 8003d60:	4648      	mov	r0, r9
 8003d62:	f001 f8a3 	bl	8004eac <_Bfree>
 8003d66:	2200      	movs	r2, #0
 8003d68:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	1e2b      	subs	r3, r5, #0
 8003d70:	bfaf      	iteee	ge
 8003d72:	2300      	movge	r3, #0
 8003d74:	2201      	movlt	r2, #1
 8003d76:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003d7a:	9307      	strlt	r3, [sp, #28]
 8003d7c:	bfa8      	it	ge
 8003d7e:	6033      	strge	r3, [r6, #0]
 8003d80:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8003d84:	4b9c      	ldr	r3, [pc, #624]	@ (8003ff8 <_dtoa_r+0x2e0>)
 8003d86:	bfb8      	it	lt
 8003d88:	6032      	strlt	r2, [r6, #0]
 8003d8a:	ea33 0308 	bics.w	r3, r3, r8
 8003d8e:	d112      	bne.n	8003db6 <_dtoa_r+0x9e>
 8003d90:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003d94:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003d9c:	4323      	orrs	r3, r4
 8003d9e:	f000 855e 	beq.w	800485e <_dtoa_r+0xb46>
 8003da2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003da4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003ffc <_dtoa_r+0x2e4>
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 8560 	beq.w	800486e <_dtoa_r+0xb56>
 8003dae:	f10a 0303 	add.w	r3, sl, #3
 8003db2:	f000 bd5a 	b.w	800486a <_dtoa_r+0xb52>
 8003db6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003dba:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003dbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f7fc fdef 	bl	80009a8 <__aeabi_dcmpeq>
 8003dca:	4607      	mov	r7, r0
 8003dcc:	b158      	cbz	r0, 8003de6 <_dtoa_r+0xce>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003dd6:	b113      	cbz	r3, 8003dde <_dtoa_r+0xc6>
 8003dd8:	4b89      	ldr	r3, [pc, #548]	@ (8004000 <_dtoa_r+0x2e8>)
 8003dda:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8004004 <_dtoa_r+0x2ec>
 8003de2:	f000 bd44 	b.w	800486e <_dtoa_r+0xb56>
 8003de6:	ab14      	add	r3, sp, #80	@ 0x50
 8003de8:	9301      	str	r3, [sp, #4]
 8003dea:	ab15      	add	r3, sp, #84	@ 0x54
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	4648      	mov	r0, r9
 8003df0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003df4:	f001 fb3c 	bl	8005470 <__d2b>
 8003df8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8003dfc:	9003      	str	r0, [sp, #12]
 8003dfe:	2e00      	cmp	r6, #0
 8003e00:	d078      	beq.n	8003ef4 <_dtoa_r+0x1dc>
 8003e02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003e06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e08:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e10:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003e14:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003e18:	9712      	str	r7, [sp, #72]	@ 0x48
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	4b7a      	ldr	r3, [pc, #488]	@ (8004008 <_dtoa_r+0x2f0>)
 8003e20:	f7fc f9a2 	bl	8000168 <__aeabi_dsub>
 8003e24:	a36c      	add	r3, pc, #432	@ (adr r3, 8003fd8 <_dtoa_r+0x2c0>)
 8003e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2a:	f7fc fb55 	bl	80004d8 <__aeabi_dmul>
 8003e2e:	a36c      	add	r3, pc, #432	@ (adr r3, 8003fe0 <_dtoa_r+0x2c8>)
 8003e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e34:	f7fc f99a 	bl	800016c <__adddf3>
 8003e38:	4604      	mov	r4, r0
 8003e3a:	4630      	mov	r0, r6
 8003e3c:	460d      	mov	r5, r1
 8003e3e:	f7fc fae1 	bl	8000404 <__aeabi_i2d>
 8003e42:	a369      	add	r3, pc, #420	@ (adr r3, 8003fe8 <_dtoa_r+0x2d0>)
 8003e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e48:	f7fc fb46 	bl	80004d8 <__aeabi_dmul>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4620      	mov	r0, r4
 8003e52:	4629      	mov	r1, r5
 8003e54:	f7fc f98a 	bl	800016c <__adddf3>
 8003e58:	4604      	mov	r4, r0
 8003e5a:	460d      	mov	r5, r1
 8003e5c:	f7fc fdec 	bl	8000a38 <__aeabi_d2iz>
 8003e60:	2200      	movs	r2, #0
 8003e62:	4607      	mov	r7, r0
 8003e64:	2300      	movs	r3, #0
 8003e66:	4620      	mov	r0, r4
 8003e68:	4629      	mov	r1, r5
 8003e6a:	f7fc fda7 	bl	80009bc <__aeabi_dcmplt>
 8003e6e:	b140      	cbz	r0, 8003e82 <_dtoa_r+0x16a>
 8003e70:	4638      	mov	r0, r7
 8003e72:	f7fc fac7 	bl	8000404 <__aeabi_i2d>
 8003e76:	4622      	mov	r2, r4
 8003e78:	462b      	mov	r3, r5
 8003e7a:	f7fc fd95 	bl	80009a8 <__aeabi_dcmpeq>
 8003e7e:	b900      	cbnz	r0, 8003e82 <_dtoa_r+0x16a>
 8003e80:	3f01      	subs	r7, #1
 8003e82:	2f16      	cmp	r7, #22
 8003e84:	d854      	bhi.n	8003f30 <_dtoa_r+0x218>
 8003e86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003e8a:	4b60      	ldr	r3, [pc, #384]	@ (800400c <_dtoa_r+0x2f4>)
 8003e8c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e94:	f7fc fd92 	bl	80009bc <__aeabi_dcmplt>
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	d04b      	beq.n	8003f34 <_dtoa_r+0x21c>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	3f01      	subs	r7, #1
 8003ea0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003ea2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003ea4:	1b9b      	subs	r3, r3, r6
 8003ea6:	1e5a      	subs	r2, r3, #1
 8003ea8:	bf49      	itett	mi
 8003eaa:	f1c3 0301 	rsbmi	r3, r3, #1
 8003eae:	2300      	movpl	r3, #0
 8003eb0:	9304      	strmi	r3, [sp, #16]
 8003eb2:	2300      	movmi	r3, #0
 8003eb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8003eb6:	bf54      	ite	pl
 8003eb8:	9304      	strpl	r3, [sp, #16]
 8003eba:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003ebc:	2f00      	cmp	r7, #0
 8003ebe:	db3b      	blt.n	8003f38 <_dtoa_r+0x220>
 8003ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ec2:	970e      	str	r7, [sp, #56]	@ 0x38
 8003ec4:	443b      	add	r3, r7
 8003ec6:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ec8:	2300      	movs	r3, #0
 8003eca:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ecc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003ece:	2b09      	cmp	r3, #9
 8003ed0:	d865      	bhi.n	8003f9e <_dtoa_r+0x286>
 8003ed2:	2b05      	cmp	r3, #5
 8003ed4:	bfc4      	itt	gt
 8003ed6:	3b04      	subgt	r3, #4
 8003ed8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003eda:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003edc:	bfc8      	it	gt
 8003ede:	2400      	movgt	r4, #0
 8003ee0:	f1a3 0302 	sub.w	r3, r3, #2
 8003ee4:	bfd8      	it	le
 8003ee6:	2401      	movle	r4, #1
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	d864      	bhi.n	8003fb6 <_dtoa_r+0x29e>
 8003eec:	e8df f003 	tbb	[pc, r3]
 8003ef0:	2c385553 	.word	0x2c385553
 8003ef4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003ef8:	441e      	add	r6, r3
 8003efa:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	bfc1      	itttt	gt
 8003f02:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003f06:	fa08 f803 	lslgt.w	r8, r8, r3
 8003f0a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003f0e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003f12:	bfd6      	itet	le
 8003f14:	f1c3 0320 	rsble	r3, r3, #32
 8003f18:	ea48 0003 	orrgt.w	r0, r8, r3
 8003f1c:	fa04 f003 	lslle.w	r0, r4, r3
 8003f20:	f7fc fa60 	bl	80003e4 <__aeabi_ui2d>
 8003f24:	2201      	movs	r2, #1
 8003f26:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003f2a:	3e01      	subs	r6, #1
 8003f2c:	9212      	str	r2, [sp, #72]	@ 0x48
 8003f2e:	e774      	b.n	8003e1a <_dtoa_r+0x102>
 8003f30:	2301      	movs	r3, #1
 8003f32:	e7b5      	b.n	8003ea0 <_dtoa_r+0x188>
 8003f34:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003f36:	e7b4      	b.n	8003ea2 <_dtoa_r+0x18a>
 8003f38:	9b04      	ldr	r3, [sp, #16]
 8003f3a:	1bdb      	subs	r3, r3, r7
 8003f3c:	9304      	str	r3, [sp, #16]
 8003f3e:	427b      	negs	r3, r7
 8003f40:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f42:	2300      	movs	r3, #0
 8003f44:	930e      	str	r3, [sp, #56]	@ 0x38
 8003f46:	e7c1      	b.n	8003ecc <_dtoa_r+0x1b4>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f4c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003f4e:	eb07 0b03 	add.w	fp, r7, r3
 8003f52:	f10b 0301 	add.w	r3, fp, #1
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	9308      	str	r3, [sp, #32]
 8003f5a:	bfb8      	it	lt
 8003f5c:	2301      	movlt	r3, #1
 8003f5e:	e006      	b.n	8003f6e <_dtoa_r+0x256>
 8003f60:	2301      	movs	r3, #1
 8003f62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f64:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	dd28      	ble.n	8003fbc <_dtoa_r+0x2a4>
 8003f6a:	469b      	mov	fp, r3
 8003f6c:	9308      	str	r3, [sp, #32]
 8003f6e:	2100      	movs	r1, #0
 8003f70:	2204      	movs	r2, #4
 8003f72:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003f76:	f102 0514 	add.w	r5, r2, #20
 8003f7a:	429d      	cmp	r5, r3
 8003f7c:	d926      	bls.n	8003fcc <_dtoa_r+0x2b4>
 8003f7e:	6041      	str	r1, [r0, #4]
 8003f80:	4648      	mov	r0, r9
 8003f82:	f000 ff53 	bl	8004e2c <_Balloc>
 8003f86:	4682      	mov	sl, r0
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	d143      	bne.n	8004014 <_dtoa_r+0x2fc>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	f240 11af 	movw	r1, #431	@ 0x1af
 8003f92:	4b1f      	ldr	r3, [pc, #124]	@ (8004010 <_dtoa_r+0x2f8>)
 8003f94:	e6d4      	b.n	8003d40 <_dtoa_r+0x28>
 8003f96:	2300      	movs	r3, #0
 8003f98:	e7e3      	b.n	8003f62 <_dtoa_r+0x24a>
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	e7d5      	b.n	8003f4a <_dtoa_r+0x232>
 8003f9e:	2401      	movs	r4, #1
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003fa4:	9320      	str	r3, [sp, #128]	@ 0x80
 8003fa6:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8003faa:	2200      	movs	r2, #0
 8003fac:	2312      	movs	r3, #18
 8003fae:	f8cd b020 	str.w	fp, [sp, #32]
 8003fb2:	9221      	str	r2, [sp, #132]	@ 0x84
 8003fb4:	e7db      	b.n	8003f6e <_dtoa_r+0x256>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003fba:	e7f4      	b.n	8003fa6 <_dtoa_r+0x28e>
 8003fbc:	f04f 0b01 	mov.w	fp, #1
 8003fc0:	465b      	mov	r3, fp
 8003fc2:	f8cd b020 	str.w	fp, [sp, #32]
 8003fc6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8003fca:	e7d0      	b.n	8003f6e <_dtoa_r+0x256>
 8003fcc:	3101      	adds	r1, #1
 8003fce:	0052      	lsls	r2, r2, #1
 8003fd0:	e7d1      	b.n	8003f76 <_dtoa_r+0x25e>
 8003fd2:	bf00      	nop
 8003fd4:	f3af 8000 	nop.w
 8003fd8:	636f4361 	.word	0x636f4361
 8003fdc:	3fd287a7 	.word	0x3fd287a7
 8003fe0:	8b60c8b3 	.word	0x8b60c8b3
 8003fe4:	3fc68a28 	.word	0x3fc68a28
 8003fe8:	509f79fb 	.word	0x509f79fb
 8003fec:	3fd34413 	.word	0x3fd34413
 8003ff0:	08005e4d 	.word	0x08005e4d
 8003ff4:	08005e64 	.word	0x08005e64
 8003ff8:	7ff00000 	.word	0x7ff00000
 8003ffc:	08005e49 	.word	0x08005e49
 8004000:	08005e1d 	.word	0x08005e1d
 8004004:	08005e1c 	.word	0x08005e1c
 8004008:	3ff80000 	.word	0x3ff80000
 800400c:	08005fb8 	.word	0x08005fb8
 8004010:	08005ebc 	.word	0x08005ebc
 8004014:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004018:	6018      	str	r0, [r3, #0]
 800401a:	9b08      	ldr	r3, [sp, #32]
 800401c:	2b0e      	cmp	r3, #14
 800401e:	f200 80a1 	bhi.w	8004164 <_dtoa_r+0x44c>
 8004022:	2c00      	cmp	r4, #0
 8004024:	f000 809e 	beq.w	8004164 <_dtoa_r+0x44c>
 8004028:	2f00      	cmp	r7, #0
 800402a:	dd33      	ble.n	8004094 <_dtoa_r+0x37c>
 800402c:	4b9c      	ldr	r3, [pc, #624]	@ (80042a0 <_dtoa_r+0x588>)
 800402e:	f007 020f 	and.w	r2, r7, #15
 8004032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004036:	05f8      	lsls	r0, r7, #23
 8004038:	e9d3 3400 	ldrd	r3, r4, [r3]
 800403c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8004040:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004044:	d516      	bpl.n	8004074 <_dtoa_r+0x35c>
 8004046:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800404a:	4b96      	ldr	r3, [pc, #600]	@ (80042a4 <_dtoa_r+0x58c>)
 800404c:	2603      	movs	r6, #3
 800404e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004052:	f7fc fb6b 	bl	800072c <__aeabi_ddiv>
 8004056:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800405a:	f004 040f 	and.w	r4, r4, #15
 800405e:	4d91      	ldr	r5, [pc, #580]	@ (80042a4 <_dtoa_r+0x58c>)
 8004060:	b954      	cbnz	r4, 8004078 <_dtoa_r+0x360>
 8004062:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004066:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800406a:	f7fc fb5f 	bl	800072c <__aeabi_ddiv>
 800406e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004072:	e028      	b.n	80040c6 <_dtoa_r+0x3ae>
 8004074:	2602      	movs	r6, #2
 8004076:	e7f2      	b.n	800405e <_dtoa_r+0x346>
 8004078:	07e1      	lsls	r1, r4, #31
 800407a:	d508      	bpl.n	800408e <_dtoa_r+0x376>
 800407c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004080:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004084:	f7fc fa28 	bl	80004d8 <__aeabi_dmul>
 8004088:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800408c:	3601      	adds	r6, #1
 800408e:	1064      	asrs	r4, r4, #1
 8004090:	3508      	adds	r5, #8
 8004092:	e7e5      	b.n	8004060 <_dtoa_r+0x348>
 8004094:	f000 80af 	beq.w	80041f6 <_dtoa_r+0x4de>
 8004098:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800409c:	427c      	negs	r4, r7
 800409e:	4b80      	ldr	r3, [pc, #512]	@ (80042a0 <_dtoa_r+0x588>)
 80040a0:	f004 020f 	and.w	r2, r4, #15
 80040a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80040a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ac:	f7fc fa14 	bl	80004d8 <__aeabi_dmul>
 80040b0:	2602      	movs	r6, #2
 80040b2:	2300      	movs	r3, #0
 80040b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80040b8:	4d7a      	ldr	r5, [pc, #488]	@ (80042a4 <_dtoa_r+0x58c>)
 80040ba:	1124      	asrs	r4, r4, #4
 80040bc:	2c00      	cmp	r4, #0
 80040be:	f040 808f 	bne.w	80041e0 <_dtoa_r+0x4c8>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1d3      	bne.n	800406e <_dtoa_r+0x356>
 80040c6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80040ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 8094 	beq.w	80041fa <_dtoa_r+0x4e2>
 80040d2:	2200      	movs	r2, #0
 80040d4:	4620      	mov	r0, r4
 80040d6:	4629      	mov	r1, r5
 80040d8:	4b73      	ldr	r3, [pc, #460]	@ (80042a8 <_dtoa_r+0x590>)
 80040da:	f7fc fc6f 	bl	80009bc <__aeabi_dcmplt>
 80040de:	2800      	cmp	r0, #0
 80040e0:	f000 808b 	beq.w	80041fa <_dtoa_r+0x4e2>
 80040e4:	9b08      	ldr	r3, [sp, #32]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 8087 	beq.w	80041fa <_dtoa_r+0x4e2>
 80040ec:	f1bb 0f00 	cmp.w	fp, #0
 80040f0:	dd34      	ble.n	800415c <_dtoa_r+0x444>
 80040f2:	4620      	mov	r0, r4
 80040f4:	2200      	movs	r2, #0
 80040f6:	4629      	mov	r1, r5
 80040f8:	4b6c      	ldr	r3, [pc, #432]	@ (80042ac <_dtoa_r+0x594>)
 80040fa:	f7fc f9ed 	bl	80004d8 <__aeabi_dmul>
 80040fe:	465c      	mov	r4, fp
 8004100:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004104:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8004108:	3601      	adds	r6, #1
 800410a:	4630      	mov	r0, r6
 800410c:	f7fc f97a 	bl	8000404 <__aeabi_i2d>
 8004110:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004114:	f7fc f9e0 	bl	80004d8 <__aeabi_dmul>
 8004118:	2200      	movs	r2, #0
 800411a:	4b65      	ldr	r3, [pc, #404]	@ (80042b0 <_dtoa_r+0x598>)
 800411c:	f7fc f826 	bl	800016c <__adddf3>
 8004120:	4605      	mov	r5, r0
 8004122:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004126:	2c00      	cmp	r4, #0
 8004128:	d16a      	bne.n	8004200 <_dtoa_r+0x4e8>
 800412a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800412e:	2200      	movs	r2, #0
 8004130:	4b60      	ldr	r3, [pc, #384]	@ (80042b4 <_dtoa_r+0x59c>)
 8004132:	f7fc f819 	bl	8000168 <__aeabi_dsub>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800413e:	462a      	mov	r2, r5
 8004140:	4633      	mov	r3, r6
 8004142:	f7fc fc59 	bl	80009f8 <__aeabi_dcmpgt>
 8004146:	2800      	cmp	r0, #0
 8004148:	f040 8298 	bne.w	800467c <_dtoa_r+0x964>
 800414c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004150:	462a      	mov	r2, r5
 8004152:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004156:	f7fc fc31 	bl	80009bc <__aeabi_dcmplt>
 800415a:	bb38      	cbnz	r0, 80041ac <_dtoa_r+0x494>
 800415c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004160:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004164:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004166:	2b00      	cmp	r3, #0
 8004168:	f2c0 8157 	blt.w	800441a <_dtoa_r+0x702>
 800416c:	2f0e      	cmp	r7, #14
 800416e:	f300 8154 	bgt.w	800441a <_dtoa_r+0x702>
 8004172:	4b4b      	ldr	r3, [pc, #300]	@ (80042a0 <_dtoa_r+0x588>)
 8004174:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004178:	e9d3 3400 	ldrd	r3, r4, [r3]
 800417c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004180:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004182:	2b00      	cmp	r3, #0
 8004184:	f280 80e5 	bge.w	8004352 <_dtoa_r+0x63a>
 8004188:	9b08      	ldr	r3, [sp, #32]
 800418a:	2b00      	cmp	r3, #0
 800418c:	f300 80e1 	bgt.w	8004352 <_dtoa_r+0x63a>
 8004190:	d10c      	bne.n	80041ac <_dtoa_r+0x494>
 8004192:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004196:	2200      	movs	r2, #0
 8004198:	4b46      	ldr	r3, [pc, #280]	@ (80042b4 <_dtoa_r+0x59c>)
 800419a:	f7fc f99d 	bl	80004d8 <__aeabi_dmul>
 800419e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041a2:	f7fc fc1f 	bl	80009e4 <__aeabi_dcmpge>
 80041a6:	2800      	cmp	r0, #0
 80041a8:	f000 8266 	beq.w	8004678 <_dtoa_r+0x960>
 80041ac:	2400      	movs	r4, #0
 80041ae:	4625      	mov	r5, r4
 80041b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80041b2:	4656      	mov	r6, sl
 80041b4:	ea6f 0803 	mvn.w	r8, r3
 80041b8:	2700      	movs	r7, #0
 80041ba:	4621      	mov	r1, r4
 80041bc:	4648      	mov	r0, r9
 80041be:	f000 fe75 	bl	8004eac <_Bfree>
 80041c2:	2d00      	cmp	r5, #0
 80041c4:	f000 80bd 	beq.w	8004342 <_dtoa_r+0x62a>
 80041c8:	b12f      	cbz	r7, 80041d6 <_dtoa_r+0x4be>
 80041ca:	42af      	cmp	r7, r5
 80041cc:	d003      	beq.n	80041d6 <_dtoa_r+0x4be>
 80041ce:	4639      	mov	r1, r7
 80041d0:	4648      	mov	r0, r9
 80041d2:	f000 fe6b 	bl	8004eac <_Bfree>
 80041d6:	4629      	mov	r1, r5
 80041d8:	4648      	mov	r0, r9
 80041da:	f000 fe67 	bl	8004eac <_Bfree>
 80041de:	e0b0      	b.n	8004342 <_dtoa_r+0x62a>
 80041e0:	07e2      	lsls	r2, r4, #31
 80041e2:	d505      	bpl.n	80041f0 <_dtoa_r+0x4d8>
 80041e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80041e8:	f7fc f976 	bl	80004d8 <__aeabi_dmul>
 80041ec:	2301      	movs	r3, #1
 80041ee:	3601      	adds	r6, #1
 80041f0:	1064      	asrs	r4, r4, #1
 80041f2:	3508      	adds	r5, #8
 80041f4:	e762      	b.n	80040bc <_dtoa_r+0x3a4>
 80041f6:	2602      	movs	r6, #2
 80041f8:	e765      	b.n	80040c6 <_dtoa_r+0x3ae>
 80041fa:	46b8      	mov	r8, r7
 80041fc:	9c08      	ldr	r4, [sp, #32]
 80041fe:	e784      	b.n	800410a <_dtoa_r+0x3f2>
 8004200:	4b27      	ldr	r3, [pc, #156]	@ (80042a0 <_dtoa_r+0x588>)
 8004202:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004204:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004208:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800420c:	4454      	add	r4, sl
 800420e:	2900      	cmp	r1, #0
 8004210:	d054      	beq.n	80042bc <_dtoa_r+0x5a4>
 8004212:	2000      	movs	r0, #0
 8004214:	4928      	ldr	r1, [pc, #160]	@ (80042b8 <_dtoa_r+0x5a0>)
 8004216:	f7fc fa89 	bl	800072c <__aeabi_ddiv>
 800421a:	4633      	mov	r3, r6
 800421c:	462a      	mov	r2, r5
 800421e:	f7fb ffa3 	bl	8000168 <__aeabi_dsub>
 8004222:	4656      	mov	r6, sl
 8004224:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004228:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800422c:	f7fc fc04 	bl	8000a38 <__aeabi_d2iz>
 8004230:	4605      	mov	r5, r0
 8004232:	f7fc f8e7 	bl	8000404 <__aeabi_i2d>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800423e:	f7fb ff93 	bl	8000168 <__aeabi_dsub>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	3530      	adds	r5, #48	@ 0x30
 8004248:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800424c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004250:	f806 5b01 	strb.w	r5, [r6], #1
 8004254:	f7fc fbb2 	bl	80009bc <__aeabi_dcmplt>
 8004258:	2800      	cmp	r0, #0
 800425a:	d172      	bne.n	8004342 <_dtoa_r+0x62a>
 800425c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004260:	2000      	movs	r0, #0
 8004262:	4911      	ldr	r1, [pc, #68]	@ (80042a8 <_dtoa_r+0x590>)
 8004264:	f7fb ff80 	bl	8000168 <__aeabi_dsub>
 8004268:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800426c:	f7fc fba6 	bl	80009bc <__aeabi_dcmplt>
 8004270:	2800      	cmp	r0, #0
 8004272:	f040 80b4 	bne.w	80043de <_dtoa_r+0x6c6>
 8004276:	42a6      	cmp	r6, r4
 8004278:	f43f af70 	beq.w	800415c <_dtoa_r+0x444>
 800427c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004280:	2200      	movs	r2, #0
 8004282:	4b0a      	ldr	r3, [pc, #40]	@ (80042ac <_dtoa_r+0x594>)
 8004284:	f7fc f928 	bl	80004d8 <__aeabi_dmul>
 8004288:	2200      	movs	r2, #0
 800428a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800428e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004292:	4b06      	ldr	r3, [pc, #24]	@ (80042ac <_dtoa_r+0x594>)
 8004294:	f7fc f920 	bl	80004d8 <__aeabi_dmul>
 8004298:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800429c:	e7c4      	b.n	8004228 <_dtoa_r+0x510>
 800429e:	bf00      	nop
 80042a0:	08005fb8 	.word	0x08005fb8
 80042a4:	08005f90 	.word	0x08005f90
 80042a8:	3ff00000 	.word	0x3ff00000
 80042ac:	40240000 	.word	0x40240000
 80042b0:	401c0000 	.word	0x401c0000
 80042b4:	40140000 	.word	0x40140000
 80042b8:	3fe00000 	.word	0x3fe00000
 80042bc:	4631      	mov	r1, r6
 80042be:	4628      	mov	r0, r5
 80042c0:	f7fc f90a 	bl	80004d8 <__aeabi_dmul>
 80042c4:	4656      	mov	r6, sl
 80042c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80042ca:	9413      	str	r4, [sp, #76]	@ 0x4c
 80042cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042d0:	f7fc fbb2 	bl	8000a38 <__aeabi_d2iz>
 80042d4:	4605      	mov	r5, r0
 80042d6:	f7fc f895 	bl	8000404 <__aeabi_i2d>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042e2:	f7fb ff41 	bl	8000168 <__aeabi_dsub>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	3530      	adds	r5, #48	@ 0x30
 80042ec:	f806 5b01 	strb.w	r5, [r6], #1
 80042f0:	42a6      	cmp	r6, r4
 80042f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	d124      	bne.n	8004346 <_dtoa_r+0x62e>
 80042fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004300:	4bae      	ldr	r3, [pc, #696]	@ (80045bc <_dtoa_r+0x8a4>)
 8004302:	f7fb ff33 	bl	800016c <__adddf3>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800430e:	f7fc fb73 	bl	80009f8 <__aeabi_dcmpgt>
 8004312:	2800      	cmp	r0, #0
 8004314:	d163      	bne.n	80043de <_dtoa_r+0x6c6>
 8004316:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800431a:	2000      	movs	r0, #0
 800431c:	49a7      	ldr	r1, [pc, #668]	@ (80045bc <_dtoa_r+0x8a4>)
 800431e:	f7fb ff23 	bl	8000168 <__aeabi_dsub>
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800432a:	f7fc fb47 	bl	80009bc <__aeabi_dcmplt>
 800432e:	2800      	cmp	r0, #0
 8004330:	f43f af14 	beq.w	800415c <_dtoa_r+0x444>
 8004334:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004336:	1e73      	subs	r3, r6, #1
 8004338:	9313      	str	r3, [sp, #76]	@ 0x4c
 800433a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800433e:	2b30      	cmp	r3, #48	@ 0x30
 8004340:	d0f8      	beq.n	8004334 <_dtoa_r+0x61c>
 8004342:	4647      	mov	r7, r8
 8004344:	e03b      	b.n	80043be <_dtoa_r+0x6a6>
 8004346:	4b9e      	ldr	r3, [pc, #632]	@ (80045c0 <_dtoa_r+0x8a8>)
 8004348:	f7fc f8c6 	bl	80004d8 <__aeabi_dmul>
 800434c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004350:	e7bc      	b.n	80042cc <_dtoa_r+0x5b4>
 8004352:	4656      	mov	r6, sl
 8004354:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800435c:	4620      	mov	r0, r4
 800435e:	4629      	mov	r1, r5
 8004360:	f7fc f9e4 	bl	800072c <__aeabi_ddiv>
 8004364:	f7fc fb68 	bl	8000a38 <__aeabi_d2iz>
 8004368:	4680      	mov	r8, r0
 800436a:	f7fc f84b 	bl	8000404 <__aeabi_i2d>
 800436e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004372:	f7fc f8b1 	bl	80004d8 <__aeabi_dmul>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	4620      	mov	r0, r4
 800437c:	4629      	mov	r1, r5
 800437e:	f7fb fef3 	bl	8000168 <__aeabi_dsub>
 8004382:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004386:	9d08      	ldr	r5, [sp, #32]
 8004388:	f806 4b01 	strb.w	r4, [r6], #1
 800438c:	eba6 040a 	sub.w	r4, r6, sl
 8004390:	42a5      	cmp	r5, r4
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	d133      	bne.n	8004400 <_dtoa_r+0x6e8>
 8004398:	f7fb fee8 	bl	800016c <__adddf3>
 800439c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043a0:	4604      	mov	r4, r0
 80043a2:	460d      	mov	r5, r1
 80043a4:	f7fc fb28 	bl	80009f8 <__aeabi_dcmpgt>
 80043a8:	b9c0      	cbnz	r0, 80043dc <_dtoa_r+0x6c4>
 80043aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043ae:	4620      	mov	r0, r4
 80043b0:	4629      	mov	r1, r5
 80043b2:	f7fc faf9 	bl	80009a8 <__aeabi_dcmpeq>
 80043b6:	b110      	cbz	r0, 80043be <_dtoa_r+0x6a6>
 80043b8:	f018 0f01 	tst.w	r8, #1
 80043bc:	d10e      	bne.n	80043dc <_dtoa_r+0x6c4>
 80043be:	4648      	mov	r0, r9
 80043c0:	9903      	ldr	r1, [sp, #12]
 80043c2:	f000 fd73 	bl	8004eac <_Bfree>
 80043c6:	2300      	movs	r3, #0
 80043c8:	7033      	strb	r3, [r6, #0]
 80043ca:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80043cc:	3701      	adds	r7, #1
 80043ce:	601f      	str	r7, [r3, #0]
 80043d0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 824b 	beq.w	800486e <_dtoa_r+0xb56>
 80043d8:	601e      	str	r6, [r3, #0]
 80043da:	e248      	b.n	800486e <_dtoa_r+0xb56>
 80043dc:	46b8      	mov	r8, r7
 80043de:	4633      	mov	r3, r6
 80043e0:	461e      	mov	r6, r3
 80043e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80043e6:	2a39      	cmp	r2, #57	@ 0x39
 80043e8:	d106      	bne.n	80043f8 <_dtoa_r+0x6e0>
 80043ea:	459a      	cmp	sl, r3
 80043ec:	d1f8      	bne.n	80043e0 <_dtoa_r+0x6c8>
 80043ee:	2230      	movs	r2, #48	@ 0x30
 80043f0:	f108 0801 	add.w	r8, r8, #1
 80043f4:	f88a 2000 	strb.w	r2, [sl]
 80043f8:	781a      	ldrb	r2, [r3, #0]
 80043fa:	3201      	adds	r2, #1
 80043fc:	701a      	strb	r2, [r3, #0]
 80043fe:	e7a0      	b.n	8004342 <_dtoa_r+0x62a>
 8004400:	2200      	movs	r2, #0
 8004402:	4b6f      	ldr	r3, [pc, #444]	@ (80045c0 <_dtoa_r+0x8a8>)
 8004404:	f7fc f868 	bl	80004d8 <__aeabi_dmul>
 8004408:	2200      	movs	r2, #0
 800440a:	2300      	movs	r3, #0
 800440c:	4604      	mov	r4, r0
 800440e:	460d      	mov	r5, r1
 8004410:	f7fc faca 	bl	80009a8 <__aeabi_dcmpeq>
 8004414:	2800      	cmp	r0, #0
 8004416:	d09f      	beq.n	8004358 <_dtoa_r+0x640>
 8004418:	e7d1      	b.n	80043be <_dtoa_r+0x6a6>
 800441a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800441c:	2a00      	cmp	r2, #0
 800441e:	f000 80ea 	beq.w	80045f6 <_dtoa_r+0x8de>
 8004422:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004424:	2a01      	cmp	r2, #1
 8004426:	f300 80cd 	bgt.w	80045c4 <_dtoa_r+0x8ac>
 800442a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800442c:	2a00      	cmp	r2, #0
 800442e:	f000 80c1 	beq.w	80045b4 <_dtoa_r+0x89c>
 8004432:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004436:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004438:	9e04      	ldr	r6, [sp, #16]
 800443a:	9a04      	ldr	r2, [sp, #16]
 800443c:	2101      	movs	r1, #1
 800443e:	441a      	add	r2, r3
 8004440:	9204      	str	r2, [sp, #16]
 8004442:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004444:	4648      	mov	r0, r9
 8004446:	441a      	add	r2, r3
 8004448:	9209      	str	r2, [sp, #36]	@ 0x24
 800444a:	f000 fde3 	bl	8005014 <__i2b>
 800444e:	4605      	mov	r5, r0
 8004450:	b166      	cbz	r6, 800446c <_dtoa_r+0x754>
 8004452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004454:	2b00      	cmp	r3, #0
 8004456:	dd09      	ble.n	800446c <_dtoa_r+0x754>
 8004458:	42b3      	cmp	r3, r6
 800445a:	bfa8      	it	ge
 800445c:	4633      	movge	r3, r6
 800445e:	9a04      	ldr	r2, [sp, #16]
 8004460:	1af6      	subs	r6, r6, r3
 8004462:	1ad2      	subs	r2, r2, r3
 8004464:	9204      	str	r2, [sp, #16]
 8004466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	9309      	str	r3, [sp, #36]	@ 0x24
 800446c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800446e:	b30b      	cbz	r3, 80044b4 <_dtoa_r+0x79c>
 8004470:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80c6 	beq.w	8004604 <_dtoa_r+0x8ec>
 8004478:	2c00      	cmp	r4, #0
 800447a:	f000 80c0 	beq.w	80045fe <_dtoa_r+0x8e6>
 800447e:	4629      	mov	r1, r5
 8004480:	4622      	mov	r2, r4
 8004482:	4648      	mov	r0, r9
 8004484:	f000 fe7e 	bl	8005184 <__pow5mult>
 8004488:	9a03      	ldr	r2, [sp, #12]
 800448a:	4601      	mov	r1, r0
 800448c:	4605      	mov	r5, r0
 800448e:	4648      	mov	r0, r9
 8004490:	f000 fdd6 	bl	8005040 <__multiply>
 8004494:	9903      	ldr	r1, [sp, #12]
 8004496:	4680      	mov	r8, r0
 8004498:	4648      	mov	r0, r9
 800449a:	f000 fd07 	bl	8004eac <_Bfree>
 800449e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80044a0:	1b1b      	subs	r3, r3, r4
 80044a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80044a4:	f000 80b1 	beq.w	800460a <_dtoa_r+0x8f2>
 80044a8:	4641      	mov	r1, r8
 80044aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80044ac:	4648      	mov	r0, r9
 80044ae:	f000 fe69 	bl	8005184 <__pow5mult>
 80044b2:	9003      	str	r0, [sp, #12]
 80044b4:	2101      	movs	r1, #1
 80044b6:	4648      	mov	r0, r9
 80044b8:	f000 fdac 	bl	8005014 <__i2b>
 80044bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80044be:	4604      	mov	r4, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 81d8 	beq.w	8004876 <_dtoa_r+0xb5e>
 80044c6:	461a      	mov	r2, r3
 80044c8:	4601      	mov	r1, r0
 80044ca:	4648      	mov	r0, r9
 80044cc:	f000 fe5a 	bl	8005184 <__pow5mult>
 80044d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80044d2:	4604      	mov	r4, r0
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	f300 809f 	bgt.w	8004618 <_dtoa_r+0x900>
 80044da:	9b06      	ldr	r3, [sp, #24]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f040 8097 	bne.w	8004610 <_dtoa_r+0x8f8>
 80044e2:	9b07      	ldr	r3, [sp, #28]
 80044e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f040 8093 	bne.w	8004614 <_dtoa_r+0x8fc>
 80044ee:	9b07      	ldr	r3, [sp, #28]
 80044f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044f4:	0d1b      	lsrs	r3, r3, #20
 80044f6:	051b      	lsls	r3, r3, #20
 80044f8:	b133      	cbz	r3, 8004508 <_dtoa_r+0x7f0>
 80044fa:	9b04      	ldr	r3, [sp, #16]
 80044fc:	3301      	adds	r3, #1
 80044fe:	9304      	str	r3, [sp, #16]
 8004500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004502:	3301      	adds	r3, #1
 8004504:	9309      	str	r3, [sp, #36]	@ 0x24
 8004506:	2301      	movs	r3, #1
 8004508:	930a      	str	r3, [sp, #40]	@ 0x28
 800450a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 81b8 	beq.w	8004882 <_dtoa_r+0xb6a>
 8004512:	6923      	ldr	r3, [r4, #16]
 8004514:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004518:	6918      	ldr	r0, [r3, #16]
 800451a:	f000 fd2f 	bl	8004f7c <__hi0bits>
 800451e:	f1c0 0020 	rsb	r0, r0, #32
 8004522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004524:	4418      	add	r0, r3
 8004526:	f010 001f 	ands.w	r0, r0, #31
 800452a:	f000 8082 	beq.w	8004632 <_dtoa_r+0x91a>
 800452e:	f1c0 0320 	rsb	r3, r0, #32
 8004532:	2b04      	cmp	r3, #4
 8004534:	dd73      	ble.n	800461e <_dtoa_r+0x906>
 8004536:	9b04      	ldr	r3, [sp, #16]
 8004538:	f1c0 001c 	rsb	r0, r0, #28
 800453c:	4403      	add	r3, r0
 800453e:	9304      	str	r3, [sp, #16]
 8004540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004542:	4406      	add	r6, r0
 8004544:	4403      	add	r3, r0
 8004546:	9309      	str	r3, [sp, #36]	@ 0x24
 8004548:	9b04      	ldr	r3, [sp, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	dd05      	ble.n	800455a <_dtoa_r+0x842>
 800454e:	461a      	mov	r2, r3
 8004550:	4648      	mov	r0, r9
 8004552:	9903      	ldr	r1, [sp, #12]
 8004554:	f000 fe70 	bl	8005238 <__lshift>
 8004558:	9003      	str	r0, [sp, #12]
 800455a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800455c:	2b00      	cmp	r3, #0
 800455e:	dd05      	ble.n	800456c <_dtoa_r+0x854>
 8004560:	4621      	mov	r1, r4
 8004562:	461a      	mov	r2, r3
 8004564:	4648      	mov	r0, r9
 8004566:	f000 fe67 	bl	8005238 <__lshift>
 800456a:	4604      	mov	r4, r0
 800456c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d061      	beq.n	8004636 <_dtoa_r+0x91e>
 8004572:	4621      	mov	r1, r4
 8004574:	9803      	ldr	r0, [sp, #12]
 8004576:	f000 fecb 	bl	8005310 <__mcmp>
 800457a:	2800      	cmp	r0, #0
 800457c:	da5b      	bge.n	8004636 <_dtoa_r+0x91e>
 800457e:	2300      	movs	r3, #0
 8004580:	220a      	movs	r2, #10
 8004582:	4648      	mov	r0, r9
 8004584:	9903      	ldr	r1, [sp, #12]
 8004586:	f000 fcb3 	bl	8004ef0 <__multadd>
 800458a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800458c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8004590:	9003      	str	r0, [sp, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 8177 	beq.w	8004886 <_dtoa_r+0xb6e>
 8004598:	4629      	mov	r1, r5
 800459a:	2300      	movs	r3, #0
 800459c:	220a      	movs	r2, #10
 800459e:	4648      	mov	r0, r9
 80045a0:	f000 fca6 	bl	8004ef0 <__multadd>
 80045a4:	f1bb 0f00 	cmp.w	fp, #0
 80045a8:	4605      	mov	r5, r0
 80045aa:	dc6f      	bgt.n	800468c <_dtoa_r+0x974>
 80045ac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	dc49      	bgt.n	8004646 <_dtoa_r+0x92e>
 80045b2:	e06b      	b.n	800468c <_dtoa_r+0x974>
 80045b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80045b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80045ba:	e73c      	b.n	8004436 <_dtoa_r+0x71e>
 80045bc:	3fe00000 	.word	0x3fe00000
 80045c0:	40240000 	.word	0x40240000
 80045c4:	9b08      	ldr	r3, [sp, #32]
 80045c6:	1e5c      	subs	r4, r3, #1
 80045c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80045ca:	42a3      	cmp	r3, r4
 80045cc:	db09      	blt.n	80045e2 <_dtoa_r+0x8ca>
 80045ce:	1b1c      	subs	r4, r3, r4
 80045d0:	9b08      	ldr	r3, [sp, #32]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f6bf af30 	bge.w	8004438 <_dtoa_r+0x720>
 80045d8:	9b04      	ldr	r3, [sp, #16]
 80045da:	9a08      	ldr	r2, [sp, #32]
 80045dc:	1a9e      	subs	r6, r3, r2
 80045de:	2300      	movs	r3, #0
 80045e0:	e72b      	b.n	800443a <_dtoa_r+0x722>
 80045e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80045e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80045e6:	1ae3      	subs	r3, r4, r3
 80045e8:	441a      	add	r2, r3
 80045ea:	940a      	str	r4, [sp, #40]	@ 0x28
 80045ec:	9e04      	ldr	r6, [sp, #16]
 80045ee:	2400      	movs	r4, #0
 80045f0:	9b08      	ldr	r3, [sp, #32]
 80045f2:	920e      	str	r2, [sp, #56]	@ 0x38
 80045f4:	e721      	b.n	800443a <_dtoa_r+0x722>
 80045f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80045f8:	9e04      	ldr	r6, [sp, #16]
 80045fa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80045fc:	e728      	b.n	8004450 <_dtoa_r+0x738>
 80045fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004602:	e751      	b.n	80044a8 <_dtoa_r+0x790>
 8004604:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004606:	9903      	ldr	r1, [sp, #12]
 8004608:	e750      	b.n	80044ac <_dtoa_r+0x794>
 800460a:	f8cd 800c 	str.w	r8, [sp, #12]
 800460e:	e751      	b.n	80044b4 <_dtoa_r+0x79c>
 8004610:	2300      	movs	r3, #0
 8004612:	e779      	b.n	8004508 <_dtoa_r+0x7f0>
 8004614:	9b06      	ldr	r3, [sp, #24]
 8004616:	e777      	b.n	8004508 <_dtoa_r+0x7f0>
 8004618:	2300      	movs	r3, #0
 800461a:	930a      	str	r3, [sp, #40]	@ 0x28
 800461c:	e779      	b.n	8004512 <_dtoa_r+0x7fa>
 800461e:	d093      	beq.n	8004548 <_dtoa_r+0x830>
 8004620:	9a04      	ldr	r2, [sp, #16]
 8004622:	331c      	adds	r3, #28
 8004624:	441a      	add	r2, r3
 8004626:	9204      	str	r2, [sp, #16]
 8004628:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800462a:	441e      	add	r6, r3
 800462c:	441a      	add	r2, r3
 800462e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004630:	e78a      	b.n	8004548 <_dtoa_r+0x830>
 8004632:	4603      	mov	r3, r0
 8004634:	e7f4      	b.n	8004620 <_dtoa_r+0x908>
 8004636:	9b08      	ldr	r3, [sp, #32]
 8004638:	46b8      	mov	r8, r7
 800463a:	2b00      	cmp	r3, #0
 800463c:	dc20      	bgt.n	8004680 <_dtoa_r+0x968>
 800463e:	469b      	mov	fp, r3
 8004640:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004642:	2b02      	cmp	r3, #2
 8004644:	dd1e      	ble.n	8004684 <_dtoa_r+0x96c>
 8004646:	f1bb 0f00 	cmp.w	fp, #0
 800464a:	f47f adb1 	bne.w	80041b0 <_dtoa_r+0x498>
 800464e:	4621      	mov	r1, r4
 8004650:	465b      	mov	r3, fp
 8004652:	2205      	movs	r2, #5
 8004654:	4648      	mov	r0, r9
 8004656:	f000 fc4b 	bl	8004ef0 <__multadd>
 800465a:	4601      	mov	r1, r0
 800465c:	4604      	mov	r4, r0
 800465e:	9803      	ldr	r0, [sp, #12]
 8004660:	f000 fe56 	bl	8005310 <__mcmp>
 8004664:	2800      	cmp	r0, #0
 8004666:	f77f ada3 	ble.w	80041b0 <_dtoa_r+0x498>
 800466a:	4656      	mov	r6, sl
 800466c:	2331      	movs	r3, #49	@ 0x31
 800466e:	f108 0801 	add.w	r8, r8, #1
 8004672:	f806 3b01 	strb.w	r3, [r6], #1
 8004676:	e59f      	b.n	80041b8 <_dtoa_r+0x4a0>
 8004678:	46b8      	mov	r8, r7
 800467a:	9c08      	ldr	r4, [sp, #32]
 800467c:	4625      	mov	r5, r4
 800467e:	e7f4      	b.n	800466a <_dtoa_r+0x952>
 8004680:	f8dd b020 	ldr.w	fp, [sp, #32]
 8004684:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 8101 	beq.w	800488e <_dtoa_r+0xb76>
 800468c:	2e00      	cmp	r6, #0
 800468e:	dd05      	ble.n	800469c <_dtoa_r+0x984>
 8004690:	4629      	mov	r1, r5
 8004692:	4632      	mov	r2, r6
 8004694:	4648      	mov	r0, r9
 8004696:	f000 fdcf 	bl	8005238 <__lshift>
 800469a:	4605      	mov	r5, r0
 800469c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d05c      	beq.n	800475c <_dtoa_r+0xa44>
 80046a2:	4648      	mov	r0, r9
 80046a4:	6869      	ldr	r1, [r5, #4]
 80046a6:	f000 fbc1 	bl	8004e2c <_Balloc>
 80046aa:	4606      	mov	r6, r0
 80046ac:	b928      	cbnz	r0, 80046ba <_dtoa_r+0x9a2>
 80046ae:	4602      	mov	r2, r0
 80046b0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80046b4:	4b80      	ldr	r3, [pc, #512]	@ (80048b8 <_dtoa_r+0xba0>)
 80046b6:	f7ff bb43 	b.w	8003d40 <_dtoa_r+0x28>
 80046ba:	692a      	ldr	r2, [r5, #16]
 80046bc:	f105 010c 	add.w	r1, r5, #12
 80046c0:	3202      	adds	r2, #2
 80046c2:	0092      	lsls	r2, r2, #2
 80046c4:	300c      	adds	r0, #12
 80046c6:	f001 f80d 	bl	80056e4 <memcpy>
 80046ca:	2201      	movs	r2, #1
 80046cc:	4631      	mov	r1, r6
 80046ce:	4648      	mov	r0, r9
 80046d0:	f000 fdb2 	bl	8005238 <__lshift>
 80046d4:	462f      	mov	r7, r5
 80046d6:	4605      	mov	r5, r0
 80046d8:	f10a 0301 	add.w	r3, sl, #1
 80046dc:	9304      	str	r3, [sp, #16]
 80046de:	eb0a 030b 	add.w	r3, sl, fp
 80046e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80046e4:	9b06      	ldr	r3, [sp, #24]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80046ec:	9b04      	ldr	r3, [sp, #16]
 80046ee:	4621      	mov	r1, r4
 80046f0:	9803      	ldr	r0, [sp, #12]
 80046f2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80046f6:	f7ff fa87 	bl	8003c08 <quorem>
 80046fa:	4603      	mov	r3, r0
 80046fc:	4639      	mov	r1, r7
 80046fe:	3330      	adds	r3, #48	@ 0x30
 8004700:	9006      	str	r0, [sp, #24]
 8004702:	9803      	ldr	r0, [sp, #12]
 8004704:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004706:	f000 fe03 	bl	8005310 <__mcmp>
 800470a:	462a      	mov	r2, r5
 800470c:	9008      	str	r0, [sp, #32]
 800470e:	4621      	mov	r1, r4
 8004710:	4648      	mov	r0, r9
 8004712:	f000 fe19 	bl	8005348 <__mdiff>
 8004716:	68c2      	ldr	r2, [r0, #12]
 8004718:	4606      	mov	r6, r0
 800471a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800471c:	bb02      	cbnz	r2, 8004760 <_dtoa_r+0xa48>
 800471e:	4601      	mov	r1, r0
 8004720:	9803      	ldr	r0, [sp, #12]
 8004722:	f000 fdf5 	bl	8005310 <__mcmp>
 8004726:	4602      	mov	r2, r0
 8004728:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800472a:	4631      	mov	r1, r6
 800472c:	4648      	mov	r0, r9
 800472e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8004732:	f000 fbbb 	bl	8004eac <_Bfree>
 8004736:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004738:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800473a:	9e04      	ldr	r6, [sp, #16]
 800473c:	ea42 0103 	orr.w	r1, r2, r3
 8004740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004742:	4319      	orrs	r1, r3
 8004744:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004746:	d10d      	bne.n	8004764 <_dtoa_r+0xa4c>
 8004748:	2b39      	cmp	r3, #57	@ 0x39
 800474a:	d027      	beq.n	800479c <_dtoa_r+0xa84>
 800474c:	9a08      	ldr	r2, [sp, #32]
 800474e:	2a00      	cmp	r2, #0
 8004750:	dd01      	ble.n	8004756 <_dtoa_r+0xa3e>
 8004752:	9b06      	ldr	r3, [sp, #24]
 8004754:	3331      	adds	r3, #49	@ 0x31
 8004756:	f88b 3000 	strb.w	r3, [fp]
 800475a:	e52e      	b.n	80041ba <_dtoa_r+0x4a2>
 800475c:	4628      	mov	r0, r5
 800475e:	e7b9      	b.n	80046d4 <_dtoa_r+0x9bc>
 8004760:	2201      	movs	r2, #1
 8004762:	e7e2      	b.n	800472a <_dtoa_r+0xa12>
 8004764:	9908      	ldr	r1, [sp, #32]
 8004766:	2900      	cmp	r1, #0
 8004768:	db04      	blt.n	8004774 <_dtoa_r+0xa5c>
 800476a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800476c:	4301      	orrs	r1, r0
 800476e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004770:	4301      	orrs	r1, r0
 8004772:	d120      	bne.n	80047b6 <_dtoa_r+0xa9e>
 8004774:	2a00      	cmp	r2, #0
 8004776:	ddee      	ble.n	8004756 <_dtoa_r+0xa3e>
 8004778:	2201      	movs	r2, #1
 800477a:	9903      	ldr	r1, [sp, #12]
 800477c:	4648      	mov	r0, r9
 800477e:	9304      	str	r3, [sp, #16]
 8004780:	f000 fd5a 	bl	8005238 <__lshift>
 8004784:	4621      	mov	r1, r4
 8004786:	9003      	str	r0, [sp, #12]
 8004788:	f000 fdc2 	bl	8005310 <__mcmp>
 800478c:	2800      	cmp	r0, #0
 800478e:	9b04      	ldr	r3, [sp, #16]
 8004790:	dc02      	bgt.n	8004798 <_dtoa_r+0xa80>
 8004792:	d1e0      	bne.n	8004756 <_dtoa_r+0xa3e>
 8004794:	07da      	lsls	r2, r3, #31
 8004796:	d5de      	bpl.n	8004756 <_dtoa_r+0xa3e>
 8004798:	2b39      	cmp	r3, #57	@ 0x39
 800479a:	d1da      	bne.n	8004752 <_dtoa_r+0xa3a>
 800479c:	2339      	movs	r3, #57	@ 0x39
 800479e:	f88b 3000 	strb.w	r3, [fp]
 80047a2:	4633      	mov	r3, r6
 80047a4:	461e      	mov	r6, r3
 80047a6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	2a39      	cmp	r2, #57	@ 0x39
 80047ae:	d04e      	beq.n	800484e <_dtoa_r+0xb36>
 80047b0:	3201      	adds	r2, #1
 80047b2:	701a      	strb	r2, [r3, #0]
 80047b4:	e501      	b.n	80041ba <_dtoa_r+0x4a2>
 80047b6:	2a00      	cmp	r2, #0
 80047b8:	dd03      	ble.n	80047c2 <_dtoa_r+0xaaa>
 80047ba:	2b39      	cmp	r3, #57	@ 0x39
 80047bc:	d0ee      	beq.n	800479c <_dtoa_r+0xa84>
 80047be:	3301      	adds	r3, #1
 80047c0:	e7c9      	b.n	8004756 <_dtoa_r+0xa3e>
 80047c2:	9a04      	ldr	r2, [sp, #16]
 80047c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80047c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80047ca:	428a      	cmp	r2, r1
 80047cc:	d028      	beq.n	8004820 <_dtoa_r+0xb08>
 80047ce:	2300      	movs	r3, #0
 80047d0:	220a      	movs	r2, #10
 80047d2:	9903      	ldr	r1, [sp, #12]
 80047d4:	4648      	mov	r0, r9
 80047d6:	f000 fb8b 	bl	8004ef0 <__multadd>
 80047da:	42af      	cmp	r7, r5
 80047dc:	9003      	str	r0, [sp, #12]
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	f04f 020a 	mov.w	r2, #10
 80047e6:	4639      	mov	r1, r7
 80047e8:	4648      	mov	r0, r9
 80047ea:	d107      	bne.n	80047fc <_dtoa_r+0xae4>
 80047ec:	f000 fb80 	bl	8004ef0 <__multadd>
 80047f0:	4607      	mov	r7, r0
 80047f2:	4605      	mov	r5, r0
 80047f4:	9b04      	ldr	r3, [sp, #16]
 80047f6:	3301      	adds	r3, #1
 80047f8:	9304      	str	r3, [sp, #16]
 80047fa:	e777      	b.n	80046ec <_dtoa_r+0x9d4>
 80047fc:	f000 fb78 	bl	8004ef0 <__multadd>
 8004800:	4629      	mov	r1, r5
 8004802:	4607      	mov	r7, r0
 8004804:	2300      	movs	r3, #0
 8004806:	220a      	movs	r2, #10
 8004808:	4648      	mov	r0, r9
 800480a:	f000 fb71 	bl	8004ef0 <__multadd>
 800480e:	4605      	mov	r5, r0
 8004810:	e7f0      	b.n	80047f4 <_dtoa_r+0xadc>
 8004812:	f1bb 0f00 	cmp.w	fp, #0
 8004816:	bfcc      	ite	gt
 8004818:	465e      	movgt	r6, fp
 800481a:	2601      	movle	r6, #1
 800481c:	2700      	movs	r7, #0
 800481e:	4456      	add	r6, sl
 8004820:	2201      	movs	r2, #1
 8004822:	9903      	ldr	r1, [sp, #12]
 8004824:	4648      	mov	r0, r9
 8004826:	9304      	str	r3, [sp, #16]
 8004828:	f000 fd06 	bl	8005238 <__lshift>
 800482c:	4621      	mov	r1, r4
 800482e:	9003      	str	r0, [sp, #12]
 8004830:	f000 fd6e 	bl	8005310 <__mcmp>
 8004834:	2800      	cmp	r0, #0
 8004836:	dcb4      	bgt.n	80047a2 <_dtoa_r+0xa8a>
 8004838:	d102      	bne.n	8004840 <_dtoa_r+0xb28>
 800483a:	9b04      	ldr	r3, [sp, #16]
 800483c:	07db      	lsls	r3, r3, #31
 800483e:	d4b0      	bmi.n	80047a2 <_dtoa_r+0xa8a>
 8004840:	4633      	mov	r3, r6
 8004842:	461e      	mov	r6, r3
 8004844:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004848:	2a30      	cmp	r2, #48	@ 0x30
 800484a:	d0fa      	beq.n	8004842 <_dtoa_r+0xb2a>
 800484c:	e4b5      	b.n	80041ba <_dtoa_r+0x4a2>
 800484e:	459a      	cmp	sl, r3
 8004850:	d1a8      	bne.n	80047a4 <_dtoa_r+0xa8c>
 8004852:	2331      	movs	r3, #49	@ 0x31
 8004854:	f108 0801 	add.w	r8, r8, #1
 8004858:	f88a 3000 	strb.w	r3, [sl]
 800485c:	e4ad      	b.n	80041ba <_dtoa_r+0x4a2>
 800485e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004860:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80048bc <_dtoa_r+0xba4>
 8004864:	b11b      	cbz	r3, 800486e <_dtoa_r+0xb56>
 8004866:	f10a 0308 	add.w	r3, sl, #8
 800486a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	4650      	mov	r0, sl
 8004870:	b017      	add	sp, #92	@ 0x5c
 8004872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004876:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004878:	2b01      	cmp	r3, #1
 800487a:	f77f ae2e 	ble.w	80044da <_dtoa_r+0x7c2>
 800487e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004880:	930a      	str	r3, [sp, #40]	@ 0x28
 8004882:	2001      	movs	r0, #1
 8004884:	e64d      	b.n	8004522 <_dtoa_r+0x80a>
 8004886:	f1bb 0f00 	cmp.w	fp, #0
 800488a:	f77f aed9 	ble.w	8004640 <_dtoa_r+0x928>
 800488e:	4656      	mov	r6, sl
 8004890:	4621      	mov	r1, r4
 8004892:	9803      	ldr	r0, [sp, #12]
 8004894:	f7ff f9b8 	bl	8003c08 <quorem>
 8004898:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800489c:	f806 3b01 	strb.w	r3, [r6], #1
 80048a0:	eba6 020a 	sub.w	r2, r6, sl
 80048a4:	4593      	cmp	fp, r2
 80048a6:	ddb4      	ble.n	8004812 <_dtoa_r+0xafa>
 80048a8:	2300      	movs	r3, #0
 80048aa:	220a      	movs	r2, #10
 80048ac:	4648      	mov	r0, r9
 80048ae:	9903      	ldr	r1, [sp, #12]
 80048b0:	f000 fb1e 	bl	8004ef0 <__multadd>
 80048b4:	9003      	str	r0, [sp, #12]
 80048b6:	e7eb      	b.n	8004890 <_dtoa_r+0xb78>
 80048b8:	08005ebc 	.word	0x08005ebc
 80048bc:	08005e40 	.word	0x08005e40

080048c0 <__ssputs_r>:
 80048c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c4:	461f      	mov	r7, r3
 80048c6:	688e      	ldr	r6, [r1, #8]
 80048c8:	4682      	mov	sl, r0
 80048ca:	42be      	cmp	r6, r7
 80048cc:	460c      	mov	r4, r1
 80048ce:	4690      	mov	r8, r2
 80048d0:	680b      	ldr	r3, [r1, #0]
 80048d2:	d82d      	bhi.n	8004930 <__ssputs_r+0x70>
 80048d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80048d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80048dc:	d026      	beq.n	800492c <__ssputs_r+0x6c>
 80048de:	6965      	ldr	r5, [r4, #20]
 80048e0:	6909      	ldr	r1, [r1, #16]
 80048e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048e6:	eba3 0901 	sub.w	r9, r3, r1
 80048ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048ee:	1c7b      	adds	r3, r7, #1
 80048f0:	444b      	add	r3, r9
 80048f2:	106d      	asrs	r5, r5, #1
 80048f4:	429d      	cmp	r5, r3
 80048f6:	bf38      	it	cc
 80048f8:	461d      	movcc	r5, r3
 80048fa:	0553      	lsls	r3, r2, #21
 80048fc:	d527      	bpl.n	800494e <__ssputs_r+0x8e>
 80048fe:	4629      	mov	r1, r5
 8004900:	f000 f960 	bl	8004bc4 <_malloc_r>
 8004904:	4606      	mov	r6, r0
 8004906:	b360      	cbz	r0, 8004962 <__ssputs_r+0xa2>
 8004908:	464a      	mov	r2, r9
 800490a:	6921      	ldr	r1, [r4, #16]
 800490c:	f000 feea 	bl	80056e4 <memcpy>
 8004910:	89a3      	ldrh	r3, [r4, #12]
 8004912:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800491a:	81a3      	strh	r3, [r4, #12]
 800491c:	6126      	str	r6, [r4, #16]
 800491e:	444e      	add	r6, r9
 8004920:	6026      	str	r6, [r4, #0]
 8004922:	463e      	mov	r6, r7
 8004924:	6165      	str	r5, [r4, #20]
 8004926:	eba5 0509 	sub.w	r5, r5, r9
 800492a:	60a5      	str	r5, [r4, #8]
 800492c:	42be      	cmp	r6, r7
 800492e:	d900      	bls.n	8004932 <__ssputs_r+0x72>
 8004930:	463e      	mov	r6, r7
 8004932:	4632      	mov	r2, r6
 8004934:	4641      	mov	r1, r8
 8004936:	6820      	ldr	r0, [r4, #0]
 8004938:	f000 fe63 	bl	8005602 <memmove>
 800493c:	2000      	movs	r0, #0
 800493e:	68a3      	ldr	r3, [r4, #8]
 8004940:	1b9b      	subs	r3, r3, r6
 8004942:	60a3      	str	r3, [r4, #8]
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	4433      	add	r3, r6
 8004948:	6023      	str	r3, [r4, #0]
 800494a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800494e:	462a      	mov	r2, r5
 8004950:	f000 fe29 	bl	80055a6 <_realloc_r>
 8004954:	4606      	mov	r6, r0
 8004956:	2800      	cmp	r0, #0
 8004958:	d1e0      	bne.n	800491c <__ssputs_r+0x5c>
 800495a:	4650      	mov	r0, sl
 800495c:	6921      	ldr	r1, [r4, #16]
 800495e:	f000 ff01 	bl	8005764 <_free_r>
 8004962:	230c      	movs	r3, #12
 8004964:	f8ca 3000 	str.w	r3, [sl]
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800496e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004972:	81a3      	strh	r3, [r4, #12]
 8004974:	e7e9      	b.n	800494a <__ssputs_r+0x8a>
	...

08004978 <_svfiprintf_r>:
 8004978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800497c:	4698      	mov	r8, r3
 800497e:	898b      	ldrh	r3, [r1, #12]
 8004980:	4607      	mov	r7, r0
 8004982:	061b      	lsls	r3, r3, #24
 8004984:	460d      	mov	r5, r1
 8004986:	4614      	mov	r4, r2
 8004988:	b09d      	sub	sp, #116	@ 0x74
 800498a:	d510      	bpl.n	80049ae <_svfiprintf_r+0x36>
 800498c:	690b      	ldr	r3, [r1, #16]
 800498e:	b973      	cbnz	r3, 80049ae <_svfiprintf_r+0x36>
 8004990:	2140      	movs	r1, #64	@ 0x40
 8004992:	f000 f917 	bl	8004bc4 <_malloc_r>
 8004996:	6028      	str	r0, [r5, #0]
 8004998:	6128      	str	r0, [r5, #16]
 800499a:	b930      	cbnz	r0, 80049aa <_svfiprintf_r+0x32>
 800499c:	230c      	movs	r3, #12
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049a4:	b01d      	add	sp, #116	@ 0x74
 80049a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049aa:	2340      	movs	r3, #64	@ 0x40
 80049ac:	616b      	str	r3, [r5, #20]
 80049ae:	2300      	movs	r3, #0
 80049b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80049b2:	2320      	movs	r3, #32
 80049b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80049b8:	2330      	movs	r3, #48	@ 0x30
 80049ba:	f04f 0901 	mov.w	r9, #1
 80049be:	f8cd 800c 	str.w	r8, [sp, #12]
 80049c2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004b5c <_svfiprintf_r+0x1e4>
 80049c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80049ca:	4623      	mov	r3, r4
 80049cc:	469a      	mov	sl, r3
 80049ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049d2:	b10a      	cbz	r2, 80049d8 <_svfiprintf_r+0x60>
 80049d4:	2a25      	cmp	r2, #37	@ 0x25
 80049d6:	d1f9      	bne.n	80049cc <_svfiprintf_r+0x54>
 80049d8:	ebba 0b04 	subs.w	fp, sl, r4
 80049dc:	d00b      	beq.n	80049f6 <_svfiprintf_r+0x7e>
 80049de:	465b      	mov	r3, fp
 80049e0:	4622      	mov	r2, r4
 80049e2:	4629      	mov	r1, r5
 80049e4:	4638      	mov	r0, r7
 80049e6:	f7ff ff6b 	bl	80048c0 <__ssputs_r>
 80049ea:	3001      	adds	r0, #1
 80049ec:	f000 80a7 	beq.w	8004b3e <_svfiprintf_r+0x1c6>
 80049f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049f2:	445a      	add	r2, fp
 80049f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80049f6:	f89a 3000 	ldrb.w	r3, [sl]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 809f 	beq.w	8004b3e <_svfiprintf_r+0x1c6>
 8004a00:	2300      	movs	r3, #0
 8004a02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a0a:	f10a 0a01 	add.w	sl, sl, #1
 8004a0e:	9304      	str	r3, [sp, #16]
 8004a10:	9307      	str	r3, [sp, #28]
 8004a12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a16:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a18:	4654      	mov	r4, sl
 8004a1a:	2205      	movs	r2, #5
 8004a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a20:	484e      	ldr	r0, [pc, #312]	@ (8004b5c <_svfiprintf_r+0x1e4>)
 8004a22:	f7ff f8e3 	bl	8003bec <memchr>
 8004a26:	9a04      	ldr	r2, [sp, #16]
 8004a28:	b9d8      	cbnz	r0, 8004a62 <_svfiprintf_r+0xea>
 8004a2a:	06d0      	lsls	r0, r2, #27
 8004a2c:	bf44      	itt	mi
 8004a2e:	2320      	movmi	r3, #32
 8004a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a34:	0711      	lsls	r1, r2, #28
 8004a36:	bf44      	itt	mi
 8004a38:	232b      	movmi	r3, #43	@ 0x2b
 8004a3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8004a42:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a44:	d015      	beq.n	8004a72 <_svfiprintf_r+0xfa>
 8004a46:	4654      	mov	r4, sl
 8004a48:	2000      	movs	r0, #0
 8004a4a:	f04f 0c0a 	mov.w	ip, #10
 8004a4e:	9a07      	ldr	r2, [sp, #28]
 8004a50:	4621      	mov	r1, r4
 8004a52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a56:	3b30      	subs	r3, #48	@ 0x30
 8004a58:	2b09      	cmp	r3, #9
 8004a5a:	d94b      	bls.n	8004af4 <_svfiprintf_r+0x17c>
 8004a5c:	b1b0      	cbz	r0, 8004a8c <_svfiprintf_r+0x114>
 8004a5e:	9207      	str	r2, [sp, #28]
 8004a60:	e014      	b.n	8004a8c <_svfiprintf_r+0x114>
 8004a62:	eba0 0308 	sub.w	r3, r0, r8
 8004a66:	fa09 f303 	lsl.w	r3, r9, r3
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	46a2      	mov	sl, r4
 8004a6e:	9304      	str	r3, [sp, #16]
 8004a70:	e7d2      	b.n	8004a18 <_svfiprintf_r+0xa0>
 8004a72:	9b03      	ldr	r3, [sp, #12]
 8004a74:	1d19      	adds	r1, r3, #4
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	9103      	str	r1, [sp, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	bfbb      	ittet	lt
 8004a7e:	425b      	neglt	r3, r3
 8004a80:	f042 0202 	orrlt.w	r2, r2, #2
 8004a84:	9307      	strge	r3, [sp, #28]
 8004a86:	9307      	strlt	r3, [sp, #28]
 8004a88:	bfb8      	it	lt
 8004a8a:	9204      	strlt	r2, [sp, #16]
 8004a8c:	7823      	ldrb	r3, [r4, #0]
 8004a8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a90:	d10a      	bne.n	8004aa8 <_svfiprintf_r+0x130>
 8004a92:	7863      	ldrb	r3, [r4, #1]
 8004a94:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a96:	d132      	bne.n	8004afe <_svfiprintf_r+0x186>
 8004a98:	9b03      	ldr	r3, [sp, #12]
 8004a9a:	3402      	adds	r4, #2
 8004a9c:	1d1a      	adds	r2, r3, #4
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	9203      	str	r2, [sp, #12]
 8004aa2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004aa6:	9305      	str	r3, [sp, #20]
 8004aa8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004b60 <_svfiprintf_r+0x1e8>
 8004aac:	2203      	movs	r2, #3
 8004aae:	4650      	mov	r0, sl
 8004ab0:	7821      	ldrb	r1, [r4, #0]
 8004ab2:	f7ff f89b 	bl	8003bec <memchr>
 8004ab6:	b138      	cbz	r0, 8004ac8 <_svfiprintf_r+0x150>
 8004ab8:	2240      	movs	r2, #64	@ 0x40
 8004aba:	9b04      	ldr	r3, [sp, #16]
 8004abc:	eba0 000a 	sub.w	r0, r0, sl
 8004ac0:	4082      	lsls	r2, r0
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	3401      	adds	r4, #1
 8004ac6:	9304      	str	r3, [sp, #16]
 8004ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004acc:	2206      	movs	r2, #6
 8004ace:	4825      	ldr	r0, [pc, #148]	@ (8004b64 <_svfiprintf_r+0x1ec>)
 8004ad0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ad4:	f7ff f88a 	bl	8003bec <memchr>
 8004ad8:	2800      	cmp	r0, #0
 8004ada:	d036      	beq.n	8004b4a <_svfiprintf_r+0x1d2>
 8004adc:	4b22      	ldr	r3, [pc, #136]	@ (8004b68 <_svfiprintf_r+0x1f0>)
 8004ade:	bb1b      	cbnz	r3, 8004b28 <_svfiprintf_r+0x1b0>
 8004ae0:	9b03      	ldr	r3, [sp, #12]
 8004ae2:	3307      	adds	r3, #7
 8004ae4:	f023 0307 	bic.w	r3, r3, #7
 8004ae8:	3308      	adds	r3, #8
 8004aea:	9303      	str	r3, [sp, #12]
 8004aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aee:	4433      	add	r3, r6
 8004af0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004af2:	e76a      	b.n	80049ca <_svfiprintf_r+0x52>
 8004af4:	460c      	mov	r4, r1
 8004af6:	2001      	movs	r0, #1
 8004af8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004afc:	e7a8      	b.n	8004a50 <_svfiprintf_r+0xd8>
 8004afe:	2300      	movs	r3, #0
 8004b00:	f04f 0c0a 	mov.w	ip, #10
 8004b04:	4619      	mov	r1, r3
 8004b06:	3401      	adds	r4, #1
 8004b08:	9305      	str	r3, [sp, #20]
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b10:	3a30      	subs	r2, #48	@ 0x30
 8004b12:	2a09      	cmp	r2, #9
 8004b14:	d903      	bls.n	8004b1e <_svfiprintf_r+0x1a6>
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0c6      	beq.n	8004aa8 <_svfiprintf_r+0x130>
 8004b1a:	9105      	str	r1, [sp, #20]
 8004b1c:	e7c4      	b.n	8004aa8 <_svfiprintf_r+0x130>
 8004b1e:	4604      	mov	r4, r0
 8004b20:	2301      	movs	r3, #1
 8004b22:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b26:	e7f0      	b.n	8004b0a <_svfiprintf_r+0x192>
 8004b28:	ab03      	add	r3, sp, #12
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	462a      	mov	r2, r5
 8004b2e:	4638      	mov	r0, r7
 8004b30:	4b0e      	ldr	r3, [pc, #56]	@ (8004b6c <_svfiprintf_r+0x1f4>)
 8004b32:	a904      	add	r1, sp, #16
 8004b34:	f7fe fb6c 	bl	8003210 <_printf_float>
 8004b38:	1c42      	adds	r2, r0, #1
 8004b3a:	4606      	mov	r6, r0
 8004b3c:	d1d6      	bne.n	8004aec <_svfiprintf_r+0x174>
 8004b3e:	89ab      	ldrh	r3, [r5, #12]
 8004b40:	065b      	lsls	r3, r3, #25
 8004b42:	f53f af2d 	bmi.w	80049a0 <_svfiprintf_r+0x28>
 8004b46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b48:	e72c      	b.n	80049a4 <_svfiprintf_r+0x2c>
 8004b4a:	ab03      	add	r3, sp, #12
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	462a      	mov	r2, r5
 8004b50:	4638      	mov	r0, r7
 8004b52:	4b06      	ldr	r3, [pc, #24]	@ (8004b6c <_svfiprintf_r+0x1f4>)
 8004b54:	a904      	add	r1, sp, #16
 8004b56:	f7fe fdf9 	bl	800374c <_printf_i>
 8004b5a:	e7ed      	b.n	8004b38 <_svfiprintf_r+0x1c0>
 8004b5c:	08005ecd 	.word	0x08005ecd
 8004b60:	08005ed3 	.word	0x08005ed3
 8004b64:	08005ed7 	.word	0x08005ed7
 8004b68:	08003211 	.word	0x08003211
 8004b6c:	080048c1 	.word	0x080048c1

08004b70 <malloc>:
 8004b70:	4b02      	ldr	r3, [pc, #8]	@ (8004b7c <malloc+0xc>)
 8004b72:	4601      	mov	r1, r0
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	f000 b825 	b.w	8004bc4 <_malloc_r>
 8004b7a:	bf00      	nop
 8004b7c:	20000018 	.word	0x20000018

08004b80 <sbrk_aligned>:
 8004b80:	b570      	push	{r4, r5, r6, lr}
 8004b82:	4e0f      	ldr	r6, [pc, #60]	@ (8004bc0 <sbrk_aligned+0x40>)
 8004b84:	460c      	mov	r4, r1
 8004b86:	6831      	ldr	r1, [r6, #0]
 8004b88:	4605      	mov	r5, r0
 8004b8a:	b911      	cbnz	r1, 8004b92 <sbrk_aligned+0x12>
 8004b8c:	f000 fd78 	bl	8005680 <_sbrk_r>
 8004b90:	6030      	str	r0, [r6, #0]
 8004b92:	4621      	mov	r1, r4
 8004b94:	4628      	mov	r0, r5
 8004b96:	f000 fd73 	bl	8005680 <_sbrk_r>
 8004b9a:	1c43      	adds	r3, r0, #1
 8004b9c:	d103      	bne.n	8004ba6 <sbrk_aligned+0x26>
 8004b9e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	bd70      	pop	{r4, r5, r6, pc}
 8004ba6:	1cc4      	adds	r4, r0, #3
 8004ba8:	f024 0403 	bic.w	r4, r4, #3
 8004bac:	42a0      	cmp	r0, r4
 8004bae:	d0f8      	beq.n	8004ba2 <sbrk_aligned+0x22>
 8004bb0:	1a21      	subs	r1, r4, r0
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f000 fd64 	bl	8005680 <_sbrk_r>
 8004bb8:	3001      	adds	r0, #1
 8004bba:	d1f2      	bne.n	8004ba2 <sbrk_aligned+0x22>
 8004bbc:	e7ef      	b.n	8004b9e <sbrk_aligned+0x1e>
 8004bbe:	bf00      	nop
 8004bc0:	2000036c 	.word	0x2000036c

08004bc4 <_malloc_r>:
 8004bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bc8:	1ccd      	adds	r5, r1, #3
 8004bca:	f025 0503 	bic.w	r5, r5, #3
 8004bce:	3508      	adds	r5, #8
 8004bd0:	2d0c      	cmp	r5, #12
 8004bd2:	bf38      	it	cc
 8004bd4:	250c      	movcc	r5, #12
 8004bd6:	2d00      	cmp	r5, #0
 8004bd8:	4606      	mov	r6, r0
 8004bda:	db01      	blt.n	8004be0 <_malloc_r+0x1c>
 8004bdc:	42a9      	cmp	r1, r5
 8004bde:	d904      	bls.n	8004bea <_malloc_r+0x26>
 8004be0:	230c      	movs	r3, #12
 8004be2:	6033      	str	r3, [r6, #0]
 8004be4:	2000      	movs	r0, #0
 8004be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004cc0 <_malloc_r+0xfc>
 8004bee:	f000 f911 	bl	8004e14 <__malloc_lock>
 8004bf2:	f8d8 3000 	ldr.w	r3, [r8]
 8004bf6:	461c      	mov	r4, r3
 8004bf8:	bb44      	cbnz	r4, 8004c4c <_malloc_r+0x88>
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	f7ff ffbf 	bl	8004b80 <sbrk_aligned>
 8004c02:	1c43      	adds	r3, r0, #1
 8004c04:	4604      	mov	r4, r0
 8004c06:	d158      	bne.n	8004cba <_malloc_r+0xf6>
 8004c08:	f8d8 4000 	ldr.w	r4, [r8]
 8004c0c:	4627      	mov	r7, r4
 8004c0e:	2f00      	cmp	r7, #0
 8004c10:	d143      	bne.n	8004c9a <_malloc_r+0xd6>
 8004c12:	2c00      	cmp	r4, #0
 8004c14:	d04b      	beq.n	8004cae <_malloc_r+0xea>
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	4639      	mov	r1, r7
 8004c1a:	4630      	mov	r0, r6
 8004c1c:	eb04 0903 	add.w	r9, r4, r3
 8004c20:	f000 fd2e 	bl	8005680 <_sbrk_r>
 8004c24:	4581      	cmp	r9, r0
 8004c26:	d142      	bne.n	8004cae <_malloc_r+0xea>
 8004c28:	6821      	ldr	r1, [r4, #0]
 8004c2a:	4630      	mov	r0, r6
 8004c2c:	1a6d      	subs	r5, r5, r1
 8004c2e:	4629      	mov	r1, r5
 8004c30:	f7ff ffa6 	bl	8004b80 <sbrk_aligned>
 8004c34:	3001      	adds	r0, #1
 8004c36:	d03a      	beq.n	8004cae <_malloc_r+0xea>
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	442b      	add	r3, r5
 8004c3c:	6023      	str	r3, [r4, #0]
 8004c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	bb62      	cbnz	r2, 8004ca0 <_malloc_r+0xdc>
 8004c46:	f8c8 7000 	str.w	r7, [r8]
 8004c4a:	e00f      	b.n	8004c6c <_malloc_r+0xa8>
 8004c4c:	6822      	ldr	r2, [r4, #0]
 8004c4e:	1b52      	subs	r2, r2, r5
 8004c50:	d420      	bmi.n	8004c94 <_malloc_r+0xd0>
 8004c52:	2a0b      	cmp	r2, #11
 8004c54:	d917      	bls.n	8004c86 <_malloc_r+0xc2>
 8004c56:	1961      	adds	r1, r4, r5
 8004c58:	42a3      	cmp	r3, r4
 8004c5a:	6025      	str	r5, [r4, #0]
 8004c5c:	bf18      	it	ne
 8004c5e:	6059      	strne	r1, [r3, #4]
 8004c60:	6863      	ldr	r3, [r4, #4]
 8004c62:	bf08      	it	eq
 8004c64:	f8c8 1000 	streq.w	r1, [r8]
 8004c68:	5162      	str	r2, [r4, r5]
 8004c6a:	604b      	str	r3, [r1, #4]
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	f000 f8d7 	bl	8004e20 <__malloc_unlock>
 8004c72:	f104 000b 	add.w	r0, r4, #11
 8004c76:	1d23      	adds	r3, r4, #4
 8004c78:	f020 0007 	bic.w	r0, r0, #7
 8004c7c:	1ac2      	subs	r2, r0, r3
 8004c7e:	bf1c      	itt	ne
 8004c80:	1a1b      	subne	r3, r3, r0
 8004c82:	50a3      	strne	r3, [r4, r2]
 8004c84:	e7af      	b.n	8004be6 <_malloc_r+0x22>
 8004c86:	6862      	ldr	r2, [r4, #4]
 8004c88:	42a3      	cmp	r3, r4
 8004c8a:	bf0c      	ite	eq
 8004c8c:	f8c8 2000 	streq.w	r2, [r8]
 8004c90:	605a      	strne	r2, [r3, #4]
 8004c92:	e7eb      	b.n	8004c6c <_malloc_r+0xa8>
 8004c94:	4623      	mov	r3, r4
 8004c96:	6864      	ldr	r4, [r4, #4]
 8004c98:	e7ae      	b.n	8004bf8 <_malloc_r+0x34>
 8004c9a:	463c      	mov	r4, r7
 8004c9c:	687f      	ldr	r7, [r7, #4]
 8004c9e:	e7b6      	b.n	8004c0e <_malloc_r+0x4a>
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	42a3      	cmp	r3, r4
 8004ca6:	d1fb      	bne.n	8004ca0 <_malloc_r+0xdc>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	6053      	str	r3, [r2, #4]
 8004cac:	e7de      	b.n	8004c6c <_malloc_r+0xa8>
 8004cae:	230c      	movs	r3, #12
 8004cb0:	4630      	mov	r0, r6
 8004cb2:	6033      	str	r3, [r6, #0]
 8004cb4:	f000 f8b4 	bl	8004e20 <__malloc_unlock>
 8004cb8:	e794      	b.n	8004be4 <_malloc_r+0x20>
 8004cba:	6005      	str	r5, [r0, #0]
 8004cbc:	e7d6      	b.n	8004c6c <_malloc_r+0xa8>
 8004cbe:	bf00      	nop
 8004cc0:	20000370 	.word	0x20000370

08004cc4 <__sflush_r>:
 8004cc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cca:	0716      	lsls	r6, r2, #28
 8004ccc:	4605      	mov	r5, r0
 8004cce:	460c      	mov	r4, r1
 8004cd0:	d454      	bmi.n	8004d7c <__sflush_r+0xb8>
 8004cd2:	684b      	ldr	r3, [r1, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	dc02      	bgt.n	8004cde <__sflush_r+0x1a>
 8004cd8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	dd48      	ble.n	8004d70 <__sflush_r+0xac>
 8004cde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ce0:	2e00      	cmp	r6, #0
 8004ce2:	d045      	beq.n	8004d70 <__sflush_r+0xac>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004cea:	682f      	ldr	r7, [r5, #0]
 8004cec:	6a21      	ldr	r1, [r4, #32]
 8004cee:	602b      	str	r3, [r5, #0]
 8004cf0:	d030      	beq.n	8004d54 <__sflush_r+0x90>
 8004cf2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004cf4:	89a3      	ldrh	r3, [r4, #12]
 8004cf6:	0759      	lsls	r1, r3, #29
 8004cf8:	d505      	bpl.n	8004d06 <__sflush_r+0x42>
 8004cfa:	6863      	ldr	r3, [r4, #4]
 8004cfc:	1ad2      	subs	r2, r2, r3
 8004cfe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004d00:	b10b      	cbz	r3, 8004d06 <__sflush_r+0x42>
 8004d02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d04:	1ad2      	subs	r2, r2, r3
 8004d06:	2300      	movs	r3, #0
 8004d08:	4628      	mov	r0, r5
 8004d0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004d0c:	6a21      	ldr	r1, [r4, #32]
 8004d0e:	47b0      	blx	r6
 8004d10:	1c43      	adds	r3, r0, #1
 8004d12:	89a3      	ldrh	r3, [r4, #12]
 8004d14:	d106      	bne.n	8004d24 <__sflush_r+0x60>
 8004d16:	6829      	ldr	r1, [r5, #0]
 8004d18:	291d      	cmp	r1, #29
 8004d1a:	d82b      	bhi.n	8004d74 <__sflush_r+0xb0>
 8004d1c:	4a28      	ldr	r2, [pc, #160]	@ (8004dc0 <__sflush_r+0xfc>)
 8004d1e:	40ca      	lsrs	r2, r1
 8004d20:	07d6      	lsls	r6, r2, #31
 8004d22:	d527      	bpl.n	8004d74 <__sflush_r+0xb0>
 8004d24:	2200      	movs	r2, #0
 8004d26:	6062      	str	r2, [r4, #4]
 8004d28:	6922      	ldr	r2, [r4, #16]
 8004d2a:	04d9      	lsls	r1, r3, #19
 8004d2c:	6022      	str	r2, [r4, #0]
 8004d2e:	d504      	bpl.n	8004d3a <__sflush_r+0x76>
 8004d30:	1c42      	adds	r2, r0, #1
 8004d32:	d101      	bne.n	8004d38 <__sflush_r+0x74>
 8004d34:	682b      	ldr	r3, [r5, #0]
 8004d36:	b903      	cbnz	r3, 8004d3a <__sflush_r+0x76>
 8004d38:	6560      	str	r0, [r4, #84]	@ 0x54
 8004d3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d3c:	602f      	str	r7, [r5, #0]
 8004d3e:	b1b9      	cbz	r1, 8004d70 <__sflush_r+0xac>
 8004d40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d44:	4299      	cmp	r1, r3
 8004d46:	d002      	beq.n	8004d4e <__sflush_r+0x8a>
 8004d48:	4628      	mov	r0, r5
 8004d4a:	f000 fd0b 	bl	8005764 <_free_r>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d52:	e00d      	b.n	8004d70 <__sflush_r+0xac>
 8004d54:	2301      	movs	r3, #1
 8004d56:	4628      	mov	r0, r5
 8004d58:	47b0      	blx	r6
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	1c50      	adds	r0, r2, #1
 8004d5e:	d1c9      	bne.n	8004cf4 <__sflush_r+0x30>
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0c6      	beq.n	8004cf4 <__sflush_r+0x30>
 8004d66:	2b1d      	cmp	r3, #29
 8004d68:	d001      	beq.n	8004d6e <__sflush_r+0xaa>
 8004d6a:	2b16      	cmp	r3, #22
 8004d6c:	d11d      	bne.n	8004daa <__sflush_r+0xe6>
 8004d6e:	602f      	str	r7, [r5, #0]
 8004d70:	2000      	movs	r0, #0
 8004d72:	e021      	b.n	8004db8 <__sflush_r+0xf4>
 8004d74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d78:	b21b      	sxth	r3, r3
 8004d7a:	e01a      	b.n	8004db2 <__sflush_r+0xee>
 8004d7c:	690f      	ldr	r7, [r1, #16]
 8004d7e:	2f00      	cmp	r7, #0
 8004d80:	d0f6      	beq.n	8004d70 <__sflush_r+0xac>
 8004d82:	0793      	lsls	r3, r2, #30
 8004d84:	bf18      	it	ne
 8004d86:	2300      	movne	r3, #0
 8004d88:	680e      	ldr	r6, [r1, #0]
 8004d8a:	bf08      	it	eq
 8004d8c:	694b      	ldreq	r3, [r1, #20]
 8004d8e:	1bf6      	subs	r6, r6, r7
 8004d90:	600f      	str	r7, [r1, #0]
 8004d92:	608b      	str	r3, [r1, #8]
 8004d94:	2e00      	cmp	r6, #0
 8004d96:	ddeb      	ble.n	8004d70 <__sflush_r+0xac>
 8004d98:	4633      	mov	r3, r6
 8004d9a:	463a      	mov	r2, r7
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	6a21      	ldr	r1, [r4, #32]
 8004da0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004da4:	47e0      	blx	ip
 8004da6:	2800      	cmp	r0, #0
 8004da8:	dc07      	bgt.n	8004dba <__sflush_r+0xf6>
 8004daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004db2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004db6:	81a3      	strh	r3, [r4, #12]
 8004db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dba:	4407      	add	r7, r0
 8004dbc:	1a36      	subs	r6, r6, r0
 8004dbe:	e7e9      	b.n	8004d94 <__sflush_r+0xd0>
 8004dc0:	20400001 	.word	0x20400001

08004dc4 <_fflush_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	690b      	ldr	r3, [r1, #16]
 8004dc8:	4605      	mov	r5, r0
 8004dca:	460c      	mov	r4, r1
 8004dcc:	b913      	cbnz	r3, 8004dd4 <_fflush_r+0x10>
 8004dce:	2500      	movs	r5, #0
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	bd38      	pop	{r3, r4, r5, pc}
 8004dd4:	b118      	cbz	r0, 8004dde <_fflush_r+0x1a>
 8004dd6:	6a03      	ldr	r3, [r0, #32]
 8004dd8:	b90b      	cbnz	r3, 8004dde <_fflush_r+0x1a>
 8004dda:	f7fe fe97 	bl	8003b0c <__sinit>
 8004dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0f3      	beq.n	8004dce <_fflush_r+0xa>
 8004de6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004de8:	07d0      	lsls	r0, r2, #31
 8004dea:	d404      	bmi.n	8004df6 <_fflush_r+0x32>
 8004dec:	0599      	lsls	r1, r3, #22
 8004dee:	d402      	bmi.n	8004df6 <_fflush_r+0x32>
 8004df0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004df2:	f7fe fef4 	bl	8003bde <__retarget_lock_acquire_recursive>
 8004df6:	4628      	mov	r0, r5
 8004df8:	4621      	mov	r1, r4
 8004dfa:	f7ff ff63 	bl	8004cc4 <__sflush_r>
 8004dfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e00:	4605      	mov	r5, r0
 8004e02:	07da      	lsls	r2, r3, #31
 8004e04:	d4e4      	bmi.n	8004dd0 <_fflush_r+0xc>
 8004e06:	89a3      	ldrh	r3, [r4, #12]
 8004e08:	059b      	lsls	r3, r3, #22
 8004e0a:	d4e1      	bmi.n	8004dd0 <_fflush_r+0xc>
 8004e0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e0e:	f7fe fee7 	bl	8003be0 <__retarget_lock_release_recursive>
 8004e12:	e7dd      	b.n	8004dd0 <_fflush_r+0xc>

08004e14 <__malloc_lock>:
 8004e14:	4801      	ldr	r0, [pc, #4]	@ (8004e1c <__malloc_lock+0x8>)
 8004e16:	f7fe bee2 	b.w	8003bde <__retarget_lock_acquire_recursive>
 8004e1a:	bf00      	nop
 8004e1c:	20000368 	.word	0x20000368

08004e20 <__malloc_unlock>:
 8004e20:	4801      	ldr	r0, [pc, #4]	@ (8004e28 <__malloc_unlock+0x8>)
 8004e22:	f7fe bedd 	b.w	8003be0 <__retarget_lock_release_recursive>
 8004e26:	bf00      	nop
 8004e28:	20000368 	.word	0x20000368

08004e2c <_Balloc>:
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	69c6      	ldr	r6, [r0, #28]
 8004e30:	4604      	mov	r4, r0
 8004e32:	460d      	mov	r5, r1
 8004e34:	b976      	cbnz	r6, 8004e54 <_Balloc+0x28>
 8004e36:	2010      	movs	r0, #16
 8004e38:	f7ff fe9a 	bl	8004b70 <malloc>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	61e0      	str	r0, [r4, #28]
 8004e40:	b920      	cbnz	r0, 8004e4c <_Balloc+0x20>
 8004e42:	216b      	movs	r1, #107	@ 0x6b
 8004e44:	4b17      	ldr	r3, [pc, #92]	@ (8004ea4 <_Balloc+0x78>)
 8004e46:	4818      	ldr	r0, [pc, #96]	@ (8004ea8 <_Balloc+0x7c>)
 8004e48:	f000 fc5a 	bl	8005700 <__assert_func>
 8004e4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e50:	6006      	str	r6, [r0, #0]
 8004e52:	60c6      	str	r6, [r0, #12]
 8004e54:	69e6      	ldr	r6, [r4, #28]
 8004e56:	68f3      	ldr	r3, [r6, #12]
 8004e58:	b183      	cbz	r3, 8004e7c <_Balloc+0x50>
 8004e5a:	69e3      	ldr	r3, [r4, #28]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004e62:	b9b8      	cbnz	r0, 8004e94 <_Balloc+0x68>
 8004e64:	2101      	movs	r1, #1
 8004e66:	fa01 f605 	lsl.w	r6, r1, r5
 8004e6a:	1d72      	adds	r2, r6, #5
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	0092      	lsls	r2, r2, #2
 8004e70:	f000 fc64 	bl	800573c <_calloc_r>
 8004e74:	b160      	cbz	r0, 8004e90 <_Balloc+0x64>
 8004e76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004e7a:	e00e      	b.n	8004e9a <_Balloc+0x6e>
 8004e7c:	2221      	movs	r2, #33	@ 0x21
 8004e7e:	2104      	movs	r1, #4
 8004e80:	4620      	mov	r0, r4
 8004e82:	f000 fc5b 	bl	800573c <_calloc_r>
 8004e86:	69e3      	ldr	r3, [r4, #28]
 8004e88:	60f0      	str	r0, [r6, #12]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e4      	bne.n	8004e5a <_Balloc+0x2e>
 8004e90:	2000      	movs	r0, #0
 8004e92:	bd70      	pop	{r4, r5, r6, pc}
 8004e94:	6802      	ldr	r2, [r0, #0]
 8004e96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ea0:	e7f7      	b.n	8004e92 <_Balloc+0x66>
 8004ea2:	bf00      	nop
 8004ea4:	08005e4d 	.word	0x08005e4d
 8004ea8:	08005ede 	.word	0x08005ede

08004eac <_Bfree>:
 8004eac:	b570      	push	{r4, r5, r6, lr}
 8004eae:	69c6      	ldr	r6, [r0, #28]
 8004eb0:	4605      	mov	r5, r0
 8004eb2:	460c      	mov	r4, r1
 8004eb4:	b976      	cbnz	r6, 8004ed4 <_Bfree+0x28>
 8004eb6:	2010      	movs	r0, #16
 8004eb8:	f7ff fe5a 	bl	8004b70 <malloc>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	61e8      	str	r0, [r5, #28]
 8004ec0:	b920      	cbnz	r0, 8004ecc <_Bfree+0x20>
 8004ec2:	218f      	movs	r1, #143	@ 0x8f
 8004ec4:	4b08      	ldr	r3, [pc, #32]	@ (8004ee8 <_Bfree+0x3c>)
 8004ec6:	4809      	ldr	r0, [pc, #36]	@ (8004eec <_Bfree+0x40>)
 8004ec8:	f000 fc1a 	bl	8005700 <__assert_func>
 8004ecc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ed0:	6006      	str	r6, [r0, #0]
 8004ed2:	60c6      	str	r6, [r0, #12]
 8004ed4:	b13c      	cbz	r4, 8004ee6 <_Bfree+0x3a>
 8004ed6:	69eb      	ldr	r3, [r5, #28]
 8004ed8:	6862      	ldr	r2, [r4, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ee0:	6021      	str	r1, [r4, #0]
 8004ee2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}
 8004ee8:	08005e4d 	.word	0x08005e4d
 8004eec:	08005ede 	.word	0x08005ede

08004ef0 <__multadd>:
 8004ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef4:	4607      	mov	r7, r0
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	461e      	mov	r6, r3
 8004efa:	2000      	movs	r0, #0
 8004efc:	690d      	ldr	r5, [r1, #16]
 8004efe:	f101 0c14 	add.w	ip, r1, #20
 8004f02:	f8dc 3000 	ldr.w	r3, [ip]
 8004f06:	3001      	adds	r0, #1
 8004f08:	b299      	uxth	r1, r3
 8004f0a:	fb02 6101 	mla	r1, r2, r1, r6
 8004f0e:	0c1e      	lsrs	r6, r3, #16
 8004f10:	0c0b      	lsrs	r3, r1, #16
 8004f12:	fb02 3306 	mla	r3, r2, r6, r3
 8004f16:	b289      	uxth	r1, r1
 8004f18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004f1c:	4285      	cmp	r5, r0
 8004f1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004f22:	f84c 1b04 	str.w	r1, [ip], #4
 8004f26:	dcec      	bgt.n	8004f02 <__multadd+0x12>
 8004f28:	b30e      	cbz	r6, 8004f6e <__multadd+0x7e>
 8004f2a:	68a3      	ldr	r3, [r4, #8]
 8004f2c:	42ab      	cmp	r3, r5
 8004f2e:	dc19      	bgt.n	8004f64 <__multadd+0x74>
 8004f30:	6861      	ldr	r1, [r4, #4]
 8004f32:	4638      	mov	r0, r7
 8004f34:	3101      	adds	r1, #1
 8004f36:	f7ff ff79 	bl	8004e2c <_Balloc>
 8004f3a:	4680      	mov	r8, r0
 8004f3c:	b928      	cbnz	r0, 8004f4a <__multadd+0x5a>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	21ba      	movs	r1, #186	@ 0xba
 8004f42:	4b0c      	ldr	r3, [pc, #48]	@ (8004f74 <__multadd+0x84>)
 8004f44:	480c      	ldr	r0, [pc, #48]	@ (8004f78 <__multadd+0x88>)
 8004f46:	f000 fbdb 	bl	8005700 <__assert_func>
 8004f4a:	6922      	ldr	r2, [r4, #16]
 8004f4c:	f104 010c 	add.w	r1, r4, #12
 8004f50:	3202      	adds	r2, #2
 8004f52:	0092      	lsls	r2, r2, #2
 8004f54:	300c      	adds	r0, #12
 8004f56:	f000 fbc5 	bl	80056e4 <memcpy>
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	4638      	mov	r0, r7
 8004f5e:	f7ff ffa5 	bl	8004eac <_Bfree>
 8004f62:	4644      	mov	r4, r8
 8004f64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004f68:	3501      	adds	r5, #1
 8004f6a:	615e      	str	r6, [r3, #20]
 8004f6c:	6125      	str	r5, [r4, #16]
 8004f6e:	4620      	mov	r0, r4
 8004f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f74:	08005ebc 	.word	0x08005ebc
 8004f78:	08005ede 	.word	0x08005ede

08004f7c <__hi0bits>:
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004f82:	bf3a      	itte	cc
 8004f84:	0403      	lslcc	r3, r0, #16
 8004f86:	2010      	movcc	r0, #16
 8004f88:	2000      	movcs	r0, #0
 8004f8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f8e:	bf3c      	itt	cc
 8004f90:	021b      	lslcc	r3, r3, #8
 8004f92:	3008      	addcc	r0, #8
 8004f94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f98:	bf3c      	itt	cc
 8004f9a:	011b      	lslcc	r3, r3, #4
 8004f9c:	3004      	addcc	r0, #4
 8004f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa2:	bf3c      	itt	cc
 8004fa4:	009b      	lslcc	r3, r3, #2
 8004fa6:	3002      	addcc	r0, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	db05      	blt.n	8004fb8 <__hi0bits+0x3c>
 8004fac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004fb0:	f100 0001 	add.w	r0, r0, #1
 8004fb4:	bf08      	it	eq
 8004fb6:	2020      	moveq	r0, #32
 8004fb8:	4770      	bx	lr

08004fba <__lo0bits>:
 8004fba:	6803      	ldr	r3, [r0, #0]
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	f013 0007 	ands.w	r0, r3, #7
 8004fc2:	d00b      	beq.n	8004fdc <__lo0bits+0x22>
 8004fc4:	07d9      	lsls	r1, r3, #31
 8004fc6:	d421      	bmi.n	800500c <__lo0bits+0x52>
 8004fc8:	0798      	lsls	r0, r3, #30
 8004fca:	bf49      	itett	mi
 8004fcc:	085b      	lsrmi	r3, r3, #1
 8004fce:	089b      	lsrpl	r3, r3, #2
 8004fd0:	2001      	movmi	r0, #1
 8004fd2:	6013      	strmi	r3, [r2, #0]
 8004fd4:	bf5c      	itt	pl
 8004fd6:	2002      	movpl	r0, #2
 8004fd8:	6013      	strpl	r3, [r2, #0]
 8004fda:	4770      	bx	lr
 8004fdc:	b299      	uxth	r1, r3
 8004fde:	b909      	cbnz	r1, 8004fe4 <__lo0bits+0x2a>
 8004fe0:	2010      	movs	r0, #16
 8004fe2:	0c1b      	lsrs	r3, r3, #16
 8004fe4:	b2d9      	uxtb	r1, r3
 8004fe6:	b909      	cbnz	r1, 8004fec <__lo0bits+0x32>
 8004fe8:	3008      	adds	r0, #8
 8004fea:	0a1b      	lsrs	r3, r3, #8
 8004fec:	0719      	lsls	r1, r3, #28
 8004fee:	bf04      	itt	eq
 8004ff0:	091b      	lsreq	r3, r3, #4
 8004ff2:	3004      	addeq	r0, #4
 8004ff4:	0799      	lsls	r1, r3, #30
 8004ff6:	bf04      	itt	eq
 8004ff8:	089b      	lsreq	r3, r3, #2
 8004ffa:	3002      	addeq	r0, #2
 8004ffc:	07d9      	lsls	r1, r3, #31
 8004ffe:	d403      	bmi.n	8005008 <__lo0bits+0x4e>
 8005000:	085b      	lsrs	r3, r3, #1
 8005002:	f100 0001 	add.w	r0, r0, #1
 8005006:	d003      	beq.n	8005010 <__lo0bits+0x56>
 8005008:	6013      	str	r3, [r2, #0]
 800500a:	4770      	bx	lr
 800500c:	2000      	movs	r0, #0
 800500e:	4770      	bx	lr
 8005010:	2020      	movs	r0, #32
 8005012:	4770      	bx	lr

08005014 <__i2b>:
 8005014:	b510      	push	{r4, lr}
 8005016:	460c      	mov	r4, r1
 8005018:	2101      	movs	r1, #1
 800501a:	f7ff ff07 	bl	8004e2c <_Balloc>
 800501e:	4602      	mov	r2, r0
 8005020:	b928      	cbnz	r0, 800502e <__i2b+0x1a>
 8005022:	f240 1145 	movw	r1, #325	@ 0x145
 8005026:	4b04      	ldr	r3, [pc, #16]	@ (8005038 <__i2b+0x24>)
 8005028:	4804      	ldr	r0, [pc, #16]	@ (800503c <__i2b+0x28>)
 800502a:	f000 fb69 	bl	8005700 <__assert_func>
 800502e:	2301      	movs	r3, #1
 8005030:	6144      	str	r4, [r0, #20]
 8005032:	6103      	str	r3, [r0, #16]
 8005034:	bd10      	pop	{r4, pc}
 8005036:	bf00      	nop
 8005038:	08005ebc 	.word	0x08005ebc
 800503c:	08005ede 	.word	0x08005ede

08005040 <__multiply>:
 8005040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005044:	4617      	mov	r7, r2
 8005046:	690a      	ldr	r2, [r1, #16]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4689      	mov	r9, r1
 800504c:	429a      	cmp	r2, r3
 800504e:	bfa2      	ittt	ge
 8005050:	463b      	movge	r3, r7
 8005052:	460f      	movge	r7, r1
 8005054:	4699      	movge	r9, r3
 8005056:	693d      	ldr	r5, [r7, #16]
 8005058:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	eb05 060a 	add.w	r6, r5, sl
 8005064:	42b3      	cmp	r3, r6
 8005066:	b085      	sub	sp, #20
 8005068:	bfb8      	it	lt
 800506a:	3101      	addlt	r1, #1
 800506c:	f7ff fede 	bl	8004e2c <_Balloc>
 8005070:	b930      	cbnz	r0, 8005080 <__multiply+0x40>
 8005072:	4602      	mov	r2, r0
 8005074:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005078:	4b40      	ldr	r3, [pc, #256]	@ (800517c <__multiply+0x13c>)
 800507a:	4841      	ldr	r0, [pc, #260]	@ (8005180 <__multiply+0x140>)
 800507c:	f000 fb40 	bl	8005700 <__assert_func>
 8005080:	f100 0414 	add.w	r4, r0, #20
 8005084:	4623      	mov	r3, r4
 8005086:	2200      	movs	r2, #0
 8005088:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800508c:	4573      	cmp	r3, lr
 800508e:	d320      	bcc.n	80050d2 <__multiply+0x92>
 8005090:	f107 0814 	add.w	r8, r7, #20
 8005094:	f109 0114 	add.w	r1, r9, #20
 8005098:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800509c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80050a0:	9302      	str	r3, [sp, #8]
 80050a2:	1beb      	subs	r3, r5, r7
 80050a4:	3b15      	subs	r3, #21
 80050a6:	f023 0303 	bic.w	r3, r3, #3
 80050aa:	3304      	adds	r3, #4
 80050ac:	3715      	adds	r7, #21
 80050ae:	42bd      	cmp	r5, r7
 80050b0:	bf38      	it	cc
 80050b2:	2304      	movcc	r3, #4
 80050b4:	9301      	str	r3, [sp, #4]
 80050b6:	9b02      	ldr	r3, [sp, #8]
 80050b8:	9103      	str	r1, [sp, #12]
 80050ba:	428b      	cmp	r3, r1
 80050bc:	d80c      	bhi.n	80050d8 <__multiply+0x98>
 80050be:	2e00      	cmp	r6, #0
 80050c0:	dd03      	ble.n	80050ca <__multiply+0x8a>
 80050c2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d055      	beq.n	8005176 <__multiply+0x136>
 80050ca:	6106      	str	r6, [r0, #16]
 80050cc:	b005      	add	sp, #20
 80050ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050d2:	f843 2b04 	str.w	r2, [r3], #4
 80050d6:	e7d9      	b.n	800508c <__multiply+0x4c>
 80050d8:	f8b1 a000 	ldrh.w	sl, [r1]
 80050dc:	f1ba 0f00 	cmp.w	sl, #0
 80050e0:	d01f      	beq.n	8005122 <__multiply+0xe2>
 80050e2:	46c4      	mov	ip, r8
 80050e4:	46a1      	mov	r9, r4
 80050e6:	2700      	movs	r7, #0
 80050e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80050ec:	f8d9 3000 	ldr.w	r3, [r9]
 80050f0:	fa1f fb82 	uxth.w	fp, r2
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	fb0a 330b 	mla	r3, sl, fp, r3
 80050fa:	443b      	add	r3, r7
 80050fc:	f8d9 7000 	ldr.w	r7, [r9]
 8005100:	0c12      	lsrs	r2, r2, #16
 8005102:	0c3f      	lsrs	r7, r7, #16
 8005104:	fb0a 7202 	mla	r2, sl, r2, r7
 8005108:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800510c:	b29b      	uxth	r3, r3
 800510e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005112:	4565      	cmp	r5, ip
 8005114:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005118:	f849 3b04 	str.w	r3, [r9], #4
 800511c:	d8e4      	bhi.n	80050e8 <__multiply+0xa8>
 800511e:	9b01      	ldr	r3, [sp, #4]
 8005120:	50e7      	str	r7, [r4, r3]
 8005122:	9b03      	ldr	r3, [sp, #12]
 8005124:	3104      	adds	r1, #4
 8005126:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800512a:	f1b9 0f00 	cmp.w	r9, #0
 800512e:	d020      	beq.n	8005172 <__multiply+0x132>
 8005130:	4647      	mov	r7, r8
 8005132:	46a4      	mov	ip, r4
 8005134:	f04f 0a00 	mov.w	sl, #0
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	f8b7 b000 	ldrh.w	fp, [r7]
 800513e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005142:	b29b      	uxth	r3, r3
 8005144:	fb09 220b 	mla	r2, r9, fp, r2
 8005148:	4452      	add	r2, sl
 800514a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800514e:	f84c 3b04 	str.w	r3, [ip], #4
 8005152:	f857 3b04 	ldr.w	r3, [r7], #4
 8005156:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800515a:	f8bc 3000 	ldrh.w	r3, [ip]
 800515e:	42bd      	cmp	r5, r7
 8005160:	fb09 330a 	mla	r3, r9, sl, r3
 8005164:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005168:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800516c:	d8e5      	bhi.n	800513a <__multiply+0xfa>
 800516e:	9a01      	ldr	r2, [sp, #4]
 8005170:	50a3      	str	r3, [r4, r2]
 8005172:	3404      	adds	r4, #4
 8005174:	e79f      	b.n	80050b6 <__multiply+0x76>
 8005176:	3e01      	subs	r6, #1
 8005178:	e7a1      	b.n	80050be <__multiply+0x7e>
 800517a:	bf00      	nop
 800517c:	08005ebc 	.word	0x08005ebc
 8005180:	08005ede 	.word	0x08005ede

08005184 <__pow5mult>:
 8005184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005188:	4615      	mov	r5, r2
 800518a:	f012 0203 	ands.w	r2, r2, #3
 800518e:	4607      	mov	r7, r0
 8005190:	460e      	mov	r6, r1
 8005192:	d007      	beq.n	80051a4 <__pow5mult+0x20>
 8005194:	4c25      	ldr	r4, [pc, #148]	@ (800522c <__pow5mult+0xa8>)
 8005196:	3a01      	subs	r2, #1
 8005198:	2300      	movs	r3, #0
 800519a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800519e:	f7ff fea7 	bl	8004ef0 <__multadd>
 80051a2:	4606      	mov	r6, r0
 80051a4:	10ad      	asrs	r5, r5, #2
 80051a6:	d03d      	beq.n	8005224 <__pow5mult+0xa0>
 80051a8:	69fc      	ldr	r4, [r7, #28]
 80051aa:	b97c      	cbnz	r4, 80051cc <__pow5mult+0x48>
 80051ac:	2010      	movs	r0, #16
 80051ae:	f7ff fcdf 	bl	8004b70 <malloc>
 80051b2:	4602      	mov	r2, r0
 80051b4:	61f8      	str	r0, [r7, #28]
 80051b6:	b928      	cbnz	r0, 80051c4 <__pow5mult+0x40>
 80051b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80051bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005230 <__pow5mult+0xac>)
 80051be:	481d      	ldr	r0, [pc, #116]	@ (8005234 <__pow5mult+0xb0>)
 80051c0:	f000 fa9e 	bl	8005700 <__assert_func>
 80051c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80051c8:	6004      	str	r4, [r0, #0]
 80051ca:	60c4      	str	r4, [r0, #12]
 80051cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80051d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80051d4:	b94c      	cbnz	r4, 80051ea <__pow5mult+0x66>
 80051d6:	f240 2171 	movw	r1, #625	@ 0x271
 80051da:	4638      	mov	r0, r7
 80051dc:	f7ff ff1a 	bl	8005014 <__i2b>
 80051e0:	2300      	movs	r3, #0
 80051e2:	4604      	mov	r4, r0
 80051e4:	f8c8 0008 	str.w	r0, [r8, #8]
 80051e8:	6003      	str	r3, [r0, #0]
 80051ea:	f04f 0900 	mov.w	r9, #0
 80051ee:	07eb      	lsls	r3, r5, #31
 80051f0:	d50a      	bpl.n	8005208 <__pow5mult+0x84>
 80051f2:	4631      	mov	r1, r6
 80051f4:	4622      	mov	r2, r4
 80051f6:	4638      	mov	r0, r7
 80051f8:	f7ff ff22 	bl	8005040 <__multiply>
 80051fc:	4680      	mov	r8, r0
 80051fe:	4631      	mov	r1, r6
 8005200:	4638      	mov	r0, r7
 8005202:	f7ff fe53 	bl	8004eac <_Bfree>
 8005206:	4646      	mov	r6, r8
 8005208:	106d      	asrs	r5, r5, #1
 800520a:	d00b      	beq.n	8005224 <__pow5mult+0xa0>
 800520c:	6820      	ldr	r0, [r4, #0]
 800520e:	b938      	cbnz	r0, 8005220 <__pow5mult+0x9c>
 8005210:	4622      	mov	r2, r4
 8005212:	4621      	mov	r1, r4
 8005214:	4638      	mov	r0, r7
 8005216:	f7ff ff13 	bl	8005040 <__multiply>
 800521a:	6020      	str	r0, [r4, #0]
 800521c:	f8c0 9000 	str.w	r9, [r0]
 8005220:	4604      	mov	r4, r0
 8005222:	e7e4      	b.n	80051ee <__pow5mult+0x6a>
 8005224:	4630      	mov	r0, r6
 8005226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800522a:	bf00      	nop
 800522c:	08005f80 	.word	0x08005f80
 8005230:	08005e4d 	.word	0x08005e4d
 8005234:	08005ede 	.word	0x08005ede

08005238 <__lshift>:
 8005238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800523c:	460c      	mov	r4, r1
 800523e:	4607      	mov	r7, r0
 8005240:	4691      	mov	r9, r2
 8005242:	6923      	ldr	r3, [r4, #16]
 8005244:	6849      	ldr	r1, [r1, #4]
 8005246:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800524a:	68a3      	ldr	r3, [r4, #8]
 800524c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005250:	f108 0601 	add.w	r6, r8, #1
 8005254:	42b3      	cmp	r3, r6
 8005256:	db0b      	blt.n	8005270 <__lshift+0x38>
 8005258:	4638      	mov	r0, r7
 800525a:	f7ff fde7 	bl	8004e2c <_Balloc>
 800525e:	4605      	mov	r5, r0
 8005260:	b948      	cbnz	r0, 8005276 <__lshift+0x3e>
 8005262:	4602      	mov	r2, r0
 8005264:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005268:	4b27      	ldr	r3, [pc, #156]	@ (8005308 <__lshift+0xd0>)
 800526a:	4828      	ldr	r0, [pc, #160]	@ (800530c <__lshift+0xd4>)
 800526c:	f000 fa48 	bl	8005700 <__assert_func>
 8005270:	3101      	adds	r1, #1
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	e7ee      	b.n	8005254 <__lshift+0x1c>
 8005276:	2300      	movs	r3, #0
 8005278:	f100 0114 	add.w	r1, r0, #20
 800527c:	f100 0210 	add.w	r2, r0, #16
 8005280:	4618      	mov	r0, r3
 8005282:	4553      	cmp	r3, sl
 8005284:	db33      	blt.n	80052ee <__lshift+0xb6>
 8005286:	6920      	ldr	r0, [r4, #16]
 8005288:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800528c:	f104 0314 	add.w	r3, r4, #20
 8005290:	f019 091f 	ands.w	r9, r9, #31
 8005294:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005298:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800529c:	d02b      	beq.n	80052f6 <__lshift+0xbe>
 800529e:	468a      	mov	sl, r1
 80052a0:	2200      	movs	r2, #0
 80052a2:	f1c9 0e20 	rsb	lr, r9, #32
 80052a6:	6818      	ldr	r0, [r3, #0]
 80052a8:	fa00 f009 	lsl.w	r0, r0, r9
 80052ac:	4310      	orrs	r0, r2
 80052ae:	f84a 0b04 	str.w	r0, [sl], #4
 80052b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80052b6:	459c      	cmp	ip, r3
 80052b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80052bc:	d8f3      	bhi.n	80052a6 <__lshift+0x6e>
 80052be:	ebac 0304 	sub.w	r3, ip, r4
 80052c2:	3b15      	subs	r3, #21
 80052c4:	f023 0303 	bic.w	r3, r3, #3
 80052c8:	3304      	adds	r3, #4
 80052ca:	f104 0015 	add.w	r0, r4, #21
 80052ce:	4560      	cmp	r0, ip
 80052d0:	bf88      	it	hi
 80052d2:	2304      	movhi	r3, #4
 80052d4:	50ca      	str	r2, [r1, r3]
 80052d6:	b10a      	cbz	r2, 80052dc <__lshift+0xa4>
 80052d8:	f108 0602 	add.w	r6, r8, #2
 80052dc:	3e01      	subs	r6, #1
 80052de:	4638      	mov	r0, r7
 80052e0:	4621      	mov	r1, r4
 80052e2:	612e      	str	r6, [r5, #16]
 80052e4:	f7ff fde2 	bl	8004eac <_Bfree>
 80052e8:	4628      	mov	r0, r5
 80052ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80052f2:	3301      	adds	r3, #1
 80052f4:	e7c5      	b.n	8005282 <__lshift+0x4a>
 80052f6:	3904      	subs	r1, #4
 80052f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80052fc:	459c      	cmp	ip, r3
 80052fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8005302:	d8f9      	bhi.n	80052f8 <__lshift+0xc0>
 8005304:	e7ea      	b.n	80052dc <__lshift+0xa4>
 8005306:	bf00      	nop
 8005308:	08005ebc 	.word	0x08005ebc
 800530c:	08005ede 	.word	0x08005ede

08005310 <__mcmp>:
 8005310:	4603      	mov	r3, r0
 8005312:	690a      	ldr	r2, [r1, #16]
 8005314:	6900      	ldr	r0, [r0, #16]
 8005316:	b530      	push	{r4, r5, lr}
 8005318:	1a80      	subs	r0, r0, r2
 800531a:	d10e      	bne.n	800533a <__mcmp+0x2a>
 800531c:	3314      	adds	r3, #20
 800531e:	3114      	adds	r1, #20
 8005320:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005324:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005328:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800532c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005330:	4295      	cmp	r5, r2
 8005332:	d003      	beq.n	800533c <__mcmp+0x2c>
 8005334:	d205      	bcs.n	8005342 <__mcmp+0x32>
 8005336:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800533a:	bd30      	pop	{r4, r5, pc}
 800533c:	42a3      	cmp	r3, r4
 800533e:	d3f3      	bcc.n	8005328 <__mcmp+0x18>
 8005340:	e7fb      	b.n	800533a <__mcmp+0x2a>
 8005342:	2001      	movs	r0, #1
 8005344:	e7f9      	b.n	800533a <__mcmp+0x2a>
	...

08005348 <__mdiff>:
 8005348:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534c:	4689      	mov	r9, r1
 800534e:	4606      	mov	r6, r0
 8005350:	4611      	mov	r1, r2
 8005352:	4648      	mov	r0, r9
 8005354:	4614      	mov	r4, r2
 8005356:	f7ff ffdb 	bl	8005310 <__mcmp>
 800535a:	1e05      	subs	r5, r0, #0
 800535c:	d112      	bne.n	8005384 <__mdiff+0x3c>
 800535e:	4629      	mov	r1, r5
 8005360:	4630      	mov	r0, r6
 8005362:	f7ff fd63 	bl	8004e2c <_Balloc>
 8005366:	4602      	mov	r2, r0
 8005368:	b928      	cbnz	r0, 8005376 <__mdiff+0x2e>
 800536a:	f240 2137 	movw	r1, #567	@ 0x237
 800536e:	4b3e      	ldr	r3, [pc, #248]	@ (8005468 <__mdiff+0x120>)
 8005370:	483e      	ldr	r0, [pc, #248]	@ (800546c <__mdiff+0x124>)
 8005372:	f000 f9c5 	bl	8005700 <__assert_func>
 8005376:	2301      	movs	r3, #1
 8005378:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800537c:	4610      	mov	r0, r2
 800537e:	b003      	add	sp, #12
 8005380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005384:	bfbc      	itt	lt
 8005386:	464b      	movlt	r3, r9
 8005388:	46a1      	movlt	r9, r4
 800538a:	4630      	mov	r0, r6
 800538c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005390:	bfba      	itte	lt
 8005392:	461c      	movlt	r4, r3
 8005394:	2501      	movlt	r5, #1
 8005396:	2500      	movge	r5, #0
 8005398:	f7ff fd48 	bl	8004e2c <_Balloc>
 800539c:	4602      	mov	r2, r0
 800539e:	b918      	cbnz	r0, 80053a8 <__mdiff+0x60>
 80053a0:	f240 2145 	movw	r1, #581	@ 0x245
 80053a4:	4b30      	ldr	r3, [pc, #192]	@ (8005468 <__mdiff+0x120>)
 80053a6:	e7e3      	b.n	8005370 <__mdiff+0x28>
 80053a8:	f100 0b14 	add.w	fp, r0, #20
 80053ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80053b0:	f109 0310 	add.w	r3, r9, #16
 80053b4:	60c5      	str	r5, [r0, #12]
 80053b6:	f04f 0c00 	mov.w	ip, #0
 80053ba:	f109 0514 	add.w	r5, r9, #20
 80053be:	46d9      	mov	r9, fp
 80053c0:	6926      	ldr	r6, [r4, #16]
 80053c2:	f104 0e14 	add.w	lr, r4, #20
 80053c6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80053ca:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80053ce:	9301      	str	r3, [sp, #4]
 80053d0:	9b01      	ldr	r3, [sp, #4]
 80053d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80053d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80053da:	b281      	uxth	r1, r0
 80053dc:	9301      	str	r3, [sp, #4]
 80053de:	fa1f f38a 	uxth.w	r3, sl
 80053e2:	1a5b      	subs	r3, r3, r1
 80053e4:	0c00      	lsrs	r0, r0, #16
 80053e6:	4463      	add	r3, ip
 80053e8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80053ec:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80053f6:	4576      	cmp	r6, lr
 80053f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80053fc:	f849 3b04 	str.w	r3, [r9], #4
 8005400:	d8e6      	bhi.n	80053d0 <__mdiff+0x88>
 8005402:	1b33      	subs	r3, r6, r4
 8005404:	3b15      	subs	r3, #21
 8005406:	f023 0303 	bic.w	r3, r3, #3
 800540a:	3415      	adds	r4, #21
 800540c:	3304      	adds	r3, #4
 800540e:	42a6      	cmp	r6, r4
 8005410:	bf38      	it	cc
 8005412:	2304      	movcc	r3, #4
 8005414:	441d      	add	r5, r3
 8005416:	445b      	add	r3, fp
 8005418:	461e      	mov	r6, r3
 800541a:	462c      	mov	r4, r5
 800541c:	4544      	cmp	r4, r8
 800541e:	d30e      	bcc.n	800543e <__mdiff+0xf6>
 8005420:	f108 0103 	add.w	r1, r8, #3
 8005424:	1b49      	subs	r1, r1, r5
 8005426:	f021 0103 	bic.w	r1, r1, #3
 800542a:	3d03      	subs	r5, #3
 800542c:	45a8      	cmp	r8, r5
 800542e:	bf38      	it	cc
 8005430:	2100      	movcc	r1, #0
 8005432:	440b      	add	r3, r1
 8005434:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005438:	b199      	cbz	r1, 8005462 <__mdiff+0x11a>
 800543a:	6117      	str	r7, [r2, #16]
 800543c:	e79e      	b.n	800537c <__mdiff+0x34>
 800543e:	46e6      	mov	lr, ip
 8005440:	f854 1b04 	ldr.w	r1, [r4], #4
 8005444:	fa1f fc81 	uxth.w	ip, r1
 8005448:	44f4      	add	ip, lr
 800544a:	0c08      	lsrs	r0, r1, #16
 800544c:	4471      	add	r1, lr
 800544e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005452:	b289      	uxth	r1, r1
 8005454:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005458:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800545c:	f846 1b04 	str.w	r1, [r6], #4
 8005460:	e7dc      	b.n	800541c <__mdiff+0xd4>
 8005462:	3f01      	subs	r7, #1
 8005464:	e7e6      	b.n	8005434 <__mdiff+0xec>
 8005466:	bf00      	nop
 8005468:	08005ebc 	.word	0x08005ebc
 800546c:	08005ede 	.word	0x08005ede

08005470 <__d2b>:
 8005470:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005474:	2101      	movs	r1, #1
 8005476:	4690      	mov	r8, r2
 8005478:	4699      	mov	r9, r3
 800547a:	9e08      	ldr	r6, [sp, #32]
 800547c:	f7ff fcd6 	bl	8004e2c <_Balloc>
 8005480:	4604      	mov	r4, r0
 8005482:	b930      	cbnz	r0, 8005492 <__d2b+0x22>
 8005484:	4602      	mov	r2, r0
 8005486:	f240 310f 	movw	r1, #783	@ 0x30f
 800548a:	4b23      	ldr	r3, [pc, #140]	@ (8005518 <__d2b+0xa8>)
 800548c:	4823      	ldr	r0, [pc, #140]	@ (800551c <__d2b+0xac>)
 800548e:	f000 f937 	bl	8005700 <__assert_func>
 8005492:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005496:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800549a:	b10d      	cbz	r5, 80054a0 <__d2b+0x30>
 800549c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	f1b8 0300 	subs.w	r3, r8, #0
 80054a6:	d024      	beq.n	80054f2 <__d2b+0x82>
 80054a8:	4668      	mov	r0, sp
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	f7ff fd85 	bl	8004fba <__lo0bits>
 80054b0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80054b4:	b1d8      	cbz	r0, 80054ee <__d2b+0x7e>
 80054b6:	f1c0 0320 	rsb	r3, r0, #32
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	430b      	orrs	r3, r1
 80054c0:	40c2      	lsrs	r2, r0
 80054c2:	6163      	str	r3, [r4, #20]
 80054c4:	9201      	str	r2, [sp, #4]
 80054c6:	9b01      	ldr	r3, [sp, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	bf0c      	ite	eq
 80054cc:	2201      	moveq	r2, #1
 80054ce:	2202      	movne	r2, #2
 80054d0:	61a3      	str	r3, [r4, #24]
 80054d2:	6122      	str	r2, [r4, #16]
 80054d4:	b1ad      	cbz	r5, 8005502 <__d2b+0x92>
 80054d6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80054da:	4405      	add	r5, r0
 80054dc:	6035      	str	r5, [r6, #0]
 80054de:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80054e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054e4:	6018      	str	r0, [r3, #0]
 80054e6:	4620      	mov	r0, r4
 80054e8:	b002      	add	sp, #8
 80054ea:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80054ee:	6161      	str	r1, [r4, #20]
 80054f0:	e7e9      	b.n	80054c6 <__d2b+0x56>
 80054f2:	a801      	add	r0, sp, #4
 80054f4:	f7ff fd61 	bl	8004fba <__lo0bits>
 80054f8:	9b01      	ldr	r3, [sp, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	6163      	str	r3, [r4, #20]
 80054fe:	3020      	adds	r0, #32
 8005500:	e7e7      	b.n	80054d2 <__d2b+0x62>
 8005502:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005506:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800550a:	6030      	str	r0, [r6, #0]
 800550c:	6918      	ldr	r0, [r3, #16]
 800550e:	f7ff fd35 	bl	8004f7c <__hi0bits>
 8005512:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005516:	e7e4      	b.n	80054e2 <__d2b+0x72>
 8005518:	08005ebc 	.word	0x08005ebc
 800551c:	08005ede 	.word	0x08005ede

08005520 <__sread>:
 8005520:	b510      	push	{r4, lr}
 8005522:	460c      	mov	r4, r1
 8005524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005528:	f000 f898 	bl	800565c <_read_r>
 800552c:	2800      	cmp	r0, #0
 800552e:	bfab      	itete	ge
 8005530:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005532:	89a3      	ldrhlt	r3, [r4, #12]
 8005534:	181b      	addge	r3, r3, r0
 8005536:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800553a:	bfac      	ite	ge
 800553c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800553e:	81a3      	strhlt	r3, [r4, #12]
 8005540:	bd10      	pop	{r4, pc}

08005542 <__swrite>:
 8005542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005546:	461f      	mov	r7, r3
 8005548:	898b      	ldrh	r3, [r1, #12]
 800554a:	4605      	mov	r5, r0
 800554c:	05db      	lsls	r3, r3, #23
 800554e:	460c      	mov	r4, r1
 8005550:	4616      	mov	r6, r2
 8005552:	d505      	bpl.n	8005560 <__swrite+0x1e>
 8005554:	2302      	movs	r3, #2
 8005556:	2200      	movs	r2, #0
 8005558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800555c:	f000 f86c 	bl	8005638 <_lseek_r>
 8005560:	89a3      	ldrh	r3, [r4, #12]
 8005562:	4632      	mov	r2, r6
 8005564:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005568:	81a3      	strh	r3, [r4, #12]
 800556a:	4628      	mov	r0, r5
 800556c:	463b      	mov	r3, r7
 800556e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005576:	f000 b893 	b.w	80056a0 <_write_r>

0800557a <__sseek>:
 800557a:	b510      	push	{r4, lr}
 800557c:	460c      	mov	r4, r1
 800557e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005582:	f000 f859 	bl	8005638 <_lseek_r>
 8005586:	1c43      	adds	r3, r0, #1
 8005588:	89a3      	ldrh	r3, [r4, #12]
 800558a:	bf15      	itete	ne
 800558c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800558e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005592:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005596:	81a3      	strheq	r3, [r4, #12]
 8005598:	bf18      	it	ne
 800559a:	81a3      	strhne	r3, [r4, #12]
 800559c:	bd10      	pop	{r4, pc}

0800559e <__sclose>:
 800559e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a2:	f000 b88f 	b.w	80056c4 <_close_r>

080055a6 <_realloc_r>:
 80055a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055aa:	4607      	mov	r7, r0
 80055ac:	4614      	mov	r4, r2
 80055ae:	460d      	mov	r5, r1
 80055b0:	b921      	cbnz	r1, 80055bc <_realloc_r+0x16>
 80055b2:	4611      	mov	r1, r2
 80055b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055b8:	f7ff bb04 	b.w	8004bc4 <_malloc_r>
 80055bc:	b92a      	cbnz	r2, 80055ca <_realloc_r+0x24>
 80055be:	f000 f8d1 	bl	8005764 <_free_r>
 80055c2:	4625      	mov	r5, r4
 80055c4:	4628      	mov	r0, r5
 80055c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055ca:	f000 f925 	bl	8005818 <_malloc_usable_size_r>
 80055ce:	4284      	cmp	r4, r0
 80055d0:	4606      	mov	r6, r0
 80055d2:	d802      	bhi.n	80055da <_realloc_r+0x34>
 80055d4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80055d8:	d8f4      	bhi.n	80055c4 <_realloc_r+0x1e>
 80055da:	4621      	mov	r1, r4
 80055dc:	4638      	mov	r0, r7
 80055de:	f7ff faf1 	bl	8004bc4 <_malloc_r>
 80055e2:	4680      	mov	r8, r0
 80055e4:	b908      	cbnz	r0, 80055ea <_realloc_r+0x44>
 80055e6:	4645      	mov	r5, r8
 80055e8:	e7ec      	b.n	80055c4 <_realloc_r+0x1e>
 80055ea:	42b4      	cmp	r4, r6
 80055ec:	4622      	mov	r2, r4
 80055ee:	4629      	mov	r1, r5
 80055f0:	bf28      	it	cs
 80055f2:	4632      	movcs	r2, r6
 80055f4:	f000 f876 	bl	80056e4 <memcpy>
 80055f8:	4629      	mov	r1, r5
 80055fa:	4638      	mov	r0, r7
 80055fc:	f000 f8b2 	bl	8005764 <_free_r>
 8005600:	e7f1      	b.n	80055e6 <_realloc_r+0x40>

08005602 <memmove>:
 8005602:	4288      	cmp	r0, r1
 8005604:	b510      	push	{r4, lr}
 8005606:	eb01 0402 	add.w	r4, r1, r2
 800560a:	d902      	bls.n	8005612 <memmove+0x10>
 800560c:	4284      	cmp	r4, r0
 800560e:	4623      	mov	r3, r4
 8005610:	d807      	bhi.n	8005622 <memmove+0x20>
 8005612:	1e43      	subs	r3, r0, #1
 8005614:	42a1      	cmp	r1, r4
 8005616:	d008      	beq.n	800562a <memmove+0x28>
 8005618:	f811 2b01 	ldrb.w	r2, [r1], #1
 800561c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005620:	e7f8      	b.n	8005614 <memmove+0x12>
 8005622:	4601      	mov	r1, r0
 8005624:	4402      	add	r2, r0
 8005626:	428a      	cmp	r2, r1
 8005628:	d100      	bne.n	800562c <memmove+0x2a>
 800562a:	bd10      	pop	{r4, pc}
 800562c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005630:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005634:	e7f7      	b.n	8005626 <memmove+0x24>
	...

08005638 <_lseek_r>:
 8005638:	b538      	push	{r3, r4, r5, lr}
 800563a:	4604      	mov	r4, r0
 800563c:	4608      	mov	r0, r1
 800563e:	4611      	mov	r1, r2
 8005640:	2200      	movs	r2, #0
 8005642:	4d05      	ldr	r5, [pc, #20]	@ (8005658 <_lseek_r+0x20>)
 8005644:	602a      	str	r2, [r5, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	f7fb fff1 	bl	800162e <_lseek>
 800564c:	1c43      	adds	r3, r0, #1
 800564e:	d102      	bne.n	8005656 <_lseek_r+0x1e>
 8005650:	682b      	ldr	r3, [r5, #0]
 8005652:	b103      	cbz	r3, 8005656 <_lseek_r+0x1e>
 8005654:	6023      	str	r3, [r4, #0]
 8005656:	bd38      	pop	{r3, r4, r5, pc}
 8005658:	20000374 	.word	0x20000374

0800565c <_read_r>:
 800565c:	b538      	push	{r3, r4, r5, lr}
 800565e:	4604      	mov	r4, r0
 8005660:	4608      	mov	r0, r1
 8005662:	4611      	mov	r1, r2
 8005664:	2200      	movs	r2, #0
 8005666:	4d05      	ldr	r5, [pc, #20]	@ (800567c <_read_r+0x20>)
 8005668:	602a      	str	r2, [r5, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	f7fb ff82 	bl	8001574 <_read>
 8005670:	1c43      	adds	r3, r0, #1
 8005672:	d102      	bne.n	800567a <_read_r+0x1e>
 8005674:	682b      	ldr	r3, [r5, #0]
 8005676:	b103      	cbz	r3, 800567a <_read_r+0x1e>
 8005678:	6023      	str	r3, [r4, #0]
 800567a:	bd38      	pop	{r3, r4, r5, pc}
 800567c:	20000374 	.word	0x20000374

08005680 <_sbrk_r>:
 8005680:	b538      	push	{r3, r4, r5, lr}
 8005682:	2300      	movs	r3, #0
 8005684:	4d05      	ldr	r5, [pc, #20]	@ (800569c <_sbrk_r+0x1c>)
 8005686:	4604      	mov	r4, r0
 8005688:	4608      	mov	r0, r1
 800568a:	602b      	str	r3, [r5, #0]
 800568c:	f7fb ffdc 	bl	8001648 <_sbrk>
 8005690:	1c43      	adds	r3, r0, #1
 8005692:	d102      	bne.n	800569a <_sbrk_r+0x1a>
 8005694:	682b      	ldr	r3, [r5, #0]
 8005696:	b103      	cbz	r3, 800569a <_sbrk_r+0x1a>
 8005698:	6023      	str	r3, [r4, #0]
 800569a:	bd38      	pop	{r3, r4, r5, pc}
 800569c:	20000374 	.word	0x20000374

080056a0 <_write_r>:
 80056a0:	b538      	push	{r3, r4, r5, lr}
 80056a2:	4604      	mov	r4, r0
 80056a4:	4608      	mov	r0, r1
 80056a6:	4611      	mov	r1, r2
 80056a8:	2200      	movs	r2, #0
 80056aa:	4d05      	ldr	r5, [pc, #20]	@ (80056c0 <_write_r+0x20>)
 80056ac:	602a      	str	r2, [r5, #0]
 80056ae:	461a      	mov	r2, r3
 80056b0:	f7fb ff7d 	bl	80015ae <_write>
 80056b4:	1c43      	adds	r3, r0, #1
 80056b6:	d102      	bne.n	80056be <_write_r+0x1e>
 80056b8:	682b      	ldr	r3, [r5, #0]
 80056ba:	b103      	cbz	r3, 80056be <_write_r+0x1e>
 80056bc:	6023      	str	r3, [r4, #0]
 80056be:	bd38      	pop	{r3, r4, r5, pc}
 80056c0:	20000374 	.word	0x20000374

080056c4 <_close_r>:
 80056c4:	b538      	push	{r3, r4, r5, lr}
 80056c6:	2300      	movs	r3, #0
 80056c8:	4d05      	ldr	r5, [pc, #20]	@ (80056e0 <_close_r+0x1c>)
 80056ca:	4604      	mov	r4, r0
 80056cc:	4608      	mov	r0, r1
 80056ce:	602b      	str	r3, [r5, #0]
 80056d0:	f7fb ff89 	bl	80015e6 <_close>
 80056d4:	1c43      	adds	r3, r0, #1
 80056d6:	d102      	bne.n	80056de <_close_r+0x1a>
 80056d8:	682b      	ldr	r3, [r5, #0]
 80056da:	b103      	cbz	r3, 80056de <_close_r+0x1a>
 80056dc:	6023      	str	r3, [r4, #0]
 80056de:	bd38      	pop	{r3, r4, r5, pc}
 80056e0:	20000374 	.word	0x20000374

080056e4 <memcpy>:
 80056e4:	440a      	add	r2, r1
 80056e6:	4291      	cmp	r1, r2
 80056e8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80056ec:	d100      	bne.n	80056f0 <memcpy+0xc>
 80056ee:	4770      	bx	lr
 80056f0:	b510      	push	{r4, lr}
 80056f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056f6:	4291      	cmp	r1, r2
 80056f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056fc:	d1f9      	bne.n	80056f2 <memcpy+0xe>
 80056fe:	bd10      	pop	{r4, pc}

08005700 <__assert_func>:
 8005700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005702:	4614      	mov	r4, r2
 8005704:	461a      	mov	r2, r3
 8005706:	4b09      	ldr	r3, [pc, #36]	@ (800572c <__assert_func+0x2c>)
 8005708:	4605      	mov	r5, r0
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68d8      	ldr	r0, [r3, #12]
 800570e:	b14c      	cbz	r4, 8005724 <__assert_func+0x24>
 8005710:	4b07      	ldr	r3, [pc, #28]	@ (8005730 <__assert_func+0x30>)
 8005712:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005716:	9100      	str	r1, [sp, #0]
 8005718:	462b      	mov	r3, r5
 800571a:	4906      	ldr	r1, [pc, #24]	@ (8005734 <__assert_func+0x34>)
 800571c:	f000 f884 	bl	8005828 <fiprintf>
 8005720:	f000 f8a1 	bl	8005866 <abort>
 8005724:	4b04      	ldr	r3, [pc, #16]	@ (8005738 <__assert_func+0x38>)
 8005726:	461c      	mov	r4, r3
 8005728:	e7f3      	b.n	8005712 <__assert_func+0x12>
 800572a:	bf00      	nop
 800572c:	20000018 	.word	0x20000018
 8005730:	08005f41 	.word	0x08005f41
 8005734:	08005f4e 	.word	0x08005f4e
 8005738:	08005f7c 	.word	0x08005f7c

0800573c <_calloc_r>:
 800573c:	b570      	push	{r4, r5, r6, lr}
 800573e:	fba1 5402 	umull	r5, r4, r1, r2
 8005742:	b934      	cbnz	r4, 8005752 <_calloc_r+0x16>
 8005744:	4629      	mov	r1, r5
 8005746:	f7ff fa3d 	bl	8004bc4 <_malloc_r>
 800574a:	4606      	mov	r6, r0
 800574c:	b928      	cbnz	r0, 800575a <_calloc_r+0x1e>
 800574e:	4630      	mov	r0, r6
 8005750:	bd70      	pop	{r4, r5, r6, pc}
 8005752:	220c      	movs	r2, #12
 8005754:	2600      	movs	r6, #0
 8005756:	6002      	str	r2, [r0, #0]
 8005758:	e7f9      	b.n	800574e <_calloc_r+0x12>
 800575a:	462a      	mov	r2, r5
 800575c:	4621      	mov	r1, r4
 800575e:	f7fe fa0b 	bl	8003b78 <memset>
 8005762:	e7f4      	b.n	800574e <_calloc_r+0x12>

08005764 <_free_r>:
 8005764:	b538      	push	{r3, r4, r5, lr}
 8005766:	4605      	mov	r5, r0
 8005768:	2900      	cmp	r1, #0
 800576a:	d040      	beq.n	80057ee <_free_r+0x8a>
 800576c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005770:	1f0c      	subs	r4, r1, #4
 8005772:	2b00      	cmp	r3, #0
 8005774:	bfb8      	it	lt
 8005776:	18e4      	addlt	r4, r4, r3
 8005778:	f7ff fb4c 	bl	8004e14 <__malloc_lock>
 800577c:	4a1c      	ldr	r2, [pc, #112]	@ (80057f0 <_free_r+0x8c>)
 800577e:	6813      	ldr	r3, [r2, #0]
 8005780:	b933      	cbnz	r3, 8005790 <_free_r+0x2c>
 8005782:	6063      	str	r3, [r4, #4]
 8005784:	6014      	str	r4, [r2, #0]
 8005786:	4628      	mov	r0, r5
 8005788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800578c:	f7ff bb48 	b.w	8004e20 <__malloc_unlock>
 8005790:	42a3      	cmp	r3, r4
 8005792:	d908      	bls.n	80057a6 <_free_r+0x42>
 8005794:	6820      	ldr	r0, [r4, #0]
 8005796:	1821      	adds	r1, r4, r0
 8005798:	428b      	cmp	r3, r1
 800579a:	bf01      	itttt	eq
 800579c:	6819      	ldreq	r1, [r3, #0]
 800579e:	685b      	ldreq	r3, [r3, #4]
 80057a0:	1809      	addeq	r1, r1, r0
 80057a2:	6021      	streq	r1, [r4, #0]
 80057a4:	e7ed      	b.n	8005782 <_free_r+0x1e>
 80057a6:	461a      	mov	r2, r3
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	b10b      	cbz	r3, 80057b0 <_free_r+0x4c>
 80057ac:	42a3      	cmp	r3, r4
 80057ae:	d9fa      	bls.n	80057a6 <_free_r+0x42>
 80057b0:	6811      	ldr	r1, [r2, #0]
 80057b2:	1850      	adds	r0, r2, r1
 80057b4:	42a0      	cmp	r0, r4
 80057b6:	d10b      	bne.n	80057d0 <_free_r+0x6c>
 80057b8:	6820      	ldr	r0, [r4, #0]
 80057ba:	4401      	add	r1, r0
 80057bc:	1850      	adds	r0, r2, r1
 80057be:	4283      	cmp	r3, r0
 80057c0:	6011      	str	r1, [r2, #0]
 80057c2:	d1e0      	bne.n	8005786 <_free_r+0x22>
 80057c4:	6818      	ldr	r0, [r3, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	4408      	add	r0, r1
 80057ca:	6010      	str	r0, [r2, #0]
 80057cc:	6053      	str	r3, [r2, #4]
 80057ce:	e7da      	b.n	8005786 <_free_r+0x22>
 80057d0:	d902      	bls.n	80057d8 <_free_r+0x74>
 80057d2:	230c      	movs	r3, #12
 80057d4:	602b      	str	r3, [r5, #0]
 80057d6:	e7d6      	b.n	8005786 <_free_r+0x22>
 80057d8:	6820      	ldr	r0, [r4, #0]
 80057da:	1821      	adds	r1, r4, r0
 80057dc:	428b      	cmp	r3, r1
 80057de:	bf01      	itttt	eq
 80057e0:	6819      	ldreq	r1, [r3, #0]
 80057e2:	685b      	ldreq	r3, [r3, #4]
 80057e4:	1809      	addeq	r1, r1, r0
 80057e6:	6021      	streq	r1, [r4, #0]
 80057e8:	6063      	str	r3, [r4, #4]
 80057ea:	6054      	str	r4, [r2, #4]
 80057ec:	e7cb      	b.n	8005786 <_free_r+0x22>
 80057ee:	bd38      	pop	{r3, r4, r5, pc}
 80057f0:	20000370 	.word	0x20000370

080057f4 <__ascii_mbtowc>:
 80057f4:	b082      	sub	sp, #8
 80057f6:	b901      	cbnz	r1, 80057fa <__ascii_mbtowc+0x6>
 80057f8:	a901      	add	r1, sp, #4
 80057fa:	b142      	cbz	r2, 800580e <__ascii_mbtowc+0x1a>
 80057fc:	b14b      	cbz	r3, 8005812 <__ascii_mbtowc+0x1e>
 80057fe:	7813      	ldrb	r3, [r2, #0]
 8005800:	600b      	str	r3, [r1, #0]
 8005802:	7812      	ldrb	r2, [r2, #0]
 8005804:	1e10      	subs	r0, r2, #0
 8005806:	bf18      	it	ne
 8005808:	2001      	movne	r0, #1
 800580a:	b002      	add	sp, #8
 800580c:	4770      	bx	lr
 800580e:	4610      	mov	r0, r2
 8005810:	e7fb      	b.n	800580a <__ascii_mbtowc+0x16>
 8005812:	f06f 0001 	mvn.w	r0, #1
 8005816:	e7f8      	b.n	800580a <__ascii_mbtowc+0x16>

08005818 <_malloc_usable_size_r>:
 8005818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800581c:	1f18      	subs	r0, r3, #4
 800581e:	2b00      	cmp	r3, #0
 8005820:	bfbc      	itt	lt
 8005822:	580b      	ldrlt	r3, [r1, r0]
 8005824:	18c0      	addlt	r0, r0, r3
 8005826:	4770      	bx	lr

08005828 <fiprintf>:
 8005828:	b40e      	push	{r1, r2, r3}
 800582a:	b503      	push	{r0, r1, lr}
 800582c:	4601      	mov	r1, r0
 800582e:	ab03      	add	r3, sp, #12
 8005830:	4805      	ldr	r0, [pc, #20]	@ (8005848 <fiprintf+0x20>)
 8005832:	f853 2b04 	ldr.w	r2, [r3], #4
 8005836:	6800      	ldr	r0, [r0, #0]
 8005838:	9301      	str	r3, [sp, #4]
 800583a:	f000 f843 	bl	80058c4 <_vfiprintf_r>
 800583e:	b002      	add	sp, #8
 8005840:	f85d eb04 	ldr.w	lr, [sp], #4
 8005844:	b003      	add	sp, #12
 8005846:	4770      	bx	lr
 8005848:	20000018 	.word	0x20000018

0800584c <__ascii_wctomb>:
 800584c:	4603      	mov	r3, r0
 800584e:	4608      	mov	r0, r1
 8005850:	b141      	cbz	r1, 8005864 <__ascii_wctomb+0x18>
 8005852:	2aff      	cmp	r2, #255	@ 0xff
 8005854:	d904      	bls.n	8005860 <__ascii_wctomb+0x14>
 8005856:	228a      	movs	r2, #138	@ 0x8a
 8005858:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	4770      	bx	lr
 8005860:	2001      	movs	r0, #1
 8005862:	700a      	strb	r2, [r1, #0]
 8005864:	4770      	bx	lr

08005866 <abort>:
 8005866:	2006      	movs	r0, #6
 8005868:	b508      	push	{r3, lr}
 800586a:	f000 fa61 	bl	8005d30 <raise>
 800586e:	2001      	movs	r0, #1
 8005870:	f7fb fe75 	bl	800155e <_exit>

08005874 <__sfputc_r>:
 8005874:	6893      	ldr	r3, [r2, #8]
 8005876:	b410      	push	{r4}
 8005878:	3b01      	subs	r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	6093      	str	r3, [r2, #8]
 800587e:	da07      	bge.n	8005890 <__sfputc_r+0x1c>
 8005880:	6994      	ldr	r4, [r2, #24]
 8005882:	42a3      	cmp	r3, r4
 8005884:	db01      	blt.n	800588a <__sfputc_r+0x16>
 8005886:	290a      	cmp	r1, #10
 8005888:	d102      	bne.n	8005890 <__sfputc_r+0x1c>
 800588a:	bc10      	pop	{r4}
 800588c:	f000 b932 	b.w	8005af4 <__swbuf_r>
 8005890:	6813      	ldr	r3, [r2, #0]
 8005892:	1c58      	adds	r0, r3, #1
 8005894:	6010      	str	r0, [r2, #0]
 8005896:	7019      	strb	r1, [r3, #0]
 8005898:	4608      	mov	r0, r1
 800589a:	bc10      	pop	{r4}
 800589c:	4770      	bx	lr

0800589e <__sfputs_r>:
 800589e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a0:	4606      	mov	r6, r0
 80058a2:	460f      	mov	r7, r1
 80058a4:	4614      	mov	r4, r2
 80058a6:	18d5      	adds	r5, r2, r3
 80058a8:	42ac      	cmp	r4, r5
 80058aa:	d101      	bne.n	80058b0 <__sfputs_r+0x12>
 80058ac:	2000      	movs	r0, #0
 80058ae:	e007      	b.n	80058c0 <__sfputs_r+0x22>
 80058b0:	463a      	mov	r2, r7
 80058b2:	4630      	mov	r0, r6
 80058b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058b8:	f7ff ffdc 	bl	8005874 <__sfputc_r>
 80058bc:	1c43      	adds	r3, r0, #1
 80058be:	d1f3      	bne.n	80058a8 <__sfputs_r+0xa>
 80058c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058c4 <_vfiprintf_r>:
 80058c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c8:	460d      	mov	r5, r1
 80058ca:	4614      	mov	r4, r2
 80058cc:	4698      	mov	r8, r3
 80058ce:	4606      	mov	r6, r0
 80058d0:	b09d      	sub	sp, #116	@ 0x74
 80058d2:	b118      	cbz	r0, 80058dc <_vfiprintf_r+0x18>
 80058d4:	6a03      	ldr	r3, [r0, #32]
 80058d6:	b90b      	cbnz	r3, 80058dc <_vfiprintf_r+0x18>
 80058d8:	f7fe f918 	bl	8003b0c <__sinit>
 80058dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80058de:	07d9      	lsls	r1, r3, #31
 80058e0:	d405      	bmi.n	80058ee <_vfiprintf_r+0x2a>
 80058e2:	89ab      	ldrh	r3, [r5, #12]
 80058e4:	059a      	lsls	r2, r3, #22
 80058e6:	d402      	bmi.n	80058ee <_vfiprintf_r+0x2a>
 80058e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80058ea:	f7fe f978 	bl	8003bde <__retarget_lock_acquire_recursive>
 80058ee:	89ab      	ldrh	r3, [r5, #12]
 80058f0:	071b      	lsls	r3, r3, #28
 80058f2:	d501      	bpl.n	80058f8 <_vfiprintf_r+0x34>
 80058f4:	692b      	ldr	r3, [r5, #16]
 80058f6:	b99b      	cbnz	r3, 8005920 <_vfiprintf_r+0x5c>
 80058f8:	4629      	mov	r1, r5
 80058fa:	4630      	mov	r0, r6
 80058fc:	f000 f938 	bl	8005b70 <__swsetup_r>
 8005900:	b170      	cbz	r0, 8005920 <_vfiprintf_r+0x5c>
 8005902:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005904:	07dc      	lsls	r4, r3, #31
 8005906:	d504      	bpl.n	8005912 <_vfiprintf_r+0x4e>
 8005908:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800590c:	b01d      	add	sp, #116	@ 0x74
 800590e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005912:	89ab      	ldrh	r3, [r5, #12]
 8005914:	0598      	lsls	r0, r3, #22
 8005916:	d4f7      	bmi.n	8005908 <_vfiprintf_r+0x44>
 8005918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800591a:	f7fe f961 	bl	8003be0 <__retarget_lock_release_recursive>
 800591e:	e7f3      	b.n	8005908 <_vfiprintf_r+0x44>
 8005920:	2300      	movs	r3, #0
 8005922:	9309      	str	r3, [sp, #36]	@ 0x24
 8005924:	2320      	movs	r3, #32
 8005926:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800592a:	2330      	movs	r3, #48	@ 0x30
 800592c:	f04f 0901 	mov.w	r9, #1
 8005930:	f8cd 800c 	str.w	r8, [sp, #12]
 8005934:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005ae0 <_vfiprintf_r+0x21c>
 8005938:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800593c:	4623      	mov	r3, r4
 800593e:	469a      	mov	sl, r3
 8005940:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005944:	b10a      	cbz	r2, 800594a <_vfiprintf_r+0x86>
 8005946:	2a25      	cmp	r2, #37	@ 0x25
 8005948:	d1f9      	bne.n	800593e <_vfiprintf_r+0x7a>
 800594a:	ebba 0b04 	subs.w	fp, sl, r4
 800594e:	d00b      	beq.n	8005968 <_vfiprintf_r+0xa4>
 8005950:	465b      	mov	r3, fp
 8005952:	4622      	mov	r2, r4
 8005954:	4629      	mov	r1, r5
 8005956:	4630      	mov	r0, r6
 8005958:	f7ff ffa1 	bl	800589e <__sfputs_r>
 800595c:	3001      	adds	r0, #1
 800595e:	f000 80a7 	beq.w	8005ab0 <_vfiprintf_r+0x1ec>
 8005962:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005964:	445a      	add	r2, fp
 8005966:	9209      	str	r2, [sp, #36]	@ 0x24
 8005968:	f89a 3000 	ldrb.w	r3, [sl]
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 809f 	beq.w	8005ab0 <_vfiprintf_r+0x1ec>
 8005972:	2300      	movs	r3, #0
 8005974:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800597c:	f10a 0a01 	add.w	sl, sl, #1
 8005980:	9304      	str	r3, [sp, #16]
 8005982:	9307      	str	r3, [sp, #28]
 8005984:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005988:	931a      	str	r3, [sp, #104]	@ 0x68
 800598a:	4654      	mov	r4, sl
 800598c:	2205      	movs	r2, #5
 800598e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005992:	4853      	ldr	r0, [pc, #332]	@ (8005ae0 <_vfiprintf_r+0x21c>)
 8005994:	f7fe f92a 	bl	8003bec <memchr>
 8005998:	9a04      	ldr	r2, [sp, #16]
 800599a:	b9d8      	cbnz	r0, 80059d4 <_vfiprintf_r+0x110>
 800599c:	06d1      	lsls	r1, r2, #27
 800599e:	bf44      	itt	mi
 80059a0:	2320      	movmi	r3, #32
 80059a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059a6:	0713      	lsls	r3, r2, #28
 80059a8:	bf44      	itt	mi
 80059aa:	232b      	movmi	r3, #43	@ 0x2b
 80059ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059b0:	f89a 3000 	ldrb.w	r3, [sl]
 80059b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80059b6:	d015      	beq.n	80059e4 <_vfiprintf_r+0x120>
 80059b8:	4654      	mov	r4, sl
 80059ba:	2000      	movs	r0, #0
 80059bc:	f04f 0c0a 	mov.w	ip, #10
 80059c0:	9a07      	ldr	r2, [sp, #28]
 80059c2:	4621      	mov	r1, r4
 80059c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059c8:	3b30      	subs	r3, #48	@ 0x30
 80059ca:	2b09      	cmp	r3, #9
 80059cc:	d94b      	bls.n	8005a66 <_vfiprintf_r+0x1a2>
 80059ce:	b1b0      	cbz	r0, 80059fe <_vfiprintf_r+0x13a>
 80059d0:	9207      	str	r2, [sp, #28]
 80059d2:	e014      	b.n	80059fe <_vfiprintf_r+0x13a>
 80059d4:	eba0 0308 	sub.w	r3, r0, r8
 80059d8:	fa09 f303 	lsl.w	r3, r9, r3
 80059dc:	4313      	orrs	r3, r2
 80059de:	46a2      	mov	sl, r4
 80059e0:	9304      	str	r3, [sp, #16]
 80059e2:	e7d2      	b.n	800598a <_vfiprintf_r+0xc6>
 80059e4:	9b03      	ldr	r3, [sp, #12]
 80059e6:	1d19      	adds	r1, r3, #4
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	9103      	str	r1, [sp, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	bfbb      	ittet	lt
 80059f0:	425b      	neglt	r3, r3
 80059f2:	f042 0202 	orrlt.w	r2, r2, #2
 80059f6:	9307      	strge	r3, [sp, #28]
 80059f8:	9307      	strlt	r3, [sp, #28]
 80059fa:	bfb8      	it	lt
 80059fc:	9204      	strlt	r2, [sp, #16]
 80059fe:	7823      	ldrb	r3, [r4, #0]
 8005a00:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a02:	d10a      	bne.n	8005a1a <_vfiprintf_r+0x156>
 8005a04:	7863      	ldrb	r3, [r4, #1]
 8005a06:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a08:	d132      	bne.n	8005a70 <_vfiprintf_r+0x1ac>
 8005a0a:	9b03      	ldr	r3, [sp, #12]
 8005a0c:	3402      	adds	r4, #2
 8005a0e:	1d1a      	adds	r2, r3, #4
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	9203      	str	r2, [sp, #12]
 8005a14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a18:	9305      	str	r3, [sp, #20]
 8005a1a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005ae4 <_vfiprintf_r+0x220>
 8005a1e:	2203      	movs	r2, #3
 8005a20:	4650      	mov	r0, sl
 8005a22:	7821      	ldrb	r1, [r4, #0]
 8005a24:	f7fe f8e2 	bl	8003bec <memchr>
 8005a28:	b138      	cbz	r0, 8005a3a <_vfiprintf_r+0x176>
 8005a2a:	2240      	movs	r2, #64	@ 0x40
 8005a2c:	9b04      	ldr	r3, [sp, #16]
 8005a2e:	eba0 000a 	sub.w	r0, r0, sl
 8005a32:	4082      	lsls	r2, r0
 8005a34:	4313      	orrs	r3, r2
 8005a36:	3401      	adds	r4, #1
 8005a38:	9304      	str	r3, [sp, #16]
 8005a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a3e:	2206      	movs	r2, #6
 8005a40:	4829      	ldr	r0, [pc, #164]	@ (8005ae8 <_vfiprintf_r+0x224>)
 8005a42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a46:	f7fe f8d1 	bl	8003bec <memchr>
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	d03f      	beq.n	8005ace <_vfiprintf_r+0x20a>
 8005a4e:	4b27      	ldr	r3, [pc, #156]	@ (8005aec <_vfiprintf_r+0x228>)
 8005a50:	bb1b      	cbnz	r3, 8005a9a <_vfiprintf_r+0x1d6>
 8005a52:	9b03      	ldr	r3, [sp, #12]
 8005a54:	3307      	adds	r3, #7
 8005a56:	f023 0307 	bic.w	r3, r3, #7
 8005a5a:	3308      	adds	r3, #8
 8005a5c:	9303      	str	r3, [sp, #12]
 8005a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a60:	443b      	add	r3, r7
 8005a62:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a64:	e76a      	b.n	800593c <_vfiprintf_r+0x78>
 8005a66:	460c      	mov	r4, r1
 8005a68:	2001      	movs	r0, #1
 8005a6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a6e:	e7a8      	b.n	80059c2 <_vfiprintf_r+0xfe>
 8005a70:	2300      	movs	r3, #0
 8005a72:	f04f 0c0a 	mov.w	ip, #10
 8005a76:	4619      	mov	r1, r3
 8005a78:	3401      	adds	r4, #1
 8005a7a:	9305      	str	r3, [sp, #20]
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a82:	3a30      	subs	r2, #48	@ 0x30
 8005a84:	2a09      	cmp	r2, #9
 8005a86:	d903      	bls.n	8005a90 <_vfiprintf_r+0x1cc>
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d0c6      	beq.n	8005a1a <_vfiprintf_r+0x156>
 8005a8c:	9105      	str	r1, [sp, #20]
 8005a8e:	e7c4      	b.n	8005a1a <_vfiprintf_r+0x156>
 8005a90:	4604      	mov	r4, r0
 8005a92:	2301      	movs	r3, #1
 8005a94:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a98:	e7f0      	b.n	8005a7c <_vfiprintf_r+0x1b8>
 8005a9a:	ab03      	add	r3, sp, #12
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	462a      	mov	r2, r5
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	4b13      	ldr	r3, [pc, #76]	@ (8005af0 <_vfiprintf_r+0x22c>)
 8005aa4:	a904      	add	r1, sp, #16
 8005aa6:	f7fd fbb3 	bl	8003210 <_printf_float>
 8005aaa:	4607      	mov	r7, r0
 8005aac:	1c78      	adds	r0, r7, #1
 8005aae:	d1d6      	bne.n	8005a5e <_vfiprintf_r+0x19a>
 8005ab0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ab2:	07d9      	lsls	r1, r3, #31
 8005ab4:	d405      	bmi.n	8005ac2 <_vfiprintf_r+0x1fe>
 8005ab6:	89ab      	ldrh	r3, [r5, #12]
 8005ab8:	059a      	lsls	r2, r3, #22
 8005aba:	d402      	bmi.n	8005ac2 <_vfiprintf_r+0x1fe>
 8005abc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005abe:	f7fe f88f 	bl	8003be0 <__retarget_lock_release_recursive>
 8005ac2:	89ab      	ldrh	r3, [r5, #12]
 8005ac4:	065b      	lsls	r3, r3, #25
 8005ac6:	f53f af1f 	bmi.w	8005908 <_vfiprintf_r+0x44>
 8005aca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005acc:	e71e      	b.n	800590c <_vfiprintf_r+0x48>
 8005ace:	ab03      	add	r3, sp, #12
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	462a      	mov	r2, r5
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	4b06      	ldr	r3, [pc, #24]	@ (8005af0 <_vfiprintf_r+0x22c>)
 8005ad8:	a904      	add	r1, sp, #16
 8005ada:	f7fd fe37 	bl	800374c <_printf_i>
 8005ade:	e7e4      	b.n	8005aaa <_vfiprintf_r+0x1e6>
 8005ae0:	08005ecd 	.word	0x08005ecd
 8005ae4:	08005ed3 	.word	0x08005ed3
 8005ae8:	08005ed7 	.word	0x08005ed7
 8005aec:	08003211 	.word	0x08003211
 8005af0:	0800589f 	.word	0x0800589f

08005af4 <__swbuf_r>:
 8005af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af6:	460e      	mov	r6, r1
 8005af8:	4614      	mov	r4, r2
 8005afa:	4605      	mov	r5, r0
 8005afc:	b118      	cbz	r0, 8005b06 <__swbuf_r+0x12>
 8005afe:	6a03      	ldr	r3, [r0, #32]
 8005b00:	b90b      	cbnz	r3, 8005b06 <__swbuf_r+0x12>
 8005b02:	f7fe f803 	bl	8003b0c <__sinit>
 8005b06:	69a3      	ldr	r3, [r4, #24]
 8005b08:	60a3      	str	r3, [r4, #8]
 8005b0a:	89a3      	ldrh	r3, [r4, #12]
 8005b0c:	071a      	lsls	r2, r3, #28
 8005b0e:	d501      	bpl.n	8005b14 <__swbuf_r+0x20>
 8005b10:	6923      	ldr	r3, [r4, #16]
 8005b12:	b943      	cbnz	r3, 8005b26 <__swbuf_r+0x32>
 8005b14:	4621      	mov	r1, r4
 8005b16:	4628      	mov	r0, r5
 8005b18:	f000 f82a 	bl	8005b70 <__swsetup_r>
 8005b1c:	b118      	cbz	r0, 8005b26 <__swbuf_r+0x32>
 8005b1e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005b22:	4638      	mov	r0, r7
 8005b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b26:	6823      	ldr	r3, [r4, #0]
 8005b28:	6922      	ldr	r2, [r4, #16]
 8005b2a:	b2f6      	uxtb	r6, r6
 8005b2c:	1a98      	subs	r0, r3, r2
 8005b2e:	6963      	ldr	r3, [r4, #20]
 8005b30:	4637      	mov	r7, r6
 8005b32:	4283      	cmp	r3, r0
 8005b34:	dc05      	bgt.n	8005b42 <__swbuf_r+0x4e>
 8005b36:	4621      	mov	r1, r4
 8005b38:	4628      	mov	r0, r5
 8005b3a:	f7ff f943 	bl	8004dc4 <_fflush_r>
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d1ed      	bne.n	8005b1e <__swbuf_r+0x2a>
 8005b42:	68a3      	ldr	r3, [r4, #8]
 8005b44:	3b01      	subs	r3, #1
 8005b46:	60a3      	str	r3, [r4, #8]
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	6022      	str	r2, [r4, #0]
 8005b4e:	701e      	strb	r6, [r3, #0]
 8005b50:	6962      	ldr	r2, [r4, #20]
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d004      	beq.n	8005b62 <__swbuf_r+0x6e>
 8005b58:	89a3      	ldrh	r3, [r4, #12]
 8005b5a:	07db      	lsls	r3, r3, #31
 8005b5c:	d5e1      	bpl.n	8005b22 <__swbuf_r+0x2e>
 8005b5e:	2e0a      	cmp	r6, #10
 8005b60:	d1df      	bne.n	8005b22 <__swbuf_r+0x2e>
 8005b62:	4621      	mov	r1, r4
 8005b64:	4628      	mov	r0, r5
 8005b66:	f7ff f92d 	bl	8004dc4 <_fflush_r>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	d0d9      	beq.n	8005b22 <__swbuf_r+0x2e>
 8005b6e:	e7d6      	b.n	8005b1e <__swbuf_r+0x2a>

08005b70 <__swsetup_r>:
 8005b70:	b538      	push	{r3, r4, r5, lr}
 8005b72:	4b29      	ldr	r3, [pc, #164]	@ (8005c18 <__swsetup_r+0xa8>)
 8005b74:	4605      	mov	r5, r0
 8005b76:	6818      	ldr	r0, [r3, #0]
 8005b78:	460c      	mov	r4, r1
 8005b7a:	b118      	cbz	r0, 8005b84 <__swsetup_r+0x14>
 8005b7c:	6a03      	ldr	r3, [r0, #32]
 8005b7e:	b90b      	cbnz	r3, 8005b84 <__swsetup_r+0x14>
 8005b80:	f7fd ffc4 	bl	8003b0c <__sinit>
 8005b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b88:	0719      	lsls	r1, r3, #28
 8005b8a:	d422      	bmi.n	8005bd2 <__swsetup_r+0x62>
 8005b8c:	06da      	lsls	r2, r3, #27
 8005b8e:	d407      	bmi.n	8005ba0 <__swsetup_r+0x30>
 8005b90:	2209      	movs	r2, #9
 8005b92:	602a      	str	r2, [r5, #0]
 8005b94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b9c:	81a3      	strh	r3, [r4, #12]
 8005b9e:	e033      	b.n	8005c08 <__swsetup_r+0x98>
 8005ba0:	0758      	lsls	r0, r3, #29
 8005ba2:	d512      	bpl.n	8005bca <__swsetup_r+0x5a>
 8005ba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ba6:	b141      	cbz	r1, 8005bba <__swsetup_r+0x4a>
 8005ba8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bac:	4299      	cmp	r1, r3
 8005bae:	d002      	beq.n	8005bb6 <__swsetup_r+0x46>
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	f7ff fdd7 	bl	8005764 <_free_r>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bba:	89a3      	ldrh	r3, [r4, #12]
 8005bbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005bc0:	81a3      	strh	r3, [r4, #12]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	6063      	str	r3, [r4, #4]
 8005bc6:	6923      	ldr	r3, [r4, #16]
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	89a3      	ldrh	r3, [r4, #12]
 8005bcc:	f043 0308 	orr.w	r3, r3, #8
 8005bd0:	81a3      	strh	r3, [r4, #12]
 8005bd2:	6923      	ldr	r3, [r4, #16]
 8005bd4:	b94b      	cbnz	r3, 8005bea <__swsetup_r+0x7a>
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005be0:	d003      	beq.n	8005bea <__swsetup_r+0x7a>
 8005be2:	4621      	mov	r1, r4
 8005be4:	4628      	mov	r0, r5
 8005be6:	f000 f83e 	bl	8005c66 <__smakebuf_r>
 8005bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bee:	f013 0201 	ands.w	r2, r3, #1
 8005bf2:	d00a      	beq.n	8005c0a <__swsetup_r+0x9a>
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	60a2      	str	r2, [r4, #8]
 8005bf8:	6962      	ldr	r2, [r4, #20]
 8005bfa:	4252      	negs	r2, r2
 8005bfc:	61a2      	str	r2, [r4, #24]
 8005bfe:	6922      	ldr	r2, [r4, #16]
 8005c00:	b942      	cbnz	r2, 8005c14 <__swsetup_r+0xa4>
 8005c02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005c06:	d1c5      	bne.n	8005b94 <__swsetup_r+0x24>
 8005c08:	bd38      	pop	{r3, r4, r5, pc}
 8005c0a:	0799      	lsls	r1, r3, #30
 8005c0c:	bf58      	it	pl
 8005c0e:	6962      	ldrpl	r2, [r4, #20]
 8005c10:	60a2      	str	r2, [r4, #8]
 8005c12:	e7f4      	b.n	8005bfe <__swsetup_r+0x8e>
 8005c14:	2000      	movs	r0, #0
 8005c16:	e7f7      	b.n	8005c08 <__swsetup_r+0x98>
 8005c18:	20000018 	.word	0x20000018

08005c1c <__swhatbuf_r>:
 8005c1c:	b570      	push	{r4, r5, r6, lr}
 8005c1e:	460c      	mov	r4, r1
 8005c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c24:	4615      	mov	r5, r2
 8005c26:	2900      	cmp	r1, #0
 8005c28:	461e      	mov	r6, r3
 8005c2a:	b096      	sub	sp, #88	@ 0x58
 8005c2c:	da0c      	bge.n	8005c48 <__swhatbuf_r+0x2c>
 8005c2e:	89a3      	ldrh	r3, [r4, #12]
 8005c30:	2100      	movs	r1, #0
 8005c32:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005c36:	bf14      	ite	ne
 8005c38:	2340      	movne	r3, #64	@ 0x40
 8005c3a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005c3e:	2000      	movs	r0, #0
 8005c40:	6031      	str	r1, [r6, #0]
 8005c42:	602b      	str	r3, [r5, #0]
 8005c44:	b016      	add	sp, #88	@ 0x58
 8005c46:	bd70      	pop	{r4, r5, r6, pc}
 8005c48:	466a      	mov	r2, sp
 8005c4a:	f000 f89d 	bl	8005d88 <_fstat_r>
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	dbed      	blt.n	8005c2e <__swhatbuf_r+0x12>
 8005c52:	9901      	ldr	r1, [sp, #4]
 8005c54:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005c58:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005c5c:	4259      	negs	r1, r3
 8005c5e:	4159      	adcs	r1, r3
 8005c60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c64:	e7eb      	b.n	8005c3e <__swhatbuf_r+0x22>

08005c66 <__smakebuf_r>:
 8005c66:	898b      	ldrh	r3, [r1, #12]
 8005c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c6a:	079d      	lsls	r5, r3, #30
 8005c6c:	4606      	mov	r6, r0
 8005c6e:	460c      	mov	r4, r1
 8005c70:	d507      	bpl.n	8005c82 <__smakebuf_r+0x1c>
 8005c72:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c76:	6023      	str	r3, [r4, #0]
 8005c78:	6123      	str	r3, [r4, #16]
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	6163      	str	r3, [r4, #20]
 8005c7e:	b003      	add	sp, #12
 8005c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c82:	466a      	mov	r2, sp
 8005c84:	ab01      	add	r3, sp, #4
 8005c86:	f7ff ffc9 	bl	8005c1c <__swhatbuf_r>
 8005c8a:	9f00      	ldr	r7, [sp, #0]
 8005c8c:	4605      	mov	r5, r0
 8005c8e:	4639      	mov	r1, r7
 8005c90:	4630      	mov	r0, r6
 8005c92:	f7fe ff97 	bl	8004bc4 <_malloc_r>
 8005c96:	b948      	cbnz	r0, 8005cac <__smakebuf_r+0x46>
 8005c98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c9c:	059a      	lsls	r2, r3, #22
 8005c9e:	d4ee      	bmi.n	8005c7e <__smakebuf_r+0x18>
 8005ca0:	f023 0303 	bic.w	r3, r3, #3
 8005ca4:	f043 0302 	orr.w	r3, r3, #2
 8005ca8:	81a3      	strh	r3, [r4, #12]
 8005caa:	e7e2      	b.n	8005c72 <__smakebuf_r+0xc>
 8005cac:	89a3      	ldrh	r3, [r4, #12]
 8005cae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cb6:	81a3      	strh	r3, [r4, #12]
 8005cb8:	9b01      	ldr	r3, [sp, #4]
 8005cba:	6020      	str	r0, [r4, #0]
 8005cbc:	b15b      	cbz	r3, 8005cd6 <__smakebuf_r+0x70>
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cc4:	f000 f83c 	bl	8005d40 <_isatty_r>
 8005cc8:	b128      	cbz	r0, 8005cd6 <__smakebuf_r+0x70>
 8005cca:	89a3      	ldrh	r3, [r4, #12]
 8005ccc:	f023 0303 	bic.w	r3, r3, #3
 8005cd0:	f043 0301 	orr.w	r3, r3, #1
 8005cd4:	81a3      	strh	r3, [r4, #12]
 8005cd6:	89a3      	ldrh	r3, [r4, #12]
 8005cd8:	431d      	orrs	r5, r3
 8005cda:	81a5      	strh	r5, [r4, #12]
 8005cdc:	e7cf      	b.n	8005c7e <__smakebuf_r+0x18>

08005cde <_raise_r>:
 8005cde:	291f      	cmp	r1, #31
 8005ce0:	b538      	push	{r3, r4, r5, lr}
 8005ce2:	4605      	mov	r5, r0
 8005ce4:	460c      	mov	r4, r1
 8005ce6:	d904      	bls.n	8005cf2 <_raise_r+0x14>
 8005ce8:	2316      	movs	r3, #22
 8005cea:	6003      	str	r3, [r0, #0]
 8005cec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cf0:	bd38      	pop	{r3, r4, r5, pc}
 8005cf2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005cf4:	b112      	cbz	r2, 8005cfc <_raise_r+0x1e>
 8005cf6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005cfa:	b94b      	cbnz	r3, 8005d10 <_raise_r+0x32>
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	f000 f841 	bl	8005d84 <_getpid_r>
 8005d02:	4622      	mov	r2, r4
 8005d04:	4601      	mov	r1, r0
 8005d06:	4628      	mov	r0, r5
 8005d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d0c:	f000 b828 	b.w	8005d60 <_kill_r>
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d00a      	beq.n	8005d2a <_raise_r+0x4c>
 8005d14:	1c59      	adds	r1, r3, #1
 8005d16:	d103      	bne.n	8005d20 <_raise_r+0x42>
 8005d18:	2316      	movs	r3, #22
 8005d1a:	6003      	str	r3, [r0, #0]
 8005d1c:	2001      	movs	r0, #1
 8005d1e:	e7e7      	b.n	8005cf0 <_raise_r+0x12>
 8005d20:	2100      	movs	r1, #0
 8005d22:	4620      	mov	r0, r4
 8005d24:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005d28:	4798      	blx	r3
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	e7e0      	b.n	8005cf0 <_raise_r+0x12>
	...

08005d30 <raise>:
 8005d30:	4b02      	ldr	r3, [pc, #8]	@ (8005d3c <raise+0xc>)
 8005d32:	4601      	mov	r1, r0
 8005d34:	6818      	ldr	r0, [r3, #0]
 8005d36:	f7ff bfd2 	b.w	8005cde <_raise_r>
 8005d3a:	bf00      	nop
 8005d3c:	20000018 	.word	0x20000018

08005d40 <_isatty_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	2300      	movs	r3, #0
 8005d44:	4d05      	ldr	r5, [pc, #20]	@ (8005d5c <_isatty_r+0x1c>)
 8005d46:	4604      	mov	r4, r0
 8005d48:	4608      	mov	r0, r1
 8005d4a:	602b      	str	r3, [r5, #0]
 8005d4c:	f7fb fc65 	bl	800161a <_isatty>
 8005d50:	1c43      	adds	r3, r0, #1
 8005d52:	d102      	bne.n	8005d5a <_isatty_r+0x1a>
 8005d54:	682b      	ldr	r3, [r5, #0]
 8005d56:	b103      	cbz	r3, 8005d5a <_isatty_r+0x1a>
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	bd38      	pop	{r3, r4, r5, pc}
 8005d5c:	20000374 	.word	0x20000374

08005d60 <_kill_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	2300      	movs	r3, #0
 8005d64:	4d06      	ldr	r5, [pc, #24]	@ (8005d80 <_kill_r+0x20>)
 8005d66:	4604      	mov	r4, r0
 8005d68:	4608      	mov	r0, r1
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	602b      	str	r3, [r5, #0]
 8005d6e:	f7fb fbe6 	bl	800153e <_kill>
 8005d72:	1c43      	adds	r3, r0, #1
 8005d74:	d102      	bne.n	8005d7c <_kill_r+0x1c>
 8005d76:	682b      	ldr	r3, [r5, #0]
 8005d78:	b103      	cbz	r3, 8005d7c <_kill_r+0x1c>
 8005d7a:	6023      	str	r3, [r4, #0]
 8005d7c:	bd38      	pop	{r3, r4, r5, pc}
 8005d7e:	bf00      	nop
 8005d80:	20000374 	.word	0x20000374

08005d84 <_getpid_r>:
 8005d84:	f7fb bbd4 	b.w	8001530 <_getpid>

08005d88 <_fstat_r>:
 8005d88:	b538      	push	{r3, r4, r5, lr}
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	4d06      	ldr	r5, [pc, #24]	@ (8005da8 <_fstat_r+0x20>)
 8005d8e:	4604      	mov	r4, r0
 8005d90:	4608      	mov	r0, r1
 8005d92:	4611      	mov	r1, r2
 8005d94:	602b      	str	r3, [r5, #0]
 8005d96:	f7fb fc31 	bl	80015fc <_fstat>
 8005d9a:	1c43      	adds	r3, r0, #1
 8005d9c:	d102      	bne.n	8005da4 <_fstat_r+0x1c>
 8005d9e:	682b      	ldr	r3, [r5, #0]
 8005da0:	b103      	cbz	r3, 8005da4 <_fstat_r+0x1c>
 8005da2:	6023      	str	r3, [r4, #0]
 8005da4:	bd38      	pop	{r3, r4, r5, pc}
 8005da6:	bf00      	nop
 8005da8:	20000374 	.word	0x20000374

08005dac <_init>:
 8005dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dae:	bf00      	nop
 8005db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005db2:	bc08      	pop	{r3}
 8005db4:	469e      	mov	lr, r3
 8005db6:	4770      	bx	lr

08005db8 <_fini>:
 8005db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dba:	bf00      	nop
 8005dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dbe:	bc08      	pop	{r3}
 8005dc0:	469e      	mov	lr, r3
 8005dc2:	4770      	bx	lr
