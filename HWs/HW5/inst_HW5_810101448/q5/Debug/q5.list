
q5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a2c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08005b40  08005b40  00006b40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ef4  08005ef4  000071d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005ef4  08005ef4  00006ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005efc  08005efc  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005efc  08005efc  00006efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f00  08005f00  00006f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08005f04  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  200001d4  080060d8  000071d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  080060d8  000073a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000779e  00000000  00000000  000071fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017a2  00000000  00000000  0000e99b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  00010140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000724  00000000  00000000  00010ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013a17  00000000  00000000  000111d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008937  00000000  00000000  00024beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006cb73  00000000  00000000  0002d522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009a095  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a70  00000000  00000000  0009a0d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0009db48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005b24 	.word	0x08005b24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08005b24 	.word	0x08005b24

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <LCD_EnablePulse>:
#define D5_PIN GPIO_PIN_11
#define D6_PIN GPIO_PIN_12
#define D7_PIN GPIO_PIN_13
#define LCD_GPIO GPIOB

static void LCD_EnablePulse(void) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_GPIO, E_PIN, GPIO_PIN_SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	2104      	movs	r1, #4
 80010d8:	4807      	ldr	r0, [pc, #28]	@ (80010f8 <LCD_EnablePulse+0x28>)
 80010da:	f000 fed1 	bl	8001e80 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80010de:	2001      	movs	r0, #1
 80010e0:	f000 fc20 	bl	8001924 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_GPIO, E_PIN, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2104      	movs	r1, #4
 80010e8:	4803      	ldr	r0, [pc, #12]	@ (80010f8 <LCD_EnablePulse+0x28>)
 80010ea:	f000 fec9 	bl	8001e80 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f000 fc18 	bl	8001924 <HAL_Delay>
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40010c00 	.word	0x40010c00

080010fc <LCD_Send4Bits>:

static void LCD_Send4Bits(uint8_t data) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_GPIO, D4_PIN, (data >> 0) & 0x01);
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	b2db      	uxtb	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001114:	4815      	ldr	r0, [pc, #84]	@ (800116c <LCD_Send4Bits+0x70>)
 8001116:	f000 feb3 	bl	8001e80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_GPIO, D5_PIN, (data >> 1) & 0x01);
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	085b      	lsrs	r3, r3, #1
 800111e:	b2db      	uxtb	r3, r3
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800112c:	480f      	ldr	r0, [pc, #60]	@ (800116c <LCD_Send4Bits+0x70>)
 800112e:	f000 fea7 	bl	8001e80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_GPIO, D6_PIN, (data >> 2) & 0x01);
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	b2db      	uxtb	r3, r3
 800113e:	461a      	mov	r2, r3
 8001140:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001144:	4809      	ldr	r0, [pc, #36]	@ (800116c <LCD_Send4Bits+0x70>)
 8001146:	f000 fe9b 	bl	8001e80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_GPIO, D7_PIN, (data >> 3) & 0x01);
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	08db      	lsrs	r3, r3, #3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	b2db      	uxtb	r3, r3
 8001156:	461a      	mov	r2, r3
 8001158:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800115c:	4803      	ldr	r0, [pc, #12]	@ (800116c <LCD_Send4Bits+0x70>)
 800115e:	f000 fe8f 	bl	8001e80 <HAL_GPIO_WritePin>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40010c00 	.word	0x40010c00

08001170 <LCD_SendCommand>:

static void LCD_SendCommand(uint8_t cmd) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_GPIO, RS_PIN, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	2102      	movs	r1, #2
 800117e:	480d      	ldr	r0, [pc, #52]	@ (80011b4 <LCD_SendCommand+0x44>)
 8001180:	f000 fe7e 	bl	8001e80 <HAL_GPIO_WritePin>
    LCD_Send4Bits(cmd >> 4);
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	091b      	lsrs	r3, r3, #4
 8001188:	b2db      	uxtb	r3, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ffb6 	bl	80010fc <LCD_Send4Bits>
    LCD_EnablePulse();
 8001190:	f7ff ff9e 	bl	80010d0 <LCD_EnablePulse>
    LCD_Send4Bits(cmd & 0x0F);
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	b2db      	uxtb	r3, r3
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ffad 	bl	80010fc <LCD_Send4Bits>
    LCD_EnablePulse();
 80011a2:	f7ff ff95 	bl	80010d0 <LCD_EnablePulse>
    HAL_Delay(2);
 80011a6:	2002      	movs	r0, #2
 80011a8:	f000 fbbc 	bl	8001924 <HAL_Delay>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40010c00 	.word	0x40010c00

080011b8 <LCD_SendData>:

static void LCD_SendData(uint8_t data) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_GPIO, RS_PIN, GPIO_PIN_SET);
 80011c2:	2201      	movs	r2, #1
 80011c4:	2102      	movs	r1, #2
 80011c6:	480d      	ldr	r0, [pc, #52]	@ (80011fc <LCD_SendData+0x44>)
 80011c8:	f000 fe5a 	bl	8001e80 <HAL_GPIO_WritePin>
    LCD_Send4Bits(data >> 4);
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	091b      	lsrs	r3, r3, #4
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff92 	bl	80010fc <LCD_Send4Bits>
    LCD_EnablePulse();
 80011d8:	f7ff ff7a 	bl	80010d0 <LCD_EnablePulse>
    LCD_Send4Bits(data & 0x0F);
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff89 	bl	80010fc <LCD_Send4Bits>
    LCD_EnablePulse();
 80011ea:	f7ff ff71 	bl	80010d0 <LCD_EnablePulse>
    HAL_Delay(1);
 80011ee:	2001      	movs	r0, #1
 80011f0:	f000 fb98 	bl	8001924 <HAL_Delay>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40010c00 	.word	0x40010c00

08001200 <LCD_Init>:

void LCD_Init(void) {
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 8001204:	2032      	movs	r0, #50	@ 0x32
 8001206:	f000 fb8d 	bl	8001924 <HAL_Delay>
    LCD_Send4Bits(0x03); LCD_EnablePulse(); HAL_Delay(5);
 800120a:	2003      	movs	r0, #3
 800120c:	f7ff ff76 	bl	80010fc <LCD_Send4Bits>
 8001210:	f7ff ff5e 	bl	80010d0 <LCD_EnablePulse>
 8001214:	2005      	movs	r0, #5
 8001216:	f000 fb85 	bl	8001924 <HAL_Delay>
    LCD_Send4Bits(0x03); LCD_EnablePulse(); HAL_Delay(5);
 800121a:	2003      	movs	r0, #3
 800121c:	f7ff ff6e 	bl	80010fc <LCD_Send4Bits>
 8001220:	f7ff ff56 	bl	80010d0 <LCD_EnablePulse>
 8001224:	2005      	movs	r0, #5
 8001226:	f000 fb7d 	bl	8001924 <HAL_Delay>
    LCD_Send4Bits(0x03); LCD_EnablePulse(); HAL_Delay(5);
 800122a:	2003      	movs	r0, #3
 800122c:	f7ff ff66 	bl	80010fc <LCD_Send4Bits>
 8001230:	f7ff ff4e 	bl	80010d0 <LCD_EnablePulse>
 8001234:	2005      	movs	r0, #5
 8001236:	f000 fb75 	bl	8001924 <HAL_Delay>
    LCD_Send4Bits(0x02); LCD_EnablePulse(); HAL_Delay(1);
 800123a:	2002      	movs	r0, #2
 800123c:	f7ff ff5e 	bl	80010fc <LCD_Send4Bits>
 8001240:	f7ff ff46 	bl	80010d0 <LCD_EnablePulse>
 8001244:	2001      	movs	r0, #1
 8001246:	f000 fb6d 	bl	8001924 <HAL_Delay>

    LCD_SendCommand(0x28); // 4-bit, 2-line
 800124a:	2028      	movs	r0, #40	@ 0x28
 800124c:	f7ff ff90 	bl	8001170 <LCD_SendCommand>
    LCD_SendCommand(0x0C); // Display on, cursor off
 8001250:	200c      	movs	r0, #12
 8001252:	f7ff ff8d 	bl	8001170 <LCD_SendCommand>
    LCD_SendCommand(0x06); // Entry mode
 8001256:	2006      	movs	r0, #6
 8001258:	f7ff ff8a 	bl	8001170 <LCD_SendCommand>
    LCD_SendCommand(0x01); // Clear display
 800125c:	2001      	movs	r0, #1
 800125e:	f7ff ff87 	bl	8001170 <LCD_SendCommand>
    HAL_Delay(2);
 8001262:	2002      	movs	r0, #2
 8001264:	f000 fb5e 	bl	8001924 <HAL_Delay>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <LCD_SetCursor>:
void LCD_Clear(void) {
    LCD_SendCommand(0x01);
    HAL_Delay(2);
}

void LCD_SetCursor(uint8_t col, uint8_t row) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	460a      	mov	r2, r1
 8001276:	71fb      	strb	r3, [r7, #7]
 8001278:	4613      	mov	r3, r2
 800127a:	71bb      	strb	r3, [r7, #6]
    uint8_t row_offsets[] = {0x00, 0x40};
 800127c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001280:	81bb      	strh	r3, [r7, #12]
    LCD_SendCommand(0x80 | (col + row_offsets[row]));
 8001282:	79bb      	ldrb	r3, [r7, #6]
 8001284:	3310      	adds	r3, #16
 8001286:	443b      	add	r3, r7
 8001288:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	4413      	add	r3, r2
 8001290:	b2db      	uxtb	r3, r3
 8001292:	b25b      	sxtb	r3, r3
 8001294:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001298:	b25b      	sxtb	r3, r3
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff67 	bl	8001170 <LCD_SendCommand>
}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <LCD_Print>:

void LCD_Print(char* str) {
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
    while (*str) {
 80012b2:	e006      	b.n	80012c2 <LCD_Print+0x18>
        LCD_SendData(*str++);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	1c5a      	adds	r2, r3, #1
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff7b 	bl	80011b8 <LCD_SendData>
    while (*str) {
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f4      	bne.n	80012b4 <LCD_Print+0xa>
    }
}
 80012ca:	bf00      	nop
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_GPIO_EXTI_Callback>:
static void MX_TIM1_Init(void);



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_0 )//|| GPIO_Pin == GPIO_PIN_1)
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d104      	bne.n	80012ee <HAL_GPIO_EXTI_Callback+0x1a>
    {
        pulse_count++;
 80012e4:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <HAL_GPIO_EXTI_Callback+0x24>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	3301      	adds	r3, #1
 80012ea:	4a03      	ldr	r2, [pc, #12]	@ (80012f8 <HAL_GPIO_EXTI_Callback+0x24>)
 80012ec:	6013      	str	r3, [r2, #0]
    }
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	200001f0 	.word	0x200001f0

080012fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a28      	ldr	r2, [pc, #160]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d149      	bne.n	80013a2 <HAL_TIM_PeriodElapsedCallback+0xa6>
    {

        motor_speed_rpm = (pulse_count * 60) / PULSES_PER_REV;
 800130e:	4b28      	ldr	r3, [pc, #160]	@ (80013b0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4613      	mov	r3, r2
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	1a9b      	subs	r3, r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	461a      	mov	r2, r3
 800131c:	4b25      	ldr	r3, [pc, #148]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800131e:	fba3 2302 	umull	r2, r3, r3, r2
 8001322:	08db      	lsrs	r3, r3, #3
 8001324:	4a24      	ldr	r2, [pc, #144]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001326:	6013      	str	r3, [r2, #0]

        motor_angle = ((float)pulse_count / PULSES_PER_REV) * 360.0 ;
 8001328:	4b21      	ldr	r3, [pc, #132]	@ (80013b0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fcb1 	bl	8000c94 <__aeabi_ui2f>
 8001332:	4603      	mov	r3, r0
 8001334:	4921      	ldr	r1, [pc, #132]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fdb8 	bl	8000eac <__aeabi_fdiv>
 800133c:	4603      	mov	r3, r0
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f872 	bl	8000428 <__aeabi_f2d>
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	4b1d      	ldr	r3, [pc, #116]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800134a:	f7ff f8c5 	bl	80004d8 <__aeabi_dmul>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4610      	mov	r0, r2
 8001354:	4619      	mov	r1, r3
 8001356:	f7ff fb97 	bl	8000a88 <__aeabi_d2f>
 800135a:	4603      	mov	r3, r0
 800135c:	4a19      	ldr	r2, [pc, #100]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800135e:	6013      	str	r3, [r2, #0]




        if (motor_angle < 101.0)
 8001360:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4918      	ldr	r1, [pc, #96]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fe8a 	bl	8001080 <__aeabi_fcmplt>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d005      	beq.n	800137e <HAL_TIM_PeriodElapsedCallback+0x82>
              {
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001378:	4814      	ldr	r0, [pc, #80]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800137a:	f000 fd81 	bl	8001e80 <HAL_GPIO_WritePin>
               }
        if (motor_angle > 250.0)
 800137e:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4913      	ldr	r1, [pc, #76]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fe99 	bl	80010bc <__aeabi_fcmpgt>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d005      	beq.n	800139c <HAL_TIM_PeriodElapsedCallback+0xa0>
                {
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001396:	480d      	ldr	r0, [pc, #52]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001398:	f000 fd72 	bl	8001e80 <HAL_GPIO_WritePin>
                }


       // motor_angle = fmod(motor_angle, 360.0);

        pulse_count = 0;
 800139c:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
    }
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40012c00 	.word	0x40012c00
 80013b0:	200001f0 	.word	0x200001f0
 80013b4:	07a44c6b 	.word	0x07a44c6b
 80013b8:	200001f4 	.word	0x200001f4
 80013bc:	43860000 	.word	0x43860000
 80013c0:	40768000 	.word	0x40768000
 80013c4:	200001f8 	.word	0x200001f8
 80013c8:	42ca0000 	.word	0x42ca0000
 80013cc:	40010800 	.word	0x40010800
 80013d0:	437a0000 	.word	0x437a0000

080013d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013da:	f000 fa41 	bl	8001860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013de:	f000 f843 	bl	8001468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e2:	f000 f8d3 	bl	800158c <MX_GPIO_Init>
  MX_TIM1_Init();
 80013e6:	f000 f87f 	bl	80014e8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
LCD_Init();
 80013ea:	f7ff ff09 	bl	8001200 <LCD_Init>

  /* USER CODE END 2 */
LCD_SetCursor(0,0);
 80013ee:	2100      	movs	r1, #0
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7ff ff3b 	bl	800126c <LCD_SetCursor>

HAL_TIM_Base_Start_IT(&htim1);
 80013f6:	4816      	ldr	r0, [pc, #88]	@ (8001450 <main+0x7c>)
 80013f8:	f001 f985 	bl	8002706 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    LCD_SetCursor(0, 0);
 80013fc:	2100      	movs	r1, #0
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff ff34 	bl	800126c <LCD_SetCursor>
      //snprintf(buffer, sizeof(buffer), "Speed:%lu RPM", motor_speed_rpm);
   // snprintf(buffer, sizeof(buffer), "Speed:%lu RPM", motor_speed_rpm);
    //LCD_Print(buffer);
    LCD_SetCursor(0, 0);
 8001404:	2100      	movs	r1, #0
 8001406:	2000      	movs	r0, #0
 8001408:	f7ff ff30 	bl	800126c <LCD_SetCursor>
                      snprintf(buffer, sizeof(buffer), "Speed:%lu RPM", motor_speed_rpm);
 800140c:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <main+0x80>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a11      	ldr	r2, [pc, #68]	@ (8001458 <main+0x84>)
 8001412:	2110      	movs	r1, #16
 8001414:	4811      	ldr	r0, [pc, #68]	@ (800145c <main+0x88>)
 8001416:	f002 f927 	bl	8003668 <sniprintf>
                      LCD_Print(buffer);
 800141a:	4810      	ldr	r0, [pc, #64]	@ (800145c <main+0x88>)
 800141c:	f7ff ff45 	bl	80012aa <LCD_Print>


      LCD_SetCursor(0, 1);
 8001420:	2101      	movs	r1, #1
 8001422:	2000      	movs	r0, #0
 8001424:	f7ff ff22 	bl	800126c <LCD_SetCursor>
      //snprintf(buffer, sizeof(buffer), "Angle:%0.1f deg", motor_angle);
      snprintf(buffer, sizeof(buffer), "Angle:%0.1f deg", motor_angle);
 8001428:	4b0d      	ldr	r3, [pc, #52]	@ (8001460 <main+0x8c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7fe fffb 	bl	8000428 <__aeabi_f2d>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	e9cd 2300 	strd	r2, r3, [sp]
 800143a:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <main+0x90>)
 800143c:	2110      	movs	r1, #16
 800143e:	4807      	ldr	r0, [pc, #28]	@ (800145c <main+0x88>)
 8001440:	f002 f912 	bl	8003668 <sniprintf>
      LCD_Print(buffer);
 8001444:	4805      	ldr	r0, [pc, #20]	@ (800145c <main+0x88>)
 8001446:	f7ff ff30 	bl	80012aa <LCD_Print>
    LCD_SetCursor(0, 0);
 800144a:	bf00      	nop
 800144c:	e7d6      	b.n	80013fc <main+0x28>
 800144e:	bf00      	nop
 8001450:	2000020c 	.word	0x2000020c
 8001454:	200001f4 	.word	0x200001f4
 8001458:	08005b40 	.word	0x08005b40
 800145c:	200001fc 	.word	0x200001fc
 8001460:	200001f8 	.word	0x200001f8
 8001464:	08005b50 	.word	0x08005b50

08001468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b090      	sub	sp, #64	@ 0x40
 800146c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146e:	f107 0318 	add.w	r3, r7, #24
 8001472:	2228      	movs	r2, #40	@ 0x28
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f002 f9ee 	bl	8003858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800148a:	2302      	movs	r3, #2
 800148c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800148e:	2301      	movs	r3, #1
 8001490:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001492:	2310      	movs	r3, #16
 8001494:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001496:	2302      	movs	r3, #2
 8001498:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800149a:	2300      	movs	r3, #0
 800149c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 800149e:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 80014a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a4:	f107 0318 	add.w	r3, r7, #24
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 fd19 	bl	8001ee0 <HAL_RCC_OscConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80014b4:	f000 f8d8 	bl	8001668 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b8:	230f      	movs	r3, #15
 80014ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014bc:	2302      	movs	r3, #2
 80014be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80014c0:	2380      	movs	r3, #128	@ 0x80
 80014c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 ff87 	bl	80023e4 <HAL_RCC_ClockConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80014dc:	f000 f8c4 	bl	8001668 <Error_Handler>
  }
}
 80014e0:	bf00      	nop
 80014e2:	3740      	adds	r7, #64	@ 0x40
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fc:	463b      	mov	r3, r7
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001504:	4b1f      	ldr	r3, [pc, #124]	@ (8001584 <MX_TIM1_Init+0x9c>)
 8001506:	4a20      	ldr	r2, [pc, #128]	@ (8001588 <MX_TIM1_Init+0xa0>)
 8001508:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 800150a:	4b1e      	ldr	r3, [pc, #120]	@ (8001584 <MX_TIM1_Init+0x9c>)
 800150c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001510:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001512:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <MX_TIM1_Init+0x9c>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8001518:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <MX_TIM1_Init+0x9c>)
 800151a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800151e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001520:	4b18      	ldr	r3, [pc, #96]	@ (8001584 <MX_TIM1_Init+0x9c>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001526:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <MX_TIM1_Init+0x9c>)
 8001528:	2200      	movs	r2, #0
 800152a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152c:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <MX_TIM1_Init+0x9c>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001532:	4814      	ldr	r0, [pc, #80]	@ (8001584 <MX_TIM1_Init+0x9c>)
 8001534:	f001 f8bc 	bl	80026b0 <HAL_TIM_Base_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800153e:	f000 f893 	bl	8001668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001542:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001546:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001548:	f107 0308 	add.w	r3, r7, #8
 800154c:	4619      	mov	r1, r3
 800154e:	480d      	ldr	r0, [pc, #52]	@ (8001584 <MX_TIM1_Init+0x9c>)
 8001550:	f001 fa04 	bl	800295c <HAL_TIM_ConfigClockSource>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800155a:	f000 f885 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001566:	463b      	mov	r3, r7
 8001568:	4619      	mov	r1, r3
 800156a:	4806      	ldr	r0, [pc, #24]	@ (8001584 <MX_TIM1_Init+0x9c>)
 800156c:	f001 fbcc 	bl	8002d08 <HAL_TIMEx_MasterConfigSynchronization>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001576:	f000 f877 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000020c 	.word	0x2000020c
 8001588:	40012c00 	.word	0x40012c00

0800158c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001658 <MX_GPIO_Init+0xcc>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a2c      	ldr	r2, [pc, #176]	@ (8001658 <MX_GPIO_Init+0xcc>)
 80015a6:	f043 0304 	orr.w	r3, r3, #4
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001658 <MX_GPIO_Init+0xcc>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b8:	4b27      	ldr	r3, [pc, #156]	@ (8001658 <MX_GPIO_Init+0xcc>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a26      	ldr	r2, [pc, #152]	@ (8001658 <MX_GPIO_Init+0xcc>)
 80015be:	f043 0308 	orr.w	r3, r3, #8
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b24      	ldr	r3, [pc, #144]	@ (8001658 <MX_GPIO_Init+0xcc>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0308 	and.w	r3, r3, #8
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80015d0:	2200      	movs	r2, #0
 80015d2:	f643 4106 	movw	r1, #15366	@ 0x3c06
 80015d6:	4821      	ldr	r0, [pc, #132]	@ (800165c <MX_GPIO_Init+0xd0>)
 80015d8:	f000 fc52 	bl	8001e80 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80015dc:	2303      	movs	r3, #3
 80015de:	60bb      	str	r3, [r7, #8]
     GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001660 <MX_GPIO_Init+0xd4>)
 80015e2:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	613b      	str	r3, [r7, #16]
     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	4619      	mov	r1, r3
 80015ee:	481d      	ldr	r0, [pc, #116]	@ (8001664 <MX_GPIO_Init+0xd8>)
 80015f0:	f000 faca 	bl	8001b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80015f4:	f643 4306 	movw	r3, #15366	@ 0x3c06
 80015f8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2302      	movs	r3, #2
 8001604:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	f107 0308 	add.w	r3, r7, #8
 800160a:	4619      	mov	r1, r3
 800160c:	4813      	ldr	r0, [pc, #76]	@ (800165c <MX_GPIO_Init+0xd0>)
 800160e:	f000 fabb 	bl	8001b88 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001612:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001616:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001618:	2301      	movs	r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2302      	movs	r3, #2
 8001622:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001624:	f107 0308 	add.w	r3, r7, #8
 8001628:	4619      	mov	r1, r3
 800162a:	480e      	ldr	r0, [pc, #56]	@ (8001664 <MX_GPIO_Init+0xd8>)
 800162c:	f000 faac 	bl	8001b88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001630:	2200      	movs	r2, #0
 8001632:	2100      	movs	r1, #0
 8001634:	2006      	movs	r0, #6
 8001636:	f000 fa70 	bl	8001b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800163a:	2006      	movs	r0, #6
 800163c:	f000 fa89 	bl	8001b52 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	2007      	movs	r0, #7
 8001646:	f000 fa68 	bl	8001b1a <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800164a:	2007      	movs	r0, #7
 800164c:	f000 fa81 	bl	8001b52 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001650:	bf00      	nop
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40021000 	.word	0x40021000
 800165c:	40010c00 	.word	0x40010c00
 8001660:	10110000 	.word	0x10110000
 8001664:	40010800 	.word	0x40010800

08001668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800166c:	b672      	cpsid	i
}
 800166e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <Error_Handler+0x8>

08001674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800167a:	4b15      	ldr	r3, [pc, #84]	@ (80016d0 <HAL_MspInit+0x5c>)
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	4a14      	ldr	r2, [pc, #80]	@ (80016d0 <HAL_MspInit+0x5c>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6193      	str	r3, [r2, #24]
 8001686:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <HAL_MspInit+0x5c>)
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <HAL_MspInit+0x5c>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	4a0e      	ldr	r2, [pc, #56]	@ (80016d0 <HAL_MspInit+0x5c>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800169c:	61d3      	str	r3, [r2, #28]
 800169e:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <HAL_MspInit+0x5c>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80016aa:	4b0a      	ldr	r3, [pc, #40]	@ (80016d4 <HAL_MspInit+0x60>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	4a04      	ldr	r2, [pc, #16]	@ (80016d4 <HAL_MspInit+0x60>)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c6:	bf00      	nop
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40010000 	.word	0x40010000

080016d8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0d      	ldr	r2, [pc, #52]	@ (800171c <HAL_TIM_Base_MspInit+0x44>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d113      	bne.n	8001712 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001720 <HAL_TIM_Base_MspInit+0x48>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001720 <HAL_TIM_Base_MspInit+0x48>)
 80016f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016f4:	6193      	str	r3, [r2, #24]
 80016f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <HAL_TIM_Base_MspInit+0x48>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	2019      	movs	r0, #25
 8001708:	f000 fa07 	bl	8001b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800170c:	2019      	movs	r0, #25
 800170e:	f000 fa20 	bl	8001b52 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40012c00 	.word	0x40012c00
 8001720:	40021000 	.word	0x40021000

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <NMI_Handler+0x4>

0800172c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <HardFault_Handler+0x4>

08001734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <MemManage_Handler+0x4>

0800173c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <UsageFault_Handler+0x4>

0800174c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001774:	f000 f8ba 	bl	80018ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}

0800177c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001780:	2001      	movs	r0, #1
 8001782:	f000 fb95 	bl	8001eb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}

0800178a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800178e:	2002      	movs	r0, #2
 8001790:	f000 fb8e 	bl	8001eb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}

08001798 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800179c:	4802      	ldr	r0, [pc, #8]	@ (80017a8 <TIM1_UP_IRQHandler+0x10>)
 800179e:	f000 ffd5 	bl	800274c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	2000020c 	.word	0x2000020c

080017ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80017b0:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <SystemInit+0x5c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a14      	ldr	r2, [pc, #80]	@ (8001808 <SystemInit+0x5c>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80017bc:	4b12      	ldr	r3, [pc, #72]	@ (8001808 <SystemInit+0x5c>)
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	4911      	ldr	r1, [pc, #68]	@ (8001808 <SystemInit+0x5c>)
 80017c2:	4b12      	ldr	r3, [pc, #72]	@ (800180c <SystemInit+0x60>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001808 <SystemInit+0x5c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001808 <SystemInit+0x5c>)
 80017ce:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 80017d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017d6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001808 <SystemInit+0x5c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001808 <SystemInit+0x5c>)
 80017de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017e2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <SystemInit+0x5c>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	4a07      	ldr	r2, [pc, #28]	@ (8001808 <SystemInit+0x5c>)
 80017ea:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 80017ee:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80017f0:	4b05      	ldr	r3, [pc, #20]	@ (8001808 <SystemInit+0x5c>)
 80017f2:	f44f 021f 	mov.w	r2, #10420224	@ 0x9f0000
 80017f6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80017f8:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <SystemInit+0x64>)
 80017fa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017fe:	609a      	str	r2, [r3, #8]
#endif 
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	40021000 	.word	0x40021000
 800180c:	f8ff0000 	.word	0xf8ff0000
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001814:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001816:	e003      	b.n	8001820 <LoopCopyDataInit>

08001818 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001818:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800181a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800181c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800181e:	3104      	adds	r1, #4

08001820 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001820:	480a      	ldr	r0, [pc, #40]	@ (800184c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001822:	4b0b      	ldr	r3, [pc, #44]	@ (8001850 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001824:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001826:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001828:	d3f6      	bcc.n	8001818 <CopyDataInit>
  ldr r2, =_sbss
 800182a:	4a0a      	ldr	r2, [pc, #40]	@ (8001854 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800182c:	e002      	b.n	8001834 <LoopFillZerobss>

0800182e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001830:	f842 3b04 	str.w	r3, [r2], #4

08001834 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001836:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001838:	d3f9      	bcc.n	800182e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800183a:	f7ff ffb7 	bl	80017ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800183e:	f002 f813 	bl	8003868 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001842:	f7ff fdc7 	bl	80013d4 <main>
  bx lr
 8001846:	4770      	bx	lr
  ldr r3, =_sidata
 8001848:	08005f04 	.word	0x08005f04
  ldr r0, =_sdata
 800184c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001850:	200001d4 	.word	0x200001d4
  ldr r2, =_sbss
 8001854:	200001d4 	.word	0x200001d4
  ldr r3, = _ebss
 8001858:	200003a0 	.word	0x200003a0

0800185c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800185c:	e7fe      	b.n	800185c <ADC1_2_IRQHandler>
	...

08001860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001864:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <HAL_Init+0x28>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a07      	ldr	r2, [pc, #28]	@ (8001888 <HAL_Init+0x28>)
 800186a:	f043 0310 	orr.w	r3, r3, #16
 800186e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001870:	2003      	movs	r0, #3
 8001872:	f000 f947 	bl	8001b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001876:	200f      	movs	r0, #15
 8001878:	f000 f808 	bl	800188c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800187c:	f7ff fefa 	bl	8001674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40022000 	.word	0x40022000

0800188c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001894:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <HAL_InitTick+0x54>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <HAL_InitTick+0x58>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	4619      	mov	r1, r3
 800189e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 f95f 	bl	8001b6e <HAL_SYSTICK_Config>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00e      	b.n	80018d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b0f      	cmp	r3, #15
 80018be:	d80a      	bhi.n	80018d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c0:	2200      	movs	r2, #0
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018c8:	f000 f927 	bl	8001b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018cc:	4a06      	ldr	r2, [pc, #24]	@ (80018e8 <HAL_InitTick+0x5c>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e000      	b.n	80018d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000000 	.word	0x20000000
 80018e4:	20000008 	.word	0x20000008
 80018e8:	20000004 	.word	0x20000004

080018ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f0:	4b05      	ldr	r3, [pc, #20]	@ (8001908 <HAL_IncTick+0x1c>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b05      	ldr	r3, [pc, #20]	@ (800190c <HAL_IncTick+0x20>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	4a03      	ldr	r2, [pc, #12]	@ (800190c <HAL_IncTick+0x20>)
 80018fe:	6013      	str	r3, [r2, #0]
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	20000008 	.word	0x20000008
 800190c:	2000024c 	.word	0x2000024c

08001910 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return uwTick;
 8001914:	4b02      	ldr	r3, [pc, #8]	@ (8001920 <HAL_GetTick+0x10>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	2000024c 	.word	0x2000024c

08001924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800192c:	f7ff fff0 	bl	8001910 <HAL_GetTick>
 8001930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800193c:	d005      	beq.n	800194a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193e:	4b0a      	ldr	r3, [pc, #40]	@ (8001968 <HAL_Delay+0x44>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800194a:	bf00      	nop
 800194c:	f7ff ffe0 	bl	8001910 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	429a      	cmp	r2, r3
 800195a:	d8f7      	bhi.n	800194c <HAL_Delay+0x28>
  {
  }
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000008 	.word	0x20000008

0800196c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800197c:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <__NVIC_SetPriorityGrouping+0x44>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001988:	4013      	ands	r3, r2
 800198a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001994:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800199c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199e:	4a04      	ldr	r2, [pc, #16]	@ (80019b0 <__NVIC_SetPriorityGrouping+0x44>)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	60d3      	str	r3, [r2, #12]
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b8:	4b04      	ldr	r3, [pc, #16]	@ (80019cc <__NVIC_GetPriorityGrouping+0x18>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	f003 0307 	and.w	r3, r3, #7
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	db0b      	blt.n	80019fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	f003 021f 	and.w	r2, r3, #31
 80019e8:	4906      	ldr	r1, [pc, #24]	@ (8001a04 <__NVIC_EnableIRQ+0x34>)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	095b      	lsrs	r3, r3, #5
 80019f0:	2001      	movs	r0, #1
 80019f2:	fa00 f202 	lsl.w	r2, r0, r2
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	e000e100 	.word	0xe000e100

08001a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	db0a      	blt.n	8001a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	490c      	ldr	r1, [pc, #48]	@ (8001a54 <__NVIC_SetPriority+0x4c>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	0112      	lsls	r2, r2, #4
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a30:	e00a      	b.n	8001a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4908      	ldr	r1, [pc, #32]	@ (8001a58 <__NVIC_SetPriority+0x50>)
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	3b04      	subs	r3, #4
 8001a40:	0112      	lsls	r2, r2, #4
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	440b      	add	r3, r1
 8001a46:	761a      	strb	r2, [r3, #24]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000e100 	.word	0xe000e100
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	@ 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f1c3 0307 	rsb	r3, r3, #7
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	bf28      	it	cs
 8001a7a:	2304      	movcs	r3, #4
 8001a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3304      	adds	r3, #4
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d902      	bls.n	8001a8c <NVIC_EncodePriority+0x30>
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3b03      	subs	r3, #3
 8001a8a:	e000      	b.n	8001a8e <NVIC_EncodePriority+0x32>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43d9      	mvns	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	4313      	orrs	r3, r2
         );
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3724      	adds	r7, #36	@ 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ad0:	d301      	bcc.n	8001ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00f      	b.n	8001af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b00 <SysTick_Config+0x40>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ade:	210f      	movs	r1, #15
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ae4:	f7ff ff90 	bl	8001a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae8:	4b05      	ldr	r3, [pc, #20]	@ (8001b00 <SysTick_Config+0x40>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aee:	4b04      	ldr	r3, [pc, #16]	@ (8001b00 <SysTick_Config+0x40>)
 8001af0:	2207      	movs	r2, #7
 8001af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	e000e010 	.word	0xe000e010

08001b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff2d 	bl	800196c <__NVIC_SetPriorityGrouping>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b2c:	f7ff ff42 	bl	80019b4 <__NVIC_GetPriorityGrouping>
 8001b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	6978      	ldr	r0, [r7, #20]
 8001b38:	f7ff ff90 	bl	8001a5c <NVIC_EncodePriority>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff5f 	bl	8001a08 <__NVIC_SetPriority>
}
 8001b4a:	bf00      	nop
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff35 	bl	80019d0 <__NVIC_EnableIRQ>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ffa2 	bl	8001ac0 <SysTick_Config>
 8001b7c:	4603      	mov	r3, r0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b08b      	sub	sp, #44	@ 0x2c
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9a:	e161      	b.n	8001e60 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	f040 8150 	bne.w	8001e5a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	4a97      	ldr	r2, [pc, #604]	@ (8001e1c <HAL_GPIO_Init+0x294>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d05e      	beq.n	8001c82 <HAL_GPIO_Init+0xfa>
 8001bc4:	4a95      	ldr	r2, [pc, #596]	@ (8001e1c <HAL_GPIO_Init+0x294>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d875      	bhi.n	8001cb6 <HAL_GPIO_Init+0x12e>
 8001bca:	4a95      	ldr	r2, [pc, #596]	@ (8001e20 <HAL_GPIO_Init+0x298>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d058      	beq.n	8001c82 <HAL_GPIO_Init+0xfa>
 8001bd0:	4a93      	ldr	r2, [pc, #588]	@ (8001e20 <HAL_GPIO_Init+0x298>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d86f      	bhi.n	8001cb6 <HAL_GPIO_Init+0x12e>
 8001bd6:	4a93      	ldr	r2, [pc, #588]	@ (8001e24 <HAL_GPIO_Init+0x29c>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d052      	beq.n	8001c82 <HAL_GPIO_Init+0xfa>
 8001bdc:	4a91      	ldr	r2, [pc, #580]	@ (8001e24 <HAL_GPIO_Init+0x29c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d869      	bhi.n	8001cb6 <HAL_GPIO_Init+0x12e>
 8001be2:	4a91      	ldr	r2, [pc, #580]	@ (8001e28 <HAL_GPIO_Init+0x2a0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d04c      	beq.n	8001c82 <HAL_GPIO_Init+0xfa>
 8001be8:	4a8f      	ldr	r2, [pc, #572]	@ (8001e28 <HAL_GPIO_Init+0x2a0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d863      	bhi.n	8001cb6 <HAL_GPIO_Init+0x12e>
 8001bee:	4a8f      	ldr	r2, [pc, #572]	@ (8001e2c <HAL_GPIO_Init+0x2a4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d046      	beq.n	8001c82 <HAL_GPIO_Init+0xfa>
 8001bf4:	4a8d      	ldr	r2, [pc, #564]	@ (8001e2c <HAL_GPIO_Init+0x2a4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d85d      	bhi.n	8001cb6 <HAL_GPIO_Init+0x12e>
 8001bfa:	2b12      	cmp	r3, #18
 8001bfc:	d82a      	bhi.n	8001c54 <HAL_GPIO_Init+0xcc>
 8001bfe:	2b12      	cmp	r3, #18
 8001c00:	d859      	bhi.n	8001cb6 <HAL_GPIO_Init+0x12e>
 8001c02:	a201      	add	r2, pc, #4	@ (adr r2, 8001c08 <HAL_GPIO_Init+0x80>)
 8001c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c08:	08001c83 	.word	0x08001c83
 8001c0c:	08001c5d 	.word	0x08001c5d
 8001c10:	08001c6f 	.word	0x08001c6f
 8001c14:	08001cb1 	.word	0x08001cb1
 8001c18:	08001cb7 	.word	0x08001cb7
 8001c1c:	08001cb7 	.word	0x08001cb7
 8001c20:	08001cb7 	.word	0x08001cb7
 8001c24:	08001cb7 	.word	0x08001cb7
 8001c28:	08001cb7 	.word	0x08001cb7
 8001c2c:	08001cb7 	.word	0x08001cb7
 8001c30:	08001cb7 	.word	0x08001cb7
 8001c34:	08001cb7 	.word	0x08001cb7
 8001c38:	08001cb7 	.word	0x08001cb7
 8001c3c:	08001cb7 	.word	0x08001cb7
 8001c40:	08001cb7 	.word	0x08001cb7
 8001c44:	08001cb7 	.word	0x08001cb7
 8001c48:	08001cb7 	.word	0x08001cb7
 8001c4c:	08001c65 	.word	0x08001c65
 8001c50:	08001c79 	.word	0x08001c79
 8001c54:	4a76      	ldr	r2, [pc, #472]	@ (8001e30 <HAL_GPIO_Init+0x2a8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d013      	beq.n	8001c82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c5a:	e02c      	b.n	8001cb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	623b      	str	r3, [r7, #32]
          break;
 8001c62:	e029      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	623b      	str	r3, [r7, #32]
          break;
 8001c6c:	e024      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	3308      	adds	r3, #8
 8001c74:	623b      	str	r3, [r7, #32]
          break;
 8001c76:	e01f      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	330c      	adds	r3, #12
 8001c7e:	623b      	str	r3, [r7, #32]
          break;
 8001c80:	e01a      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d102      	bne.n	8001c90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	623b      	str	r3, [r7, #32]
          break;
 8001c8e:	e013      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d105      	bne.n	8001ca4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c98:	2308      	movs	r3, #8
 8001c9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69fa      	ldr	r2, [r7, #28]
 8001ca0:	611a      	str	r2, [r3, #16]
          break;
 8001ca2:	e009      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	615a      	str	r2, [r3, #20]
          break;
 8001cae:	e003      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	623b      	str	r3, [r7, #32]
          break;
 8001cb4:	e000      	b.n	8001cb8 <HAL_GPIO_Init+0x130>
          break;
 8001cb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	2bff      	cmp	r3, #255	@ 0xff
 8001cbc:	d801      	bhi.n	8001cc2 <HAL_GPIO_Init+0x13a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	e001      	b.n	8001cc6 <HAL_GPIO_Init+0x13e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2bff      	cmp	r3, #255	@ 0xff
 8001ccc:	d802      	bhi.n	8001cd4 <HAL_GPIO_Init+0x14c>
 8001cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	e002      	b.n	8001cda <HAL_GPIO_Init+0x152>
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd6:	3b08      	subs	r3, #8
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	210f      	movs	r1, #15
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	401a      	ands	r2, r3
 8001cec:	6a39      	ldr	r1, [r7, #32]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 80a9 	beq.w	8001e5a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d08:	4b4a      	ldr	r3, [pc, #296]	@ (8001e34 <HAL_GPIO_Init+0x2ac>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a49      	ldr	r2, [pc, #292]	@ (8001e34 <HAL_GPIO_Init+0x2ac>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b47      	ldr	r3, [pc, #284]	@ (8001e34 <HAL_GPIO_Init+0x2ac>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d20:	4a45      	ldr	r2, [pc, #276]	@ (8001e38 <HAL_GPIO_Init+0x2b0>)
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	089b      	lsrs	r3, r3, #2
 8001d26:	3302      	adds	r3, #2
 8001d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	220f      	movs	r2, #15
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4013      	ands	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a3d      	ldr	r2, [pc, #244]	@ (8001e3c <HAL_GPIO_Init+0x2b4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d00d      	beq.n	8001d68 <HAL_GPIO_Init+0x1e0>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a3c      	ldr	r2, [pc, #240]	@ (8001e40 <HAL_GPIO_Init+0x2b8>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d007      	beq.n	8001d64 <HAL_GPIO_Init+0x1dc>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a3b      	ldr	r2, [pc, #236]	@ (8001e44 <HAL_GPIO_Init+0x2bc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d101      	bne.n	8001d60 <HAL_GPIO_Init+0x1d8>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e004      	b.n	8001d6a <HAL_GPIO_Init+0x1e2>
 8001d60:	2303      	movs	r3, #3
 8001d62:	e002      	b.n	8001d6a <HAL_GPIO_Init+0x1e2>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <HAL_GPIO_Init+0x1e2>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d6c:	f002 0203 	and.w	r2, r2, #3
 8001d70:	0092      	lsls	r2, r2, #2
 8001d72:	4093      	lsls	r3, r2
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d7a:	492f      	ldr	r1, [pc, #188]	@ (8001e38 <HAL_GPIO_Init+0x2b0>)
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	3302      	adds	r3, #2
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d006      	beq.n	8001da2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d94:	4b2c      	ldr	r3, [pc, #176]	@ (8001e48 <HAL_GPIO_Init+0x2c0>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	492b      	ldr	r1, [pc, #172]	@ (8001e48 <HAL_GPIO_Init+0x2c0>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	600b      	str	r3, [r1, #0]
 8001da0:	e006      	b.n	8001db0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001da2:	4b29      	ldr	r3, [pc, #164]	@ (8001e48 <HAL_GPIO_Init+0x2c0>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	4927      	ldr	r1, [pc, #156]	@ (8001e48 <HAL_GPIO_Init+0x2c0>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d006      	beq.n	8001dca <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dbc:	4b22      	ldr	r3, [pc, #136]	@ (8001e48 <HAL_GPIO_Init+0x2c0>)
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	4921      	ldr	r1, [pc, #132]	@ (8001e48 <HAL_GPIO_Init+0x2c0>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]
 8001dc8:	e006      	b.n	8001dd8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dca:	4b1f      	ldr	r3, [pc, #124]	@ (8001e48 <HAL_GPIO_Init+0x2c0>)
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	491d      	ldr	r1, [pc, #116]	@ (8001e48 <HAL_GPIO_Init+0x2c0>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d006      	beq.n	8001df2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001de4:	4b18      	ldr	r3, [pc, #96]	@ (8001e48 <HAL_GPIO_Init+0x2c0>)
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	4917      	ldr	r1, [pc, #92]	@ (8001e48 <HAL_GPIO_Init+0x2c0>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	608b      	str	r3, [r1, #8]
 8001df0:	e006      	b.n	8001e00 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001df2:	4b15      	ldr	r3, [pc, #84]	@ (8001e48 <HAL_GPIO_Init+0x2c0>)
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	4913      	ldr	r1, [pc, #76]	@ (8001e48 <HAL_GPIO_Init+0x2c0>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d01f      	beq.n	8001e4c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e48 <HAL_GPIO_Init+0x2c0>)
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	490d      	ldr	r1, [pc, #52]	@ (8001e48 <HAL_GPIO_Init+0x2c0>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	60cb      	str	r3, [r1, #12]
 8001e18:	e01f      	b.n	8001e5a <HAL_GPIO_Init+0x2d2>
 8001e1a:	bf00      	nop
 8001e1c:	10320000 	.word	0x10320000
 8001e20:	10310000 	.word	0x10310000
 8001e24:	10220000 	.word	0x10220000
 8001e28:	10210000 	.word	0x10210000
 8001e2c:	10120000 	.word	0x10120000
 8001e30:	10110000 	.word	0x10110000
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40010000 	.word	0x40010000
 8001e3c:	40010800 	.word	0x40010800
 8001e40:	40010c00 	.word	0x40010c00
 8001e44:	40011000 	.word	0x40011000
 8001e48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <HAL_GPIO_Init+0x2f4>)
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	4909      	ldr	r1, [pc, #36]	@ (8001e7c <HAL_GPIO_Init+0x2f4>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e66:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f47f ae96 	bne.w	8001b9c <HAL_GPIO_Init+0x14>
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	372c      	adds	r7, #44	@ 0x2c
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	40010400 	.word	0x40010400

08001e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	807b      	strh	r3, [r7, #2]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e90:	787b      	ldrb	r3, [r7, #1]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e96:	887a      	ldrh	r2, [r7, #2]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e9c:	e003      	b.n	8001ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e9e:	887b      	ldrh	r3, [r7, #2]
 8001ea0:	041a      	lsls	r2, r3, #16
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	611a      	str	r2, [r3, #16]
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001eba:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d006      	beq.n	8001ed4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ec6:	4a05      	ldr	r2, [pc, #20]	@ (8001edc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ec8:	88fb      	ldrh	r3, [r7, #6]
 8001eca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ecc:	88fb      	ldrh	r3, [r7, #6]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fa00 	bl	80012d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40010400 	.word	0x40010400

08001ee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e272      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8087 	beq.w	800200e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f00:	4b92      	ldr	r3, [pc, #584]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d00c      	beq.n	8001f26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f0c:	4b8f      	ldr	r3, [pc, #572]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 030c 	and.w	r3, r3, #12
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d112      	bne.n	8001f3e <HAL_RCC_OscConfig+0x5e>
 8001f18:	4b8c      	ldr	r3, [pc, #560]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f24:	d10b      	bne.n	8001f3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f26:	4b89      	ldr	r3, [pc, #548]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d06c      	beq.n	800200c <HAL_RCC_OscConfig+0x12c>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d168      	bne.n	800200c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e24c      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f46:	d106      	bne.n	8001f56 <HAL_RCC_OscConfig+0x76>
 8001f48:	4b80      	ldr	r3, [pc, #512]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a7f      	ldr	r2, [pc, #508]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	e02e      	b.n	8001fb4 <HAL_RCC_OscConfig+0xd4>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x98>
 8001f5e:	4b7b      	ldr	r3, [pc, #492]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a7a      	ldr	r2, [pc, #488]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	4b78      	ldr	r3, [pc, #480]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a77      	ldr	r2, [pc, #476]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	e01d      	b.n	8001fb4 <HAL_RCC_OscConfig+0xd4>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f80:	d10c      	bne.n	8001f9c <HAL_RCC_OscConfig+0xbc>
 8001f82:	4b72      	ldr	r3, [pc, #456]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a71      	ldr	r2, [pc, #452]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	4b6f      	ldr	r3, [pc, #444]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a6e      	ldr	r2, [pc, #440]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	e00b      	b.n	8001fb4 <HAL_RCC_OscConfig+0xd4>
 8001f9c:	4b6b      	ldr	r3, [pc, #428]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a6a      	ldr	r2, [pc, #424]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	4b68      	ldr	r3, [pc, #416]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a67      	ldr	r2, [pc, #412]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001fae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d013      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7ff fca8 	bl	8001910 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc4:	f7ff fca4 	bl	8001910 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b64      	cmp	r3, #100	@ 0x64
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e200      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd6:	4b5d      	ldr	r3, [pc, #372]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f0      	beq.n	8001fc4 <HAL_RCC_OscConfig+0xe4>
 8001fe2:	e014      	b.n	800200e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe4:	f7ff fc94 	bl	8001910 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fec:	f7ff fc90 	bl	8001910 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b64      	cmp	r3, #100	@ 0x64
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e1ec      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffe:	4b53      	ldr	r3, [pc, #332]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x10c>
 800200a:	e000      	b.n	800200e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d063      	beq.n	80020e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800201a:	4b4c      	ldr	r3, [pc, #304]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00b      	beq.n	800203e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002026:	4b49      	ldr	r3, [pc, #292]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b08      	cmp	r3, #8
 8002030:	d11c      	bne.n	800206c <HAL_RCC_OscConfig+0x18c>
 8002032:	4b46      	ldr	r3, [pc, #280]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d116      	bne.n	800206c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203e:	4b43      	ldr	r3, [pc, #268]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d005      	beq.n	8002056 <HAL_RCC_OscConfig+0x176>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d001      	beq.n	8002056 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e1c0      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002056:	4b3d      	ldr	r3, [pc, #244]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4939      	ldr	r1, [pc, #228]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8002066:	4313      	orrs	r3, r2
 8002068:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206a:	e03a      	b.n	80020e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d020      	beq.n	80020b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002074:	4b36      	ldr	r3, [pc, #216]	@ (8002150 <HAL_RCC_OscConfig+0x270>)
 8002076:	2201      	movs	r2, #1
 8002078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207a:	f7ff fc49 	bl	8001910 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002082:	f7ff fc45 	bl	8001910 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e1a1      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002094:	4b2d      	ldr	r3, [pc, #180]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a0:	4b2a      	ldr	r3, [pc, #168]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4927      	ldr	r1, [pc, #156]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	600b      	str	r3, [r1, #0]
 80020b4:	e015      	b.n	80020e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b6:	4b26      	ldr	r3, [pc, #152]	@ (8002150 <HAL_RCC_OscConfig+0x270>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7ff fc28 	bl	8001910 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c4:	f7ff fc24 	bl	8001910 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e180      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d6:	4b1d      	ldr	r3, [pc, #116]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d03a      	beq.n	8002164 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d019      	beq.n	800212a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f6:	4b17      	ldr	r3, [pc, #92]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fc:	f7ff fc08 	bl	8001910 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002104:	f7ff fc04 	bl	8001910 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e160      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002116:	4b0d      	ldr	r3, [pc, #52]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8002118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f0      	beq.n	8002104 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002122:	2001      	movs	r0, #1
 8002124:	f000 faa6 	bl	8002674 <RCC_Delay>
 8002128:	e01c      	b.n	8002164 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800212a:	4b0a      	ldr	r3, [pc, #40]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002130:	f7ff fbee 	bl	8001910 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002136:	e00f      	b.n	8002158 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002138:	f7ff fbea 	bl	8001910 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d908      	bls.n	8002158 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e146      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000
 8002150:	42420000 	.word	0x42420000
 8002154:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002158:	4b92      	ldr	r3, [pc, #584]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800215a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1e9      	bne.n	8002138 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80a6 	beq.w	80022be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002172:	2300      	movs	r3, #0
 8002174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002176:	4b8b      	ldr	r3, [pc, #556]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10d      	bne.n	800219e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002182:	4b88      	ldr	r3, [pc, #544]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	4a87      	ldr	r2, [pc, #540]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800218c:	61d3      	str	r3, [r2, #28]
 800218e:	4b85      	ldr	r3, [pc, #532]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219a:	2301      	movs	r3, #1
 800219c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219e:	4b82      	ldr	r3, [pc, #520]	@ (80023a8 <HAL_RCC_OscConfig+0x4c8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d118      	bne.n	80021dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021aa:	4b7f      	ldr	r3, [pc, #508]	@ (80023a8 <HAL_RCC_OscConfig+0x4c8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a7e      	ldr	r2, [pc, #504]	@ (80023a8 <HAL_RCC_OscConfig+0x4c8>)
 80021b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b6:	f7ff fbab 	bl	8001910 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021be:	f7ff fba7 	bl	8001910 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b64      	cmp	r3, #100	@ 0x64
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e103      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	4b75      	ldr	r3, [pc, #468]	@ (80023a8 <HAL_RCC_OscConfig+0x4c8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x312>
 80021e4:	4b6f      	ldr	r3, [pc, #444]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4a6e      	ldr	r2, [pc, #440]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6213      	str	r3, [r2, #32]
 80021f0:	e02d      	b.n	800224e <HAL_RCC_OscConfig+0x36e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x334>
 80021fa:	4b6a      	ldr	r3, [pc, #424]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	4a69      	ldr	r2, [pc, #420]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	6213      	str	r3, [r2, #32]
 8002206:	4b67      	ldr	r3, [pc, #412]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	4a66      	ldr	r2, [pc, #408]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800220c:	f023 0304 	bic.w	r3, r3, #4
 8002210:	6213      	str	r3, [r2, #32]
 8002212:	e01c      	b.n	800224e <HAL_RCC_OscConfig+0x36e>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b05      	cmp	r3, #5
 800221a:	d10c      	bne.n	8002236 <HAL_RCC_OscConfig+0x356>
 800221c:	4b61      	ldr	r3, [pc, #388]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	4a60      	ldr	r2, [pc, #384]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002222:	f043 0304 	orr.w	r3, r3, #4
 8002226:	6213      	str	r3, [r2, #32]
 8002228:	4b5e      	ldr	r3, [pc, #376]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4a5d      	ldr	r2, [pc, #372]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6213      	str	r3, [r2, #32]
 8002234:	e00b      	b.n	800224e <HAL_RCC_OscConfig+0x36e>
 8002236:	4b5b      	ldr	r3, [pc, #364]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	4a5a      	ldr	r2, [pc, #360]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	f023 0301 	bic.w	r3, r3, #1
 8002240:	6213      	str	r3, [r2, #32]
 8002242:	4b58      	ldr	r3, [pc, #352]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	4a57      	ldr	r2, [pc, #348]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	f023 0304 	bic.w	r3, r3, #4
 800224c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d015      	beq.n	8002282 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002256:	f7ff fb5b 	bl	8001910 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225c:	e00a      	b.n	8002274 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225e:	f7ff fb57 	bl	8001910 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800226c:	4293      	cmp	r3, r2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e0b1      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002274:	4b4b      	ldr	r3, [pc, #300]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0ee      	beq.n	800225e <HAL_RCC_OscConfig+0x37e>
 8002280:	e014      	b.n	80022ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002282:	f7ff fb45 	bl	8001910 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002288:	e00a      	b.n	80022a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228a:	f7ff fb41 	bl	8001910 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002298:	4293      	cmp	r3, r2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e09b      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a0:	4b40      	ldr	r3, [pc, #256]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1ee      	bne.n	800228a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d105      	bne.n	80022be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b2:	4b3c      	ldr	r3, [pc, #240]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	4a3b      	ldr	r2, [pc, #236]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 8087 	beq.w	80023d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c8:	4b36      	ldr	r3, [pc, #216]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d061      	beq.n	8002398 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d146      	bne.n	800236a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022dc:	4b33      	ldr	r3, [pc, #204]	@ (80023ac <HAL_RCC_OscConfig+0x4cc>)
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e2:	f7ff fb15 	bl	8001910 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ea:	f7ff fb11 	bl	8001910 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e06d      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fc:	4b29      	ldr	r3, [pc, #164]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1f0      	bne.n	80022ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002310:	d108      	bne.n	8002324 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002312:	4b24      	ldr	r3, [pc, #144]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	4921      	ldr	r1, [pc, #132]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002324:	4b1f      	ldr	r3, [pc, #124]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a19      	ldr	r1, [r3, #32]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002334:	430b      	orrs	r3, r1
 8002336:	491b      	ldr	r1, [pc, #108]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	4313      	orrs	r3, r2
 800233a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800233c:	4b1b      	ldr	r3, [pc, #108]	@ (80023ac <HAL_RCC_OscConfig+0x4cc>)
 800233e:	2201      	movs	r2, #1
 8002340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002342:	f7ff fae5 	bl	8001910 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234a:	f7ff fae1 	bl	8001910 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e03d      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800235c:	4b11      	ldr	r3, [pc, #68]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f0      	beq.n	800234a <HAL_RCC_OscConfig+0x46a>
 8002368:	e035      	b.n	80023d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236a:	4b10      	ldr	r3, [pc, #64]	@ (80023ac <HAL_RCC_OscConfig+0x4cc>)
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7ff face 	bl	8001910 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002378:	f7ff faca 	bl	8001910 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e026      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238a:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x498>
 8002396:	e01e      	b.n	80023d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e019      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40007000 	.word	0x40007000
 80023ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023b0:	4b0b      	ldr	r3, [pc, #44]	@ (80023e0 <HAL_RCC_OscConfig+0x500>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d106      	bne.n	80023d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d001      	beq.n	80023d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000

080023e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0d0      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023f8:	4b6a      	ldr	r3, [pc, #424]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d910      	bls.n	8002428 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002406:	4b67      	ldr	r3, [pc, #412]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 0207 	bic.w	r2, r3, #7
 800240e:	4965      	ldr	r1, [pc, #404]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002416:	4b63      	ldr	r3, [pc, #396]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0b8      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d020      	beq.n	8002476 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002440:	4b59      	ldr	r3, [pc, #356]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4a58      	ldr	r2, [pc, #352]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800244a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002458:	4b53      	ldr	r3, [pc, #332]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	4a52      	ldr	r2, [pc, #328]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002462:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b50      	ldr	r3, [pc, #320]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	494d      	ldr	r1, [pc, #308]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002472:	4313      	orrs	r3, r2
 8002474:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d040      	beq.n	8002504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d107      	bne.n	800249a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248a:	4b47      	ldr	r3, [pc, #284]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d115      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e07f      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d107      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a2:	4b41      	ldr	r3, [pc, #260]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e073      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b2:	4b3d      	ldr	r3, [pc, #244]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e06b      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c2:	4b39      	ldr	r3, [pc, #228]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f023 0203 	bic.w	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4936      	ldr	r1, [pc, #216]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024d4:	f7ff fa1c 	bl	8001910 <HAL_GetTick>
 80024d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024dc:	f7ff fa18 	bl	8001910 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e053      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f2:	4b2d      	ldr	r3, [pc, #180]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 020c 	and.w	r2, r3, #12
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	429a      	cmp	r2, r3
 8002502:	d1eb      	bne.n	80024dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002504:	4b27      	ldr	r3, [pc, #156]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d210      	bcs.n	8002534 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b24      	ldr	r3, [pc, #144]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 0207 	bic.w	r2, r3, #7
 800251a:	4922      	ldr	r1, [pc, #136]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b20      	ldr	r3, [pc, #128]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e032      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002540:	4b19      	ldr	r3, [pc, #100]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4916      	ldr	r1, [pc, #88]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	4313      	orrs	r3, r2
 8002550:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d009      	beq.n	8002572 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800255e:	4b12      	ldr	r3, [pc, #72]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	490e      	ldr	r1, [pc, #56]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002572:	f000 f821 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 8002576:	4602      	mov	r2, r0
 8002578:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	490a      	ldr	r1, [pc, #40]	@ (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002584:	5ccb      	ldrb	r3, [r1, r3]
 8002586:	fa22 f303 	lsr.w	r3, r2, r3
 800258a:	4a09      	ldr	r2, [pc, #36]	@ (80025b0 <HAL_RCC_ClockConfig+0x1cc>)
 800258c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800258e:	4b09      	ldr	r3, [pc, #36]	@ (80025b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff f97a 	bl	800188c <HAL_InitTick>

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40022000 	.word	0x40022000
 80025a8:	40021000 	.word	0x40021000
 80025ac:	08005b70 	.word	0x08005b70
 80025b0:	20000000 	.word	0x20000000
 80025b4:	20000004 	.word	0x20000004

080025b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b8:	b490      	push	{r4, r7}
 80025ba:	b08a      	sub	sp, #40	@ 0x28
 80025bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025be:	4b29      	ldr	r3, [pc, #164]	@ (8002664 <HAL_RCC_GetSysClockFreq+0xac>)
 80025c0:	1d3c      	adds	r4, r7, #4
 80025c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025c8:	f240 2301 	movw	r3, #513	@ 0x201
 80025cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	2300      	movs	r3, #0
 80025d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025e2:	4b21      	ldr	r3, [pc, #132]	@ (8002668 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d002      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x40>
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d003      	beq.n	80025fe <HAL_RCC_GetSysClockFreq+0x46>
 80025f6:	e02b      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025f8:	4b1c      	ldr	r3, [pc, #112]	@ (800266c <HAL_RCC_GetSysClockFreq+0xb4>)
 80025fa:	623b      	str	r3, [r7, #32]
      break;
 80025fc:	e02b      	b.n	8002656 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	0c9b      	lsrs	r3, r3, #18
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	3328      	adds	r3, #40	@ 0x28
 8002608:	443b      	add	r3, r7
 800260a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800260e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d012      	beq.n	8002640 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800261a:	4b13      	ldr	r3, [pc, #76]	@ (8002668 <HAL_RCC_GetSysClockFreq+0xb0>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	0c5b      	lsrs	r3, r3, #17
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	3328      	adds	r3, #40	@ 0x28
 8002626:	443b      	add	r3, r7
 8002628:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800262c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	4a0e      	ldr	r2, [pc, #56]	@ (800266c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002632:	fb03 f202 	mul.w	r2, r3, r2
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	fbb2 f3f3 	udiv	r3, r2, r3
 800263c:	627b      	str	r3, [r7, #36]	@ 0x24
 800263e:	e004      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	4a0b      	ldr	r2, [pc, #44]	@ (8002670 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002644:	fb02 f303 	mul.w	r3, r2, r3
 8002648:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	623b      	str	r3, [r7, #32]
      break;
 800264e:	e002      	b.n	8002656 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002650:	4b06      	ldr	r3, [pc, #24]	@ (800266c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002652:	623b      	str	r3, [r7, #32]
      break;
 8002654:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002656:	6a3b      	ldr	r3, [r7, #32]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3728      	adds	r7, #40	@ 0x28
 800265c:	46bd      	mov	sp, r7
 800265e:	bc90      	pop	{r4, r7}
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	08005b60 	.word	0x08005b60
 8002668:	40021000 	.word	0x40021000
 800266c:	007a1200 	.word	0x007a1200
 8002670:	003d0900 	.word	0x003d0900

08002674 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800267c:	4b0a      	ldr	r3, [pc, #40]	@ (80026a8 <RCC_Delay+0x34>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0a      	ldr	r2, [pc, #40]	@ (80026ac <RCC_Delay+0x38>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	0a5b      	lsrs	r3, r3, #9
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	fb02 f303 	mul.w	r3, r2, r3
 800268e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002690:	bf00      	nop
  }
  while (Delay --);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1e5a      	subs	r2, r3, #1
 8002696:	60fa      	str	r2, [r7, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f9      	bne.n	8002690 <RCC_Delay+0x1c>
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	20000000 	.word	0x20000000
 80026ac:	10624dd3 	.word	0x10624dd3

080026b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e01d      	b.n	80026fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fe fffe 	bl	80016d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3304      	adds	r3, #4
 80026ec:	4619      	mov	r1, r3
 80026ee:	4610      	mov	r0, r2
 80026f0:	f000 fa1c 	bl	8002b2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002706:	b480      	push	{r7}
 8002708:	b085      	sub	sp, #20
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0201 	orr.w	r2, r2, #1
 800271c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b06      	cmp	r3, #6
 800272e:	d007      	beq.n	8002740 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b02      	cmp	r3, #2
 8002760:	d122      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b02      	cmp	r3, #2
 800276e:	d11b      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0202 	mvn.w	r2, #2
 8002778:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f9b1 	bl	8002af6 <HAL_TIM_IC_CaptureCallback>
 8002794:	e005      	b.n	80027a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f9a4 	bl	8002ae4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f9b3 	bl	8002b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d122      	bne.n	80027fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d11b      	bne.n	80027fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f06f 0204 	mvn.w	r2, #4
 80027cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2202      	movs	r2, #2
 80027d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f987 	bl	8002af6 <HAL_TIM_IC_CaptureCallback>
 80027e8:	e005      	b.n	80027f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f97a 	bl	8002ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f989 	bl	8002b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b08      	cmp	r3, #8
 8002808:	d122      	bne.n	8002850 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b08      	cmp	r3, #8
 8002816:	d11b      	bne.n	8002850 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0208 	mvn.w	r2, #8
 8002820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2204      	movs	r2, #4
 8002826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f95d 	bl	8002af6 <HAL_TIM_IC_CaptureCallback>
 800283c:	e005      	b.n	800284a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f950 	bl	8002ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f95f 	bl	8002b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	2b10      	cmp	r3, #16
 800285c:	d122      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b10      	cmp	r3, #16
 800286a:	d11b      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f06f 0210 	mvn.w	r2, #16
 8002874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2208      	movs	r2, #8
 800287a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f933 	bl	8002af6 <HAL_TIM_IC_CaptureCallback>
 8002890:	e005      	b.n	800289e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f926 	bl	8002ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f935 	bl	8002b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d10e      	bne.n	80028d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d107      	bne.n	80028d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f06f 0201 	mvn.w	r2, #1
 80028c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fe fd16 	bl	80012fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028da:	2b80      	cmp	r3, #128	@ 0x80
 80028dc:	d10e      	bne.n	80028fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028e8:	2b80      	cmp	r3, #128	@ 0x80
 80028ea:	d107      	bne.n	80028fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80028f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fa53 	bl	8002da2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002906:	2b40      	cmp	r3, #64	@ 0x40
 8002908:	d10e      	bne.n	8002928 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002914:	2b40      	cmp	r3, #64	@ 0x40
 8002916:	d107      	bne.n	8002928 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f8f9 	bl	8002b1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b20      	cmp	r3, #32
 8002934:	d10e      	bne.n	8002954 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b20      	cmp	r3, #32
 8002942:	d107      	bne.n	8002954 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f06f 0220 	mvn.w	r2, #32
 800294c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fa1e 	bl	8002d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_TIM_ConfigClockSource+0x18>
 8002970:	2302      	movs	r3, #2
 8002972:	e0b3      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x180>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002992:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800299a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029ac:	d03e      	beq.n	8002a2c <HAL_TIM_ConfigClockSource+0xd0>
 80029ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029b2:	f200 8087 	bhi.w	8002ac4 <HAL_TIM_ConfigClockSource+0x168>
 80029b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ba:	f000 8085 	beq.w	8002ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80029be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029c2:	d87f      	bhi.n	8002ac4 <HAL_TIM_ConfigClockSource+0x168>
 80029c4:	2b70      	cmp	r3, #112	@ 0x70
 80029c6:	d01a      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0xa2>
 80029c8:	2b70      	cmp	r3, #112	@ 0x70
 80029ca:	d87b      	bhi.n	8002ac4 <HAL_TIM_ConfigClockSource+0x168>
 80029cc:	2b60      	cmp	r3, #96	@ 0x60
 80029ce:	d050      	beq.n	8002a72 <HAL_TIM_ConfigClockSource+0x116>
 80029d0:	2b60      	cmp	r3, #96	@ 0x60
 80029d2:	d877      	bhi.n	8002ac4 <HAL_TIM_ConfigClockSource+0x168>
 80029d4:	2b50      	cmp	r3, #80	@ 0x50
 80029d6:	d03c      	beq.n	8002a52 <HAL_TIM_ConfigClockSource+0xf6>
 80029d8:	2b50      	cmp	r3, #80	@ 0x50
 80029da:	d873      	bhi.n	8002ac4 <HAL_TIM_ConfigClockSource+0x168>
 80029dc:	2b40      	cmp	r3, #64	@ 0x40
 80029de:	d058      	beq.n	8002a92 <HAL_TIM_ConfigClockSource+0x136>
 80029e0:	2b40      	cmp	r3, #64	@ 0x40
 80029e2:	d86f      	bhi.n	8002ac4 <HAL_TIM_ConfigClockSource+0x168>
 80029e4:	2b30      	cmp	r3, #48	@ 0x30
 80029e6:	d064      	beq.n	8002ab2 <HAL_TIM_ConfigClockSource+0x156>
 80029e8:	2b30      	cmp	r3, #48	@ 0x30
 80029ea:	d86b      	bhi.n	8002ac4 <HAL_TIM_ConfigClockSource+0x168>
 80029ec:	2b20      	cmp	r3, #32
 80029ee:	d060      	beq.n	8002ab2 <HAL_TIM_ConfigClockSource+0x156>
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	d867      	bhi.n	8002ac4 <HAL_TIM_ConfigClockSource+0x168>
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d05c      	beq.n	8002ab2 <HAL_TIM_ConfigClockSource+0x156>
 80029f8:	2b10      	cmp	r3, #16
 80029fa:	d05a      	beq.n	8002ab2 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80029fc:	e062      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	6899      	ldr	r1, [r3, #8]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f000 f95c 	bl	8002cca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a20:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	609a      	str	r2, [r3, #8]
      break;
 8002a2a:	e04e      	b.n	8002aca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6818      	ldr	r0, [r3, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	6899      	ldr	r1, [r3, #8]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f000 f945 	bl	8002cca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a4e:	609a      	str	r2, [r3, #8]
      break;
 8002a50:	e03b      	b.n	8002aca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	6859      	ldr	r1, [r3, #4]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f000 f8bc 	bl	8002bdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2150      	movs	r1, #80	@ 0x50
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 f913 	bl	8002c96 <TIM_ITRx_SetConfig>
      break;
 8002a70:	e02b      	b.n	8002aca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	6859      	ldr	r1, [r3, #4]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f000 f8da 	bl	8002c38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2160      	movs	r1, #96	@ 0x60
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f903 	bl	8002c96 <TIM_ITRx_SetConfig>
      break;
 8002a90:	e01b      	b.n	8002aca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	6859      	ldr	r1, [r3, #4]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f000 f89c 	bl	8002bdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2140      	movs	r1, #64	@ 0x40
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f8f3 	bl	8002c96 <TIM_ITRx_SetConfig>
      break;
 8002ab0:	e00b      	b.n	8002aca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4619      	mov	r1, r3
 8002abc:	4610      	mov	r0, r2
 8002abe:	f000 f8ea 	bl	8002c96 <TIM_ITRx_SetConfig>
      break;
 8002ac2:	e002      	b.n	8002aca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ac4:	bf00      	nop
 8002ac6:	e000      	b.n	8002aca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ac8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr

08002af6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr

08002b1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr

08002b2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a25      	ldr	r2, [pc, #148]	@ (8002bd4 <TIM_Base_SetConfig+0xa8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d007      	beq.n	8002b54 <TIM_Base_SetConfig+0x28>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b4a:	d003      	beq.n	8002b54 <TIM_Base_SetConfig+0x28>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a22      	ldr	r2, [pc, #136]	@ (8002bd8 <TIM_Base_SetConfig+0xac>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d108      	bne.n	8002b66 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a1a      	ldr	r2, [pc, #104]	@ (8002bd4 <TIM_Base_SetConfig+0xa8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d007      	beq.n	8002b7e <TIM_Base_SetConfig+0x52>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b74:	d003      	beq.n	8002b7e <TIM_Base_SetConfig+0x52>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a17      	ldr	r2, [pc, #92]	@ (8002bd8 <TIM_Base_SetConfig+0xac>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d108      	bne.n	8002b90 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a07      	ldr	r2, [pc, #28]	@ (8002bd4 <TIM_Base_SetConfig+0xa8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d103      	bne.n	8002bc4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	615a      	str	r2, [r3, #20]
}
 8002bca:	bf00      	nop
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr
 8002bd4:	40012c00 	.word	0x40012c00
 8002bd8:	40000400 	.word	0x40000400

08002bdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	f023 0201 	bic.w	r2, r3, #1
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f023 030a 	bic.w	r3, r3, #10
 8002c18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	621a      	str	r2, [r3, #32]
}
 8002c2e:	bf00      	nop
 8002c30:	371c      	adds	r7, #28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f023 0210 	bic.w	r2, r3, #16
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	031b      	lsls	r3, r3, #12
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	621a      	str	r2, [r3, #32]
}
 8002c8c:	bf00      	nop
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr

08002c96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b085      	sub	sp, #20
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f043 0307 	orr.w	r3, r3, #7
 8002cb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	609a      	str	r2, [r3, #8]
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr

08002cca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b087      	sub	sp, #28
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
 8002cd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ce4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	021a      	lsls	r2, r3, #8
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	431a      	orrs	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	609a      	str	r2, [r3, #8]
}
 8002cfe:	bf00      	nop
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e032      	b.n	8002d86 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d58:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr

08002da2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <__cvt>:
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dba:	461d      	mov	r5, r3
 8002dbc:	bfbb      	ittet	lt
 8002dbe:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002dc2:	461d      	movlt	r5, r3
 8002dc4:	2300      	movge	r3, #0
 8002dc6:	232d      	movlt	r3, #45	@ 0x2d
 8002dc8:	b088      	sub	sp, #32
 8002dca:	4614      	mov	r4, r2
 8002dcc:	bfb8      	it	lt
 8002dce:	4614      	movlt	r4, r2
 8002dd0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002dd2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002dd4:	7013      	strb	r3, [r2, #0]
 8002dd6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002dd8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002ddc:	f023 0820 	bic.w	r8, r3, #32
 8002de0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002de4:	d005      	beq.n	8002df2 <__cvt+0x3e>
 8002de6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002dea:	d100      	bne.n	8002dee <__cvt+0x3a>
 8002dec:	3601      	adds	r6, #1
 8002dee:	2302      	movs	r3, #2
 8002df0:	e000      	b.n	8002df4 <__cvt+0x40>
 8002df2:	2303      	movs	r3, #3
 8002df4:	aa07      	add	r2, sp, #28
 8002df6:	9204      	str	r2, [sp, #16]
 8002df8:	aa06      	add	r2, sp, #24
 8002dfa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002dfe:	e9cd 3600 	strd	r3, r6, [sp]
 8002e02:	4622      	mov	r2, r4
 8002e04:	462b      	mov	r3, r5
 8002e06:	f000 fdf3 	bl	80039f0 <_dtoa_r>
 8002e0a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002e0e:	4607      	mov	r7, r0
 8002e10:	d119      	bne.n	8002e46 <__cvt+0x92>
 8002e12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002e14:	07db      	lsls	r3, r3, #31
 8002e16:	d50e      	bpl.n	8002e36 <__cvt+0x82>
 8002e18:	eb00 0906 	add.w	r9, r0, r6
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2300      	movs	r3, #0
 8002e20:	4620      	mov	r0, r4
 8002e22:	4629      	mov	r1, r5
 8002e24:	f7fd fdc0 	bl	80009a8 <__aeabi_dcmpeq>
 8002e28:	b108      	cbz	r0, 8002e2e <__cvt+0x7a>
 8002e2a:	f8cd 901c 	str.w	r9, [sp, #28]
 8002e2e:	2230      	movs	r2, #48	@ 0x30
 8002e30:	9b07      	ldr	r3, [sp, #28]
 8002e32:	454b      	cmp	r3, r9
 8002e34:	d31e      	bcc.n	8002e74 <__cvt+0xc0>
 8002e36:	4638      	mov	r0, r7
 8002e38:	9b07      	ldr	r3, [sp, #28]
 8002e3a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002e3c:	1bdb      	subs	r3, r3, r7
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	b008      	add	sp, #32
 8002e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e46:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002e4a:	eb00 0906 	add.w	r9, r0, r6
 8002e4e:	d1e5      	bne.n	8002e1c <__cvt+0x68>
 8002e50:	7803      	ldrb	r3, [r0, #0]
 8002e52:	2b30      	cmp	r3, #48	@ 0x30
 8002e54:	d10a      	bne.n	8002e6c <__cvt+0xb8>
 8002e56:	2200      	movs	r2, #0
 8002e58:	2300      	movs	r3, #0
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	4629      	mov	r1, r5
 8002e5e:	f7fd fda3 	bl	80009a8 <__aeabi_dcmpeq>
 8002e62:	b918      	cbnz	r0, 8002e6c <__cvt+0xb8>
 8002e64:	f1c6 0601 	rsb	r6, r6, #1
 8002e68:	f8ca 6000 	str.w	r6, [sl]
 8002e6c:	f8da 3000 	ldr.w	r3, [sl]
 8002e70:	4499      	add	r9, r3
 8002e72:	e7d3      	b.n	8002e1c <__cvt+0x68>
 8002e74:	1c59      	adds	r1, r3, #1
 8002e76:	9107      	str	r1, [sp, #28]
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	e7d9      	b.n	8002e30 <__cvt+0x7c>

08002e7c <__exponent>:
 8002e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e7e:	2900      	cmp	r1, #0
 8002e80:	bfb6      	itet	lt
 8002e82:	232d      	movlt	r3, #45	@ 0x2d
 8002e84:	232b      	movge	r3, #43	@ 0x2b
 8002e86:	4249      	neglt	r1, r1
 8002e88:	2909      	cmp	r1, #9
 8002e8a:	7002      	strb	r2, [r0, #0]
 8002e8c:	7043      	strb	r3, [r0, #1]
 8002e8e:	dd29      	ble.n	8002ee4 <__exponent+0x68>
 8002e90:	f10d 0307 	add.w	r3, sp, #7
 8002e94:	461d      	mov	r5, r3
 8002e96:	270a      	movs	r7, #10
 8002e98:	fbb1 f6f7 	udiv	r6, r1, r7
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	fb07 1416 	mls	r4, r7, r6, r1
 8002ea2:	3430      	adds	r4, #48	@ 0x30
 8002ea4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002ea8:	460c      	mov	r4, r1
 8002eaa:	2c63      	cmp	r4, #99	@ 0x63
 8002eac:	4631      	mov	r1, r6
 8002eae:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8002eb2:	dcf1      	bgt.n	8002e98 <__exponent+0x1c>
 8002eb4:	3130      	adds	r1, #48	@ 0x30
 8002eb6:	1e94      	subs	r4, r2, #2
 8002eb8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002ebc:	4623      	mov	r3, r4
 8002ebe:	1c41      	adds	r1, r0, #1
 8002ec0:	42ab      	cmp	r3, r5
 8002ec2:	d30a      	bcc.n	8002eda <__exponent+0x5e>
 8002ec4:	f10d 0309 	add.w	r3, sp, #9
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	42ac      	cmp	r4, r5
 8002ecc:	bf88      	it	hi
 8002ece:	2300      	movhi	r3, #0
 8002ed0:	3302      	adds	r3, #2
 8002ed2:	4403      	add	r3, r0
 8002ed4:	1a18      	subs	r0, r3, r0
 8002ed6:	b003      	add	sp, #12
 8002ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eda:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002ede:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002ee2:	e7ed      	b.n	8002ec0 <__exponent+0x44>
 8002ee4:	2330      	movs	r3, #48	@ 0x30
 8002ee6:	3130      	adds	r1, #48	@ 0x30
 8002ee8:	7083      	strb	r3, [r0, #2]
 8002eea:	70c1      	strb	r1, [r0, #3]
 8002eec:	1d03      	adds	r3, r0, #4
 8002eee:	e7f1      	b.n	8002ed4 <__exponent+0x58>

08002ef0 <_printf_float>:
 8002ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ef4:	b091      	sub	sp, #68	@ 0x44
 8002ef6:	460c      	mov	r4, r1
 8002ef8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8002efc:	4616      	mov	r6, r2
 8002efe:	461f      	mov	r7, r3
 8002f00:	4605      	mov	r5, r0
 8002f02:	f000 fcd9 	bl	80038b8 <_localeconv_r>
 8002f06:	6803      	ldr	r3, [r0, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	9308      	str	r3, [sp, #32]
 8002f0c:	f7fd f920 	bl	8000150 <strlen>
 8002f10:	2300      	movs	r3, #0
 8002f12:	930e      	str	r3, [sp, #56]	@ 0x38
 8002f14:	f8d8 3000 	ldr.w	r3, [r8]
 8002f18:	9009      	str	r0, [sp, #36]	@ 0x24
 8002f1a:	3307      	adds	r3, #7
 8002f1c:	f023 0307 	bic.w	r3, r3, #7
 8002f20:	f103 0208 	add.w	r2, r3, #8
 8002f24:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002f28:	f8d4 b000 	ldr.w	fp, [r4]
 8002f2c:	f8c8 2000 	str.w	r2, [r8]
 8002f30:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f34:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002f38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002f3a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002f3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002f46:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002f4a:	4b9c      	ldr	r3, [pc, #624]	@ (80031bc <_printf_float+0x2cc>)
 8002f4c:	f7fd fd5e 	bl	8000a0c <__aeabi_dcmpun>
 8002f50:	bb70      	cbnz	r0, 8002fb0 <_printf_float+0xc0>
 8002f52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002f56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f5a:	4b98      	ldr	r3, [pc, #608]	@ (80031bc <_printf_float+0x2cc>)
 8002f5c:	f7fd fd38 	bl	80009d0 <__aeabi_dcmple>
 8002f60:	bb30      	cbnz	r0, 8002fb0 <_printf_float+0xc0>
 8002f62:	2200      	movs	r2, #0
 8002f64:	2300      	movs	r3, #0
 8002f66:	4640      	mov	r0, r8
 8002f68:	4649      	mov	r1, r9
 8002f6a:	f7fd fd27 	bl	80009bc <__aeabi_dcmplt>
 8002f6e:	b110      	cbz	r0, 8002f76 <_printf_float+0x86>
 8002f70:	232d      	movs	r3, #45	@ 0x2d
 8002f72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f76:	4a92      	ldr	r2, [pc, #584]	@ (80031c0 <_printf_float+0x2d0>)
 8002f78:	4b92      	ldr	r3, [pc, #584]	@ (80031c4 <_printf_float+0x2d4>)
 8002f7a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002f7e:	bf8c      	ite	hi
 8002f80:	4690      	movhi	r8, r2
 8002f82:	4698      	movls	r8, r3
 8002f84:	2303      	movs	r3, #3
 8002f86:	f04f 0900 	mov.w	r9, #0
 8002f8a:	6123      	str	r3, [r4, #16]
 8002f8c:	f02b 0304 	bic.w	r3, fp, #4
 8002f90:	6023      	str	r3, [r4, #0]
 8002f92:	4633      	mov	r3, r6
 8002f94:	4621      	mov	r1, r4
 8002f96:	4628      	mov	r0, r5
 8002f98:	9700      	str	r7, [sp, #0]
 8002f9a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8002f9c:	f000 f9d4 	bl	8003348 <_printf_common>
 8002fa0:	3001      	adds	r0, #1
 8002fa2:	f040 8090 	bne.w	80030c6 <_printf_float+0x1d6>
 8002fa6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002faa:	b011      	add	sp, #68	@ 0x44
 8002fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fb0:	4642      	mov	r2, r8
 8002fb2:	464b      	mov	r3, r9
 8002fb4:	4640      	mov	r0, r8
 8002fb6:	4649      	mov	r1, r9
 8002fb8:	f7fd fd28 	bl	8000a0c <__aeabi_dcmpun>
 8002fbc:	b148      	cbz	r0, 8002fd2 <_printf_float+0xe2>
 8002fbe:	464b      	mov	r3, r9
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bfb8      	it	lt
 8002fc4:	232d      	movlt	r3, #45	@ 0x2d
 8002fc6:	4a80      	ldr	r2, [pc, #512]	@ (80031c8 <_printf_float+0x2d8>)
 8002fc8:	bfb8      	it	lt
 8002fca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002fce:	4b7f      	ldr	r3, [pc, #508]	@ (80031cc <_printf_float+0x2dc>)
 8002fd0:	e7d3      	b.n	8002f7a <_printf_float+0x8a>
 8002fd2:	6863      	ldr	r3, [r4, #4]
 8002fd4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	d13f      	bne.n	800305c <_printf_float+0x16c>
 8002fdc:	2306      	movs	r3, #6
 8002fde:	6063      	str	r3, [r4, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8002fe6:	6023      	str	r3, [r4, #0]
 8002fe8:	9206      	str	r2, [sp, #24]
 8002fea:	aa0e      	add	r2, sp, #56	@ 0x38
 8002fec:	e9cd a204 	strd	sl, r2, [sp, #16]
 8002ff0:	aa0d      	add	r2, sp, #52	@ 0x34
 8002ff2:	9203      	str	r2, [sp, #12]
 8002ff4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8002ff8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002ffc:	6863      	ldr	r3, [r4, #4]
 8002ffe:	4642      	mov	r2, r8
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	4628      	mov	r0, r5
 8003004:	464b      	mov	r3, r9
 8003006:	910a      	str	r1, [sp, #40]	@ 0x28
 8003008:	f7ff fed4 	bl	8002db4 <__cvt>
 800300c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800300e:	4680      	mov	r8, r0
 8003010:	2947      	cmp	r1, #71	@ 0x47
 8003012:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003014:	d128      	bne.n	8003068 <_printf_float+0x178>
 8003016:	1cc8      	adds	r0, r1, #3
 8003018:	db02      	blt.n	8003020 <_printf_float+0x130>
 800301a:	6863      	ldr	r3, [r4, #4]
 800301c:	4299      	cmp	r1, r3
 800301e:	dd40      	ble.n	80030a2 <_printf_float+0x1b2>
 8003020:	f1aa 0a02 	sub.w	sl, sl, #2
 8003024:	fa5f fa8a 	uxtb.w	sl, sl
 8003028:	4652      	mov	r2, sl
 800302a:	3901      	subs	r1, #1
 800302c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003030:	910d      	str	r1, [sp, #52]	@ 0x34
 8003032:	f7ff ff23 	bl	8002e7c <__exponent>
 8003036:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003038:	4681      	mov	r9, r0
 800303a:	1813      	adds	r3, r2, r0
 800303c:	2a01      	cmp	r2, #1
 800303e:	6123      	str	r3, [r4, #16]
 8003040:	dc02      	bgt.n	8003048 <_printf_float+0x158>
 8003042:	6822      	ldr	r2, [r4, #0]
 8003044:	07d2      	lsls	r2, r2, #31
 8003046:	d501      	bpl.n	800304c <_printf_float+0x15c>
 8003048:	3301      	adds	r3, #1
 800304a:	6123      	str	r3, [r4, #16]
 800304c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003050:	2b00      	cmp	r3, #0
 8003052:	d09e      	beq.n	8002f92 <_printf_float+0xa2>
 8003054:	232d      	movs	r3, #45	@ 0x2d
 8003056:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800305a:	e79a      	b.n	8002f92 <_printf_float+0xa2>
 800305c:	2947      	cmp	r1, #71	@ 0x47
 800305e:	d1bf      	bne.n	8002fe0 <_printf_float+0xf0>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1bd      	bne.n	8002fe0 <_printf_float+0xf0>
 8003064:	2301      	movs	r3, #1
 8003066:	e7ba      	b.n	8002fde <_printf_float+0xee>
 8003068:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800306c:	d9dc      	bls.n	8003028 <_printf_float+0x138>
 800306e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003072:	d118      	bne.n	80030a6 <_printf_float+0x1b6>
 8003074:	2900      	cmp	r1, #0
 8003076:	6863      	ldr	r3, [r4, #4]
 8003078:	dd0b      	ble.n	8003092 <_printf_float+0x1a2>
 800307a:	6121      	str	r1, [r4, #16]
 800307c:	b913      	cbnz	r3, 8003084 <_printf_float+0x194>
 800307e:	6822      	ldr	r2, [r4, #0]
 8003080:	07d0      	lsls	r0, r2, #31
 8003082:	d502      	bpl.n	800308a <_printf_float+0x19a>
 8003084:	3301      	adds	r3, #1
 8003086:	440b      	add	r3, r1
 8003088:	6123      	str	r3, [r4, #16]
 800308a:	f04f 0900 	mov.w	r9, #0
 800308e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003090:	e7dc      	b.n	800304c <_printf_float+0x15c>
 8003092:	b913      	cbnz	r3, 800309a <_printf_float+0x1aa>
 8003094:	6822      	ldr	r2, [r4, #0]
 8003096:	07d2      	lsls	r2, r2, #31
 8003098:	d501      	bpl.n	800309e <_printf_float+0x1ae>
 800309a:	3302      	adds	r3, #2
 800309c:	e7f4      	b.n	8003088 <_printf_float+0x198>
 800309e:	2301      	movs	r3, #1
 80030a0:	e7f2      	b.n	8003088 <_printf_float+0x198>
 80030a2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80030a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80030a8:	4299      	cmp	r1, r3
 80030aa:	db05      	blt.n	80030b8 <_printf_float+0x1c8>
 80030ac:	6823      	ldr	r3, [r4, #0]
 80030ae:	6121      	str	r1, [r4, #16]
 80030b0:	07d8      	lsls	r0, r3, #31
 80030b2:	d5ea      	bpl.n	800308a <_printf_float+0x19a>
 80030b4:	1c4b      	adds	r3, r1, #1
 80030b6:	e7e7      	b.n	8003088 <_printf_float+0x198>
 80030b8:	2900      	cmp	r1, #0
 80030ba:	bfcc      	ite	gt
 80030bc:	2201      	movgt	r2, #1
 80030be:	f1c1 0202 	rsble	r2, r1, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	e7e0      	b.n	8003088 <_printf_float+0x198>
 80030c6:	6823      	ldr	r3, [r4, #0]
 80030c8:	055a      	lsls	r2, r3, #21
 80030ca:	d407      	bmi.n	80030dc <_printf_float+0x1ec>
 80030cc:	6923      	ldr	r3, [r4, #16]
 80030ce:	4642      	mov	r2, r8
 80030d0:	4631      	mov	r1, r6
 80030d2:	4628      	mov	r0, r5
 80030d4:	47b8      	blx	r7
 80030d6:	3001      	adds	r0, #1
 80030d8:	d12b      	bne.n	8003132 <_printf_float+0x242>
 80030da:	e764      	b.n	8002fa6 <_printf_float+0xb6>
 80030dc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80030e0:	f240 80dc 	bls.w	800329c <_printf_float+0x3ac>
 80030e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80030e8:	2200      	movs	r2, #0
 80030ea:	2300      	movs	r3, #0
 80030ec:	f7fd fc5c 	bl	80009a8 <__aeabi_dcmpeq>
 80030f0:	2800      	cmp	r0, #0
 80030f2:	d033      	beq.n	800315c <_printf_float+0x26c>
 80030f4:	2301      	movs	r3, #1
 80030f6:	4631      	mov	r1, r6
 80030f8:	4628      	mov	r0, r5
 80030fa:	4a35      	ldr	r2, [pc, #212]	@ (80031d0 <_printf_float+0x2e0>)
 80030fc:	47b8      	blx	r7
 80030fe:	3001      	adds	r0, #1
 8003100:	f43f af51 	beq.w	8002fa6 <_printf_float+0xb6>
 8003104:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003108:	4543      	cmp	r3, r8
 800310a:	db02      	blt.n	8003112 <_printf_float+0x222>
 800310c:	6823      	ldr	r3, [r4, #0]
 800310e:	07d8      	lsls	r0, r3, #31
 8003110:	d50f      	bpl.n	8003132 <_printf_float+0x242>
 8003112:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003116:	4631      	mov	r1, r6
 8003118:	4628      	mov	r0, r5
 800311a:	47b8      	blx	r7
 800311c:	3001      	adds	r0, #1
 800311e:	f43f af42 	beq.w	8002fa6 <_printf_float+0xb6>
 8003122:	f04f 0900 	mov.w	r9, #0
 8003126:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800312a:	f104 0a1a 	add.w	sl, r4, #26
 800312e:	45c8      	cmp	r8, r9
 8003130:	dc09      	bgt.n	8003146 <_printf_float+0x256>
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	079b      	lsls	r3, r3, #30
 8003136:	f100 8102 	bmi.w	800333e <_printf_float+0x44e>
 800313a:	68e0      	ldr	r0, [r4, #12]
 800313c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800313e:	4298      	cmp	r0, r3
 8003140:	bfb8      	it	lt
 8003142:	4618      	movlt	r0, r3
 8003144:	e731      	b.n	8002faa <_printf_float+0xba>
 8003146:	2301      	movs	r3, #1
 8003148:	4652      	mov	r2, sl
 800314a:	4631      	mov	r1, r6
 800314c:	4628      	mov	r0, r5
 800314e:	47b8      	blx	r7
 8003150:	3001      	adds	r0, #1
 8003152:	f43f af28 	beq.w	8002fa6 <_printf_float+0xb6>
 8003156:	f109 0901 	add.w	r9, r9, #1
 800315a:	e7e8      	b.n	800312e <_printf_float+0x23e>
 800315c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800315e:	2b00      	cmp	r3, #0
 8003160:	dc38      	bgt.n	80031d4 <_printf_float+0x2e4>
 8003162:	2301      	movs	r3, #1
 8003164:	4631      	mov	r1, r6
 8003166:	4628      	mov	r0, r5
 8003168:	4a19      	ldr	r2, [pc, #100]	@ (80031d0 <_printf_float+0x2e0>)
 800316a:	47b8      	blx	r7
 800316c:	3001      	adds	r0, #1
 800316e:	f43f af1a 	beq.w	8002fa6 <_printf_float+0xb6>
 8003172:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003176:	ea59 0303 	orrs.w	r3, r9, r3
 800317a:	d102      	bne.n	8003182 <_printf_float+0x292>
 800317c:	6823      	ldr	r3, [r4, #0]
 800317e:	07d9      	lsls	r1, r3, #31
 8003180:	d5d7      	bpl.n	8003132 <_printf_float+0x242>
 8003182:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003186:	4631      	mov	r1, r6
 8003188:	4628      	mov	r0, r5
 800318a:	47b8      	blx	r7
 800318c:	3001      	adds	r0, #1
 800318e:	f43f af0a 	beq.w	8002fa6 <_printf_float+0xb6>
 8003192:	f04f 0a00 	mov.w	sl, #0
 8003196:	f104 0b1a 	add.w	fp, r4, #26
 800319a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800319c:	425b      	negs	r3, r3
 800319e:	4553      	cmp	r3, sl
 80031a0:	dc01      	bgt.n	80031a6 <_printf_float+0x2b6>
 80031a2:	464b      	mov	r3, r9
 80031a4:	e793      	b.n	80030ce <_printf_float+0x1de>
 80031a6:	2301      	movs	r3, #1
 80031a8:	465a      	mov	r2, fp
 80031aa:	4631      	mov	r1, r6
 80031ac:	4628      	mov	r0, r5
 80031ae:	47b8      	blx	r7
 80031b0:	3001      	adds	r0, #1
 80031b2:	f43f aef8 	beq.w	8002fa6 <_printf_float+0xb6>
 80031b6:	f10a 0a01 	add.w	sl, sl, #1
 80031ba:	e7ee      	b.n	800319a <_printf_float+0x2aa>
 80031bc:	7fefffff 	.word	0x7fefffff
 80031c0:	08005b84 	.word	0x08005b84
 80031c4:	08005b80 	.word	0x08005b80
 80031c8:	08005b8c 	.word	0x08005b8c
 80031cc:	08005b88 	.word	0x08005b88
 80031d0:	08005b90 	.word	0x08005b90
 80031d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80031d6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80031da:	4553      	cmp	r3, sl
 80031dc:	bfa8      	it	ge
 80031de:	4653      	movge	r3, sl
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	4699      	mov	r9, r3
 80031e4:	dc36      	bgt.n	8003254 <_printf_float+0x364>
 80031e6:	f04f 0b00 	mov.w	fp, #0
 80031ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80031ee:	f104 021a 	add.w	r2, r4, #26
 80031f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80031f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80031f6:	eba3 0309 	sub.w	r3, r3, r9
 80031fa:	455b      	cmp	r3, fp
 80031fc:	dc31      	bgt.n	8003262 <_printf_float+0x372>
 80031fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003200:	459a      	cmp	sl, r3
 8003202:	dc3a      	bgt.n	800327a <_printf_float+0x38a>
 8003204:	6823      	ldr	r3, [r4, #0]
 8003206:	07da      	lsls	r2, r3, #31
 8003208:	d437      	bmi.n	800327a <_printf_float+0x38a>
 800320a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800320c:	ebaa 0903 	sub.w	r9, sl, r3
 8003210:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003212:	ebaa 0303 	sub.w	r3, sl, r3
 8003216:	4599      	cmp	r9, r3
 8003218:	bfa8      	it	ge
 800321a:	4699      	movge	r9, r3
 800321c:	f1b9 0f00 	cmp.w	r9, #0
 8003220:	dc33      	bgt.n	800328a <_printf_float+0x39a>
 8003222:	f04f 0800 	mov.w	r8, #0
 8003226:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800322a:	f104 0b1a 	add.w	fp, r4, #26
 800322e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003230:	ebaa 0303 	sub.w	r3, sl, r3
 8003234:	eba3 0309 	sub.w	r3, r3, r9
 8003238:	4543      	cmp	r3, r8
 800323a:	f77f af7a 	ble.w	8003132 <_printf_float+0x242>
 800323e:	2301      	movs	r3, #1
 8003240:	465a      	mov	r2, fp
 8003242:	4631      	mov	r1, r6
 8003244:	4628      	mov	r0, r5
 8003246:	47b8      	blx	r7
 8003248:	3001      	adds	r0, #1
 800324a:	f43f aeac 	beq.w	8002fa6 <_printf_float+0xb6>
 800324e:	f108 0801 	add.w	r8, r8, #1
 8003252:	e7ec      	b.n	800322e <_printf_float+0x33e>
 8003254:	4642      	mov	r2, r8
 8003256:	4631      	mov	r1, r6
 8003258:	4628      	mov	r0, r5
 800325a:	47b8      	blx	r7
 800325c:	3001      	adds	r0, #1
 800325e:	d1c2      	bne.n	80031e6 <_printf_float+0x2f6>
 8003260:	e6a1      	b.n	8002fa6 <_printf_float+0xb6>
 8003262:	2301      	movs	r3, #1
 8003264:	4631      	mov	r1, r6
 8003266:	4628      	mov	r0, r5
 8003268:	920a      	str	r2, [sp, #40]	@ 0x28
 800326a:	47b8      	blx	r7
 800326c:	3001      	adds	r0, #1
 800326e:	f43f ae9a 	beq.w	8002fa6 <_printf_float+0xb6>
 8003272:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003274:	f10b 0b01 	add.w	fp, fp, #1
 8003278:	e7bb      	b.n	80031f2 <_printf_float+0x302>
 800327a:	4631      	mov	r1, r6
 800327c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003280:	4628      	mov	r0, r5
 8003282:	47b8      	blx	r7
 8003284:	3001      	adds	r0, #1
 8003286:	d1c0      	bne.n	800320a <_printf_float+0x31a>
 8003288:	e68d      	b.n	8002fa6 <_printf_float+0xb6>
 800328a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800328c:	464b      	mov	r3, r9
 800328e:	4631      	mov	r1, r6
 8003290:	4628      	mov	r0, r5
 8003292:	4442      	add	r2, r8
 8003294:	47b8      	blx	r7
 8003296:	3001      	adds	r0, #1
 8003298:	d1c3      	bne.n	8003222 <_printf_float+0x332>
 800329a:	e684      	b.n	8002fa6 <_printf_float+0xb6>
 800329c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80032a0:	f1ba 0f01 	cmp.w	sl, #1
 80032a4:	dc01      	bgt.n	80032aa <_printf_float+0x3ba>
 80032a6:	07db      	lsls	r3, r3, #31
 80032a8:	d536      	bpl.n	8003318 <_printf_float+0x428>
 80032aa:	2301      	movs	r3, #1
 80032ac:	4642      	mov	r2, r8
 80032ae:	4631      	mov	r1, r6
 80032b0:	4628      	mov	r0, r5
 80032b2:	47b8      	blx	r7
 80032b4:	3001      	adds	r0, #1
 80032b6:	f43f ae76 	beq.w	8002fa6 <_printf_float+0xb6>
 80032ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80032be:	4631      	mov	r1, r6
 80032c0:	4628      	mov	r0, r5
 80032c2:	47b8      	blx	r7
 80032c4:	3001      	adds	r0, #1
 80032c6:	f43f ae6e 	beq.w	8002fa6 <_printf_float+0xb6>
 80032ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80032ce:	2200      	movs	r2, #0
 80032d0:	2300      	movs	r3, #0
 80032d2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80032d6:	f7fd fb67 	bl	80009a8 <__aeabi_dcmpeq>
 80032da:	b9c0      	cbnz	r0, 800330e <_printf_float+0x41e>
 80032dc:	4653      	mov	r3, sl
 80032de:	f108 0201 	add.w	r2, r8, #1
 80032e2:	4631      	mov	r1, r6
 80032e4:	4628      	mov	r0, r5
 80032e6:	47b8      	blx	r7
 80032e8:	3001      	adds	r0, #1
 80032ea:	d10c      	bne.n	8003306 <_printf_float+0x416>
 80032ec:	e65b      	b.n	8002fa6 <_printf_float+0xb6>
 80032ee:	2301      	movs	r3, #1
 80032f0:	465a      	mov	r2, fp
 80032f2:	4631      	mov	r1, r6
 80032f4:	4628      	mov	r0, r5
 80032f6:	47b8      	blx	r7
 80032f8:	3001      	adds	r0, #1
 80032fa:	f43f ae54 	beq.w	8002fa6 <_printf_float+0xb6>
 80032fe:	f108 0801 	add.w	r8, r8, #1
 8003302:	45d0      	cmp	r8, sl
 8003304:	dbf3      	blt.n	80032ee <_printf_float+0x3fe>
 8003306:	464b      	mov	r3, r9
 8003308:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800330c:	e6e0      	b.n	80030d0 <_printf_float+0x1e0>
 800330e:	f04f 0800 	mov.w	r8, #0
 8003312:	f104 0b1a 	add.w	fp, r4, #26
 8003316:	e7f4      	b.n	8003302 <_printf_float+0x412>
 8003318:	2301      	movs	r3, #1
 800331a:	4642      	mov	r2, r8
 800331c:	e7e1      	b.n	80032e2 <_printf_float+0x3f2>
 800331e:	2301      	movs	r3, #1
 8003320:	464a      	mov	r2, r9
 8003322:	4631      	mov	r1, r6
 8003324:	4628      	mov	r0, r5
 8003326:	47b8      	blx	r7
 8003328:	3001      	adds	r0, #1
 800332a:	f43f ae3c 	beq.w	8002fa6 <_printf_float+0xb6>
 800332e:	f108 0801 	add.w	r8, r8, #1
 8003332:	68e3      	ldr	r3, [r4, #12]
 8003334:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003336:	1a5b      	subs	r3, r3, r1
 8003338:	4543      	cmp	r3, r8
 800333a:	dcf0      	bgt.n	800331e <_printf_float+0x42e>
 800333c:	e6fd      	b.n	800313a <_printf_float+0x24a>
 800333e:	f04f 0800 	mov.w	r8, #0
 8003342:	f104 0919 	add.w	r9, r4, #25
 8003346:	e7f4      	b.n	8003332 <_printf_float+0x442>

08003348 <_printf_common>:
 8003348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800334c:	4616      	mov	r6, r2
 800334e:	4698      	mov	r8, r3
 8003350:	688a      	ldr	r2, [r1, #8]
 8003352:	690b      	ldr	r3, [r1, #16]
 8003354:	4607      	mov	r7, r0
 8003356:	4293      	cmp	r3, r2
 8003358:	bfb8      	it	lt
 800335a:	4613      	movlt	r3, r2
 800335c:	6033      	str	r3, [r6, #0]
 800335e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003362:	460c      	mov	r4, r1
 8003364:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003368:	b10a      	cbz	r2, 800336e <_printf_common+0x26>
 800336a:	3301      	adds	r3, #1
 800336c:	6033      	str	r3, [r6, #0]
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	0699      	lsls	r1, r3, #26
 8003372:	bf42      	ittt	mi
 8003374:	6833      	ldrmi	r3, [r6, #0]
 8003376:	3302      	addmi	r3, #2
 8003378:	6033      	strmi	r3, [r6, #0]
 800337a:	6825      	ldr	r5, [r4, #0]
 800337c:	f015 0506 	ands.w	r5, r5, #6
 8003380:	d106      	bne.n	8003390 <_printf_common+0x48>
 8003382:	f104 0a19 	add.w	sl, r4, #25
 8003386:	68e3      	ldr	r3, [r4, #12]
 8003388:	6832      	ldr	r2, [r6, #0]
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	42ab      	cmp	r3, r5
 800338e:	dc2b      	bgt.n	80033e8 <_printf_common+0xa0>
 8003390:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003394:	6822      	ldr	r2, [r4, #0]
 8003396:	3b00      	subs	r3, #0
 8003398:	bf18      	it	ne
 800339a:	2301      	movne	r3, #1
 800339c:	0692      	lsls	r2, r2, #26
 800339e:	d430      	bmi.n	8003402 <_printf_common+0xba>
 80033a0:	4641      	mov	r1, r8
 80033a2:	4638      	mov	r0, r7
 80033a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80033a8:	47c8      	blx	r9
 80033aa:	3001      	adds	r0, #1
 80033ac:	d023      	beq.n	80033f6 <_printf_common+0xae>
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	6922      	ldr	r2, [r4, #16]
 80033b2:	f003 0306 	and.w	r3, r3, #6
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	bf14      	ite	ne
 80033ba:	2500      	movne	r5, #0
 80033bc:	6833      	ldreq	r3, [r6, #0]
 80033be:	f04f 0600 	mov.w	r6, #0
 80033c2:	bf08      	it	eq
 80033c4:	68e5      	ldreq	r5, [r4, #12]
 80033c6:	f104 041a 	add.w	r4, r4, #26
 80033ca:	bf08      	it	eq
 80033cc:	1aed      	subeq	r5, r5, r3
 80033ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80033d2:	bf08      	it	eq
 80033d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033d8:	4293      	cmp	r3, r2
 80033da:	bfc4      	itt	gt
 80033dc:	1a9b      	subgt	r3, r3, r2
 80033de:	18ed      	addgt	r5, r5, r3
 80033e0:	42b5      	cmp	r5, r6
 80033e2:	d11a      	bne.n	800341a <_printf_common+0xd2>
 80033e4:	2000      	movs	r0, #0
 80033e6:	e008      	b.n	80033fa <_printf_common+0xb2>
 80033e8:	2301      	movs	r3, #1
 80033ea:	4652      	mov	r2, sl
 80033ec:	4641      	mov	r1, r8
 80033ee:	4638      	mov	r0, r7
 80033f0:	47c8      	blx	r9
 80033f2:	3001      	adds	r0, #1
 80033f4:	d103      	bne.n	80033fe <_printf_common+0xb6>
 80033f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033fe:	3501      	adds	r5, #1
 8003400:	e7c1      	b.n	8003386 <_printf_common+0x3e>
 8003402:	2030      	movs	r0, #48	@ 0x30
 8003404:	18e1      	adds	r1, r4, r3
 8003406:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003410:	4422      	add	r2, r4
 8003412:	3302      	adds	r3, #2
 8003414:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003418:	e7c2      	b.n	80033a0 <_printf_common+0x58>
 800341a:	2301      	movs	r3, #1
 800341c:	4622      	mov	r2, r4
 800341e:	4641      	mov	r1, r8
 8003420:	4638      	mov	r0, r7
 8003422:	47c8      	blx	r9
 8003424:	3001      	adds	r0, #1
 8003426:	d0e6      	beq.n	80033f6 <_printf_common+0xae>
 8003428:	3601      	adds	r6, #1
 800342a:	e7d9      	b.n	80033e0 <_printf_common+0x98>

0800342c <_printf_i>:
 800342c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003430:	7e0f      	ldrb	r7, [r1, #24]
 8003432:	4691      	mov	r9, r2
 8003434:	2f78      	cmp	r7, #120	@ 0x78
 8003436:	4680      	mov	r8, r0
 8003438:	460c      	mov	r4, r1
 800343a:	469a      	mov	sl, r3
 800343c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800343e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003442:	d807      	bhi.n	8003454 <_printf_i+0x28>
 8003444:	2f62      	cmp	r7, #98	@ 0x62
 8003446:	d80a      	bhi.n	800345e <_printf_i+0x32>
 8003448:	2f00      	cmp	r7, #0
 800344a:	f000 80d1 	beq.w	80035f0 <_printf_i+0x1c4>
 800344e:	2f58      	cmp	r7, #88	@ 0x58
 8003450:	f000 80b8 	beq.w	80035c4 <_printf_i+0x198>
 8003454:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003458:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800345c:	e03a      	b.n	80034d4 <_printf_i+0xa8>
 800345e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003462:	2b15      	cmp	r3, #21
 8003464:	d8f6      	bhi.n	8003454 <_printf_i+0x28>
 8003466:	a101      	add	r1, pc, #4	@ (adr r1, 800346c <_printf_i+0x40>)
 8003468:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800346c:	080034c5 	.word	0x080034c5
 8003470:	080034d9 	.word	0x080034d9
 8003474:	08003455 	.word	0x08003455
 8003478:	08003455 	.word	0x08003455
 800347c:	08003455 	.word	0x08003455
 8003480:	08003455 	.word	0x08003455
 8003484:	080034d9 	.word	0x080034d9
 8003488:	08003455 	.word	0x08003455
 800348c:	08003455 	.word	0x08003455
 8003490:	08003455 	.word	0x08003455
 8003494:	08003455 	.word	0x08003455
 8003498:	080035d7 	.word	0x080035d7
 800349c:	08003503 	.word	0x08003503
 80034a0:	08003591 	.word	0x08003591
 80034a4:	08003455 	.word	0x08003455
 80034a8:	08003455 	.word	0x08003455
 80034ac:	080035f9 	.word	0x080035f9
 80034b0:	08003455 	.word	0x08003455
 80034b4:	08003503 	.word	0x08003503
 80034b8:	08003455 	.word	0x08003455
 80034bc:	08003455 	.word	0x08003455
 80034c0:	08003599 	.word	0x08003599
 80034c4:	6833      	ldr	r3, [r6, #0]
 80034c6:	1d1a      	adds	r2, r3, #4
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6032      	str	r2, [r6, #0]
 80034cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80034d4:	2301      	movs	r3, #1
 80034d6:	e09c      	b.n	8003612 <_printf_i+0x1e6>
 80034d8:	6833      	ldr	r3, [r6, #0]
 80034da:	6820      	ldr	r0, [r4, #0]
 80034dc:	1d19      	adds	r1, r3, #4
 80034de:	6031      	str	r1, [r6, #0]
 80034e0:	0606      	lsls	r6, r0, #24
 80034e2:	d501      	bpl.n	80034e8 <_printf_i+0xbc>
 80034e4:	681d      	ldr	r5, [r3, #0]
 80034e6:	e003      	b.n	80034f0 <_printf_i+0xc4>
 80034e8:	0645      	lsls	r5, r0, #25
 80034ea:	d5fb      	bpl.n	80034e4 <_printf_i+0xb8>
 80034ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80034f0:	2d00      	cmp	r5, #0
 80034f2:	da03      	bge.n	80034fc <_printf_i+0xd0>
 80034f4:	232d      	movs	r3, #45	@ 0x2d
 80034f6:	426d      	negs	r5, r5
 80034f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034fc:	230a      	movs	r3, #10
 80034fe:	4858      	ldr	r0, [pc, #352]	@ (8003660 <_printf_i+0x234>)
 8003500:	e011      	b.n	8003526 <_printf_i+0xfa>
 8003502:	6821      	ldr	r1, [r4, #0]
 8003504:	6833      	ldr	r3, [r6, #0]
 8003506:	0608      	lsls	r0, r1, #24
 8003508:	f853 5b04 	ldr.w	r5, [r3], #4
 800350c:	d402      	bmi.n	8003514 <_printf_i+0xe8>
 800350e:	0649      	lsls	r1, r1, #25
 8003510:	bf48      	it	mi
 8003512:	b2ad      	uxthmi	r5, r5
 8003514:	2f6f      	cmp	r7, #111	@ 0x6f
 8003516:	6033      	str	r3, [r6, #0]
 8003518:	bf14      	ite	ne
 800351a:	230a      	movne	r3, #10
 800351c:	2308      	moveq	r3, #8
 800351e:	4850      	ldr	r0, [pc, #320]	@ (8003660 <_printf_i+0x234>)
 8003520:	2100      	movs	r1, #0
 8003522:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003526:	6866      	ldr	r6, [r4, #4]
 8003528:	2e00      	cmp	r6, #0
 800352a:	60a6      	str	r6, [r4, #8]
 800352c:	db05      	blt.n	800353a <_printf_i+0x10e>
 800352e:	6821      	ldr	r1, [r4, #0]
 8003530:	432e      	orrs	r6, r5
 8003532:	f021 0104 	bic.w	r1, r1, #4
 8003536:	6021      	str	r1, [r4, #0]
 8003538:	d04b      	beq.n	80035d2 <_printf_i+0x1a6>
 800353a:	4616      	mov	r6, r2
 800353c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003540:	fb03 5711 	mls	r7, r3, r1, r5
 8003544:	5dc7      	ldrb	r7, [r0, r7]
 8003546:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800354a:	462f      	mov	r7, r5
 800354c:	42bb      	cmp	r3, r7
 800354e:	460d      	mov	r5, r1
 8003550:	d9f4      	bls.n	800353c <_printf_i+0x110>
 8003552:	2b08      	cmp	r3, #8
 8003554:	d10b      	bne.n	800356e <_printf_i+0x142>
 8003556:	6823      	ldr	r3, [r4, #0]
 8003558:	07df      	lsls	r7, r3, #31
 800355a:	d508      	bpl.n	800356e <_printf_i+0x142>
 800355c:	6923      	ldr	r3, [r4, #16]
 800355e:	6861      	ldr	r1, [r4, #4]
 8003560:	4299      	cmp	r1, r3
 8003562:	bfde      	ittt	le
 8003564:	2330      	movle	r3, #48	@ 0x30
 8003566:	f806 3c01 	strble.w	r3, [r6, #-1]
 800356a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800356e:	1b92      	subs	r2, r2, r6
 8003570:	6122      	str	r2, [r4, #16]
 8003572:	464b      	mov	r3, r9
 8003574:	4621      	mov	r1, r4
 8003576:	4640      	mov	r0, r8
 8003578:	f8cd a000 	str.w	sl, [sp]
 800357c:	aa03      	add	r2, sp, #12
 800357e:	f7ff fee3 	bl	8003348 <_printf_common>
 8003582:	3001      	adds	r0, #1
 8003584:	d14a      	bne.n	800361c <_printf_i+0x1f0>
 8003586:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800358a:	b004      	add	sp, #16
 800358c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003590:	6823      	ldr	r3, [r4, #0]
 8003592:	f043 0320 	orr.w	r3, r3, #32
 8003596:	6023      	str	r3, [r4, #0]
 8003598:	2778      	movs	r7, #120	@ 0x78
 800359a:	4832      	ldr	r0, [pc, #200]	@ (8003664 <_printf_i+0x238>)
 800359c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	6831      	ldr	r1, [r6, #0]
 80035a4:	061f      	lsls	r7, r3, #24
 80035a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80035aa:	d402      	bmi.n	80035b2 <_printf_i+0x186>
 80035ac:	065f      	lsls	r7, r3, #25
 80035ae:	bf48      	it	mi
 80035b0:	b2ad      	uxthmi	r5, r5
 80035b2:	6031      	str	r1, [r6, #0]
 80035b4:	07d9      	lsls	r1, r3, #31
 80035b6:	bf44      	itt	mi
 80035b8:	f043 0320 	orrmi.w	r3, r3, #32
 80035bc:	6023      	strmi	r3, [r4, #0]
 80035be:	b11d      	cbz	r5, 80035c8 <_printf_i+0x19c>
 80035c0:	2310      	movs	r3, #16
 80035c2:	e7ad      	b.n	8003520 <_printf_i+0xf4>
 80035c4:	4826      	ldr	r0, [pc, #152]	@ (8003660 <_printf_i+0x234>)
 80035c6:	e7e9      	b.n	800359c <_printf_i+0x170>
 80035c8:	6823      	ldr	r3, [r4, #0]
 80035ca:	f023 0320 	bic.w	r3, r3, #32
 80035ce:	6023      	str	r3, [r4, #0]
 80035d0:	e7f6      	b.n	80035c0 <_printf_i+0x194>
 80035d2:	4616      	mov	r6, r2
 80035d4:	e7bd      	b.n	8003552 <_printf_i+0x126>
 80035d6:	6833      	ldr	r3, [r6, #0]
 80035d8:	6825      	ldr	r5, [r4, #0]
 80035da:	1d18      	adds	r0, r3, #4
 80035dc:	6961      	ldr	r1, [r4, #20]
 80035de:	6030      	str	r0, [r6, #0]
 80035e0:	062e      	lsls	r6, r5, #24
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	d501      	bpl.n	80035ea <_printf_i+0x1be>
 80035e6:	6019      	str	r1, [r3, #0]
 80035e8:	e002      	b.n	80035f0 <_printf_i+0x1c4>
 80035ea:	0668      	lsls	r0, r5, #25
 80035ec:	d5fb      	bpl.n	80035e6 <_printf_i+0x1ba>
 80035ee:	8019      	strh	r1, [r3, #0]
 80035f0:	2300      	movs	r3, #0
 80035f2:	4616      	mov	r6, r2
 80035f4:	6123      	str	r3, [r4, #16]
 80035f6:	e7bc      	b.n	8003572 <_printf_i+0x146>
 80035f8:	6833      	ldr	r3, [r6, #0]
 80035fa:	2100      	movs	r1, #0
 80035fc:	1d1a      	adds	r2, r3, #4
 80035fe:	6032      	str	r2, [r6, #0]
 8003600:	681e      	ldr	r6, [r3, #0]
 8003602:	6862      	ldr	r2, [r4, #4]
 8003604:	4630      	mov	r0, r6
 8003606:	f000 f95b 	bl	80038c0 <memchr>
 800360a:	b108      	cbz	r0, 8003610 <_printf_i+0x1e4>
 800360c:	1b80      	subs	r0, r0, r6
 800360e:	6060      	str	r0, [r4, #4]
 8003610:	6863      	ldr	r3, [r4, #4]
 8003612:	6123      	str	r3, [r4, #16]
 8003614:	2300      	movs	r3, #0
 8003616:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800361a:	e7aa      	b.n	8003572 <_printf_i+0x146>
 800361c:	4632      	mov	r2, r6
 800361e:	4649      	mov	r1, r9
 8003620:	4640      	mov	r0, r8
 8003622:	6923      	ldr	r3, [r4, #16]
 8003624:	47d0      	blx	sl
 8003626:	3001      	adds	r0, #1
 8003628:	d0ad      	beq.n	8003586 <_printf_i+0x15a>
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	079b      	lsls	r3, r3, #30
 800362e:	d413      	bmi.n	8003658 <_printf_i+0x22c>
 8003630:	68e0      	ldr	r0, [r4, #12]
 8003632:	9b03      	ldr	r3, [sp, #12]
 8003634:	4298      	cmp	r0, r3
 8003636:	bfb8      	it	lt
 8003638:	4618      	movlt	r0, r3
 800363a:	e7a6      	b.n	800358a <_printf_i+0x15e>
 800363c:	2301      	movs	r3, #1
 800363e:	4632      	mov	r2, r6
 8003640:	4649      	mov	r1, r9
 8003642:	4640      	mov	r0, r8
 8003644:	47d0      	blx	sl
 8003646:	3001      	adds	r0, #1
 8003648:	d09d      	beq.n	8003586 <_printf_i+0x15a>
 800364a:	3501      	adds	r5, #1
 800364c:	68e3      	ldr	r3, [r4, #12]
 800364e:	9903      	ldr	r1, [sp, #12]
 8003650:	1a5b      	subs	r3, r3, r1
 8003652:	42ab      	cmp	r3, r5
 8003654:	dcf2      	bgt.n	800363c <_printf_i+0x210>
 8003656:	e7eb      	b.n	8003630 <_printf_i+0x204>
 8003658:	2500      	movs	r5, #0
 800365a:	f104 0619 	add.w	r6, r4, #25
 800365e:	e7f5      	b.n	800364c <_printf_i+0x220>
 8003660:	08005b92 	.word	0x08005b92
 8003664:	08005ba3 	.word	0x08005ba3

08003668 <sniprintf>:
 8003668:	b40c      	push	{r2, r3}
 800366a:	b530      	push	{r4, r5, lr}
 800366c:	4b18      	ldr	r3, [pc, #96]	@ (80036d0 <sniprintf+0x68>)
 800366e:	1e0c      	subs	r4, r1, #0
 8003670:	681d      	ldr	r5, [r3, #0]
 8003672:	b09d      	sub	sp, #116	@ 0x74
 8003674:	da08      	bge.n	8003688 <sniprintf+0x20>
 8003676:	238b      	movs	r3, #139	@ 0x8b
 8003678:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800367c:	602b      	str	r3, [r5, #0]
 800367e:	b01d      	add	sp, #116	@ 0x74
 8003680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003684:	b002      	add	sp, #8
 8003686:	4770      	bx	lr
 8003688:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800368c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003690:	f04f 0300 	mov.w	r3, #0
 8003694:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003696:	bf0c      	ite	eq
 8003698:	4623      	moveq	r3, r4
 800369a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800369e:	9304      	str	r3, [sp, #16]
 80036a0:	9307      	str	r3, [sp, #28]
 80036a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036a6:	9002      	str	r0, [sp, #8]
 80036a8:	9006      	str	r0, [sp, #24]
 80036aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80036ae:	4628      	mov	r0, r5
 80036b0:	ab21      	add	r3, sp, #132	@ 0x84
 80036b2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80036b4:	a902      	add	r1, sp, #8
 80036b6:	9301      	str	r3, [sp, #4]
 80036b8:	f000 ffca 	bl	8004650 <_svfiprintf_r>
 80036bc:	1c43      	adds	r3, r0, #1
 80036be:	bfbc      	itt	lt
 80036c0:	238b      	movlt	r3, #139	@ 0x8b
 80036c2:	602b      	strlt	r3, [r5, #0]
 80036c4:	2c00      	cmp	r4, #0
 80036c6:	d0da      	beq.n	800367e <sniprintf+0x16>
 80036c8:	2200      	movs	r2, #0
 80036ca:	9b02      	ldr	r3, [sp, #8]
 80036cc:	701a      	strb	r2, [r3, #0]
 80036ce:	e7d6      	b.n	800367e <sniprintf+0x16>
 80036d0:	20000018 	.word	0x20000018

080036d4 <std>:
 80036d4:	2300      	movs	r3, #0
 80036d6:	b510      	push	{r4, lr}
 80036d8:	4604      	mov	r4, r0
 80036da:	e9c0 3300 	strd	r3, r3, [r0]
 80036de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036e2:	6083      	str	r3, [r0, #8]
 80036e4:	8181      	strh	r1, [r0, #12]
 80036e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80036e8:	81c2      	strh	r2, [r0, #14]
 80036ea:	6183      	str	r3, [r0, #24]
 80036ec:	4619      	mov	r1, r3
 80036ee:	2208      	movs	r2, #8
 80036f0:	305c      	adds	r0, #92	@ 0x5c
 80036f2:	f000 f8b1 	bl	8003858 <memset>
 80036f6:	4b0d      	ldr	r3, [pc, #52]	@ (800372c <std+0x58>)
 80036f8:	6224      	str	r4, [r4, #32]
 80036fa:	6263      	str	r3, [r4, #36]	@ 0x24
 80036fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003730 <std+0x5c>)
 80036fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003700:	4b0c      	ldr	r3, [pc, #48]	@ (8003734 <std+0x60>)
 8003702:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003704:	4b0c      	ldr	r3, [pc, #48]	@ (8003738 <std+0x64>)
 8003706:	6323      	str	r3, [r4, #48]	@ 0x30
 8003708:	4b0c      	ldr	r3, [pc, #48]	@ (800373c <std+0x68>)
 800370a:	429c      	cmp	r4, r3
 800370c:	d006      	beq.n	800371c <std+0x48>
 800370e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003712:	4294      	cmp	r4, r2
 8003714:	d002      	beq.n	800371c <std+0x48>
 8003716:	33d0      	adds	r3, #208	@ 0xd0
 8003718:	429c      	cmp	r4, r3
 800371a:	d105      	bne.n	8003728 <std+0x54>
 800371c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003724:	f000 b8c4 	b.w	80038b0 <__retarget_lock_init_recursive>
 8003728:	bd10      	pop	{r4, pc}
 800372a:	bf00      	nop
 800372c:	080051f9 	.word	0x080051f9
 8003730:	0800521b 	.word	0x0800521b
 8003734:	08005253 	.word	0x08005253
 8003738:	08005277 	.word	0x08005277
 800373c:	20000250 	.word	0x20000250

08003740 <stdio_exit_handler>:
 8003740:	4a02      	ldr	r2, [pc, #8]	@ (800374c <stdio_exit_handler+0xc>)
 8003742:	4903      	ldr	r1, [pc, #12]	@ (8003750 <stdio_exit_handler+0x10>)
 8003744:	4803      	ldr	r0, [pc, #12]	@ (8003754 <stdio_exit_handler+0x14>)
 8003746:	f000 b869 	b.w	800381c <_fwalk_sglue>
 800374a:	bf00      	nop
 800374c:	2000000c 	.word	0x2000000c
 8003750:	08004a9d 	.word	0x08004a9d
 8003754:	2000001c 	.word	0x2000001c

08003758 <cleanup_stdio>:
 8003758:	6841      	ldr	r1, [r0, #4]
 800375a:	4b0c      	ldr	r3, [pc, #48]	@ (800378c <cleanup_stdio+0x34>)
 800375c:	b510      	push	{r4, lr}
 800375e:	4299      	cmp	r1, r3
 8003760:	4604      	mov	r4, r0
 8003762:	d001      	beq.n	8003768 <cleanup_stdio+0x10>
 8003764:	f001 f99a 	bl	8004a9c <_fflush_r>
 8003768:	68a1      	ldr	r1, [r4, #8]
 800376a:	4b09      	ldr	r3, [pc, #36]	@ (8003790 <cleanup_stdio+0x38>)
 800376c:	4299      	cmp	r1, r3
 800376e:	d002      	beq.n	8003776 <cleanup_stdio+0x1e>
 8003770:	4620      	mov	r0, r4
 8003772:	f001 f993 	bl	8004a9c <_fflush_r>
 8003776:	68e1      	ldr	r1, [r4, #12]
 8003778:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <cleanup_stdio+0x3c>)
 800377a:	4299      	cmp	r1, r3
 800377c:	d004      	beq.n	8003788 <cleanup_stdio+0x30>
 800377e:	4620      	mov	r0, r4
 8003780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003784:	f001 b98a 	b.w	8004a9c <_fflush_r>
 8003788:	bd10      	pop	{r4, pc}
 800378a:	bf00      	nop
 800378c:	20000250 	.word	0x20000250
 8003790:	200002b8 	.word	0x200002b8
 8003794:	20000320 	.word	0x20000320

08003798 <global_stdio_init.part.0>:
 8003798:	b510      	push	{r4, lr}
 800379a:	4b0b      	ldr	r3, [pc, #44]	@ (80037c8 <global_stdio_init.part.0+0x30>)
 800379c:	4c0b      	ldr	r4, [pc, #44]	@ (80037cc <global_stdio_init.part.0+0x34>)
 800379e:	4a0c      	ldr	r2, [pc, #48]	@ (80037d0 <global_stdio_init.part.0+0x38>)
 80037a0:	4620      	mov	r0, r4
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	2104      	movs	r1, #4
 80037a6:	2200      	movs	r2, #0
 80037a8:	f7ff ff94 	bl	80036d4 <std>
 80037ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80037b0:	2201      	movs	r2, #1
 80037b2:	2109      	movs	r1, #9
 80037b4:	f7ff ff8e 	bl	80036d4 <std>
 80037b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80037bc:	2202      	movs	r2, #2
 80037be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037c2:	2112      	movs	r1, #18
 80037c4:	f7ff bf86 	b.w	80036d4 <std>
 80037c8:	20000388 	.word	0x20000388
 80037cc:	20000250 	.word	0x20000250
 80037d0:	08003741 	.word	0x08003741

080037d4 <__sfp_lock_acquire>:
 80037d4:	4801      	ldr	r0, [pc, #4]	@ (80037dc <__sfp_lock_acquire+0x8>)
 80037d6:	f000 b86c 	b.w	80038b2 <__retarget_lock_acquire_recursive>
 80037da:	bf00      	nop
 80037dc:	2000038d 	.word	0x2000038d

080037e0 <__sfp_lock_release>:
 80037e0:	4801      	ldr	r0, [pc, #4]	@ (80037e8 <__sfp_lock_release+0x8>)
 80037e2:	f000 b867 	b.w	80038b4 <__retarget_lock_release_recursive>
 80037e6:	bf00      	nop
 80037e8:	2000038d 	.word	0x2000038d

080037ec <__sinit>:
 80037ec:	b510      	push	{r4, lr}
 80037ee:	4604      	mov	r4, r0
 80037f0:	f7ff fff0 	bl	80037d4 <__sfp_lock_acquire>
 80037f4:	6a23      	ldr	r3, [r4, #32]
 80037f6:	b11b      	cbz	r3, 8003800 <__sinit+0x14>
 80037f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037fc:	f7ff bff0 	b.w	80037e0 <__sfp_lock_release>
 8003800:	4b04      	ldr	r3, [pc, #16]	@ (8003814 <__sinit+0x28>)
 8003802:	6223      	str	r3, [r4, #32]
 8003804:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <__sinit+0x2c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f5      	bne.n	80037f8 <__sinit+0xc>
 800380c:	f7ff ffc4 	bl	8003798 <global_stdio_init.part.0>
 8003810:	e7f2      	b.n	80037f8 <__sinit+0xc>
 8003812:	bf00      	nop
 8003814:	08003759 	.word	0x08003759
 8003818:	20000388 	.word	0x20000388

0800381c <_fwalk_sglue>:
 800381c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003820:	4607      	mov	r7, r0
 8003822:	4688      	mov	r8, r1
 8003824:	4614      	mov	r4, r2
 8003826:	2600      	movs	r6, #0
 8003828:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800382c:	f1b9 0901 	subs.w	r9, r9, #1
 8003830:	d505      	bpl.n	800383e <_fwalk_sglue+0x22>
 8003832:	6824      	ldr	r4, [r4, #0]
 8003834:	2c00      	cmp	r4, #0
 8003836:	d1f7      	bne.n	8003828 <_fwalk_sglue+0xc>
 8003838:	4630      	mov	r0, r6
 800383a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800383e:	89ab      	ldrh	r3, [r5, #12]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d907      	bls.n	8003854 <_fwalk_sglue+0x38>
 8003844:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003848:	3301      	adds	r3, #1
 800384a:	d003      	beq.n	8003854 <_fwalk_sglue+0x38>
 800384c:	4629      	mov	r1, r5
 800384e:	4638      	mov	r0, r7
 8003850:	47c0      	blx	r8
 8003852:	4306      	orrs	r6, r0
 8003854:	3568      	adds	r5, #104	@ 0x68
 8003856:	e7e9      	b.n	800382c <_fwalk_sglue+0x10>

08003858 <memset>:
 8003858:	4603      	mov	r3, r0
 800385a:	4402      	add	r2, r0
 800385c:	4293      	cmp	r3, r2
 800385e:	d100      	bne.n	8003862 <memset+0xa>
 8003860:	4770      	bx	lr
 8003862:	f803 1b01 	strb.w	r1, [r3], #1
 8003866:	e7f9      	b.n	800385c <memset+0x4>

08003868 <__libc_init_array>:
 8003868:	b570      	push	{r4, r5, r6, lr}
 800386a:	2600      	movs	r6, #0
 800386c:	4d0c      	ldr	r5, [pc, #48]	@ (80038a0 <__libc_init_array+0x38>)
 800386e:	4c0d      	ldr	r4, [pc, #52]	@ (80038a4 <__libc_init_array+0x3c>)
 8003870:	1b64      	subs	r4, r4, r5
 8003872:	10a4      	asrs	r4, r4, #2
 8003874:	42a6      	cmp	r6, r4
 8003876:	d109      	bne.n	800388c <__libc_init_array+0x24>
 8003878:	f002 f954 	bl	8005b24 <_init>
 800387c:	2600      	movs	r6, #0
 800387e:	4d0a      	ldr	r5, [pc, #40]	@ (80038a8 <__libc_init_array+0x40>)
 8003880:	4c0a      	ldr	r4, [pc, #40]	@ (80038ac <__libc_init_array+0x44>)
 8003882:	1b64      	subs	r4, r4, r5
 8003884:	10a4      	asrs	r4, r4, #2
 8003886:	42a6      	cmp	r6, r4
 8003888:	d105      	bne.n	8003896 <__libc_init_array+0x2e>
 800388a:	bd70      	pop	{r4, r5, r6, pc}
 800388c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003890:	4798      	blx	r3
 8003892:	3601      	adds	r6, #1
 8003894:	e7ee      	b.n	8003874 <__libc_init_array+0xc>
 8003896:	f855 3b04 	ldr.w	r3, [r5], #4
 800389a:	4798      	blx	r3
 800389c:	3601      	adds	r6, #1
 800389e:	e7f2      	b.n	8003886 <__libc_init_array+0x1e>
 80038a0:	08005efc 	.word	0x08005efc
 80038a4:	08005efc 	.word	0x08005efc
 80038a8:	08005efc 	.word	0x08005efc
 80038ac:	08005f00 	.word	0x08005f00

080038b0 <__retarget_lock_init_recursive>:
 80038b0:	4770      	bx	lr

080038b2 <__retarget_lock_acquire_recursive>:
 80038b2:	4770      	bx	lr

080038b4 <__retarget_lock_release_recursive>:
 80038b4:	4770      	bx	lr
	...

080038b8 <_localeconv_r>:
 80038b8:	4800      	ldr	r0, [pc, #0]	@ (80038bc <_localeconv_r+0x4>)
 80038ba:	4770      	bx	lr
 80038bc:	20000158 	.word	0x20000158

080038c0 <memchr>:
 80038c0:	4603      	mov	r3, r0
 80038c2:	b510      	push	{r4, lr}
 80038c4:	b2c9      	uxtb	r1, r1
 80038c6:	4402      	add	r2, r0
 80038c8:	4293      	cmp	r3, r2
 80038ca:	4618      	mov	r0, r3
 80038cc:	d101      	bne.n	80038d2 <memchr+0x12>
 80038ce:	2000      	movs	r0, #0
 80038d0:	e003      	b.n	80038da <memchr+0x1a>
 80038d2:	7804      	ldrb	r4, [r0, #0]
 80038d4:	3301      	adds	r3, #1
 80038d6:	428c      	cmp	r4, r1
 80038d8:	d1f6      	bne.n	80038c8 <memchr+0x8>
 80038da:	bd10      	pop	{r4, pc}

080038dc <quorem>:
 80038dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e0:	6903      	ldr	r3, [r0, #16]
 80038e2:	690c      	ldr	r4, [r1, #16]
 80038e4:	4607      	mov	r7, r0
 80038e6:	42a3      	cmp	r3, r4
 80038e8:	db7e      	blt.n	80039e8 <quorem+0x10c>
 80038ea:	3c01      	subs	r4, #1
 80038ec:	00a3      	lsls	r3, r4, #2
 80038ee:	f100 0514 	add.w	r5, r0, #20
 80038f2:	f101 0814 	add.w	r8, r1, #20
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003902:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003906:	3301      	adds	r3, #1
 8003908:	429a      	cmp	r2, r3
 800390a:	fbb2 f6f3 	udiv	r6, r2, r3
 800390e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003912:	d32e      	bcc.n	8003972 <quorem+0x96>
 8003914:	f04f 0a00 	mov.w	sl, #0
 8003918:	46c4      	mov	ip, r8
 800391a:	46ae      	mov	lr, r5
 800391c:	46d3      	mov	fp, sl
 800391e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003922:	b298      	uxth	r0, r3
 8003924:	fb06 a000 	mla	r0, r6, r0, sl
 8003928:	0c1b      	lsrs	r3, r3, #16
 800392a:	0c02      	lsrs	r2, r0, #16
 800392c:	fb06 2303 	mla	r3, r6, r3, r2
 8003930:	f8de 2000 	ldr.w	r2, [lr]
 8003934:	b280      	uxth	r0, r0
 8003936:	b292      	uxth	r2, r2
 8003938:	1a12      	subs	r2, r2, r0
 800393a:	445a      	add	r2, fp
 800393c:	f8de 0000 	ldr.w	r0, [lr]
 8003940:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003944:	b29b      	uxth	r3, r3
 8003946:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800394a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800394e:	b292      	uxth	r2, r2
 8003950:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003954:	45e1      	cmp	r9, ip
 8003956:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800395a:	f84e 2b04 	str.w	r2, [lr], #4
 800395e:	d2de      	bcs.n	800391e <quorem+0x42>
 8003960:	9b00      	ldr	r3, [sp, #0]
 8003962:	58eb      	ldr	r3, [r5, r3]
 8003964:	b92b      	cbnz	r3, 8003972 <quorem+0x96>
 8003966:	9b01      	ldr	r3, [sp, #4]
 8003968:	3b04      	subs	r3, #4
 800396a:	429d      	cmp	r5, r3
 800396c:	461a      	mov	r2, r3
 800396e:	d32f      	bcc.n	80039d0 <quorem+0xf4>
 8003970:	613c      	str	r4, [r7, #16]
 8003972:	4638      	mov	r0, r7
 8003974:	f001 fb38 	bl	8004fe8 <__mcmp>
 8003978:	2800      	cmp	r0, #0
 800397a:	db25      	blt.n	80039c8 <quorem+0xec>
 800397c:	4629      	mov	r1, r5
 800397e:	2000      	movs	r0, #0
 8003980:	f858 2b04 	ldr.w	r2, [r8], #4
 8003984:	f8d1 c000 	ldr.w	ip, [r1]
 8003988:	fa1f fe82 	uxth.w	lr, r2
 800398c:	fa1f f38c 	uxth.w	r3, ip
 8003990:	eba3 030e 	sub.w	r3, r3, lr
 8003994:	4403      	add	r3, r0
 8003996:	0c12      	lsrs	r2, r2, #16
 8003998:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800399c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039a6:	45c1      	cmp	r9, r8
 80039a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80039ac:	f841 3b04 	str.w	r3, [r1], #4
 80039b0:	d2e6      	bcs.n	8003980 <quorem+0xa4>
 80039b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80039b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80039ba:	b922      	cbnz	r2, 80039c6 <quorem+0xea>
 80039bc:	3b04      	subs	r3, #4
 80039be:	429d      	cmp	r5, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	d30b      	bcc.n	80039dc <quorem+0x100>
 80039c4:	613c      	str	r4, [r7, #16]
 80039c6:	3601      	adds	r6, #1
 80039c8:	4630      	mov	r0, r6
 80039ca:	b003      	add	sp, #12
 80039cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039d0:	6812      	ldr	r2, [r2, #0]
 80039d2:	3b04      	subs	r3, #4
 80039d4:	2a00      	cmp	r2, #0
 80039d6:	d1cb      	bne.n	8003970 <quorem+0x94>
 80039d8:	3c01      	subs	r4, #1
 80039da:	e7c6      	b.n	800396a <quorem+0x8e>
 80039dc:	6812      	ldr	r2, [r2, #0]
 80039de:	3b04      	subs	r3, #4
 80039e0:	2a00      	cmp	r2, #0
 80039e2:	d1ef      	bne.n	80039c4 <quorem+0xe8>
 80039e4:	3c01      	subs	r4, #1
 80039e6:	e7ea      	b.n	80039be <quorem+0xe2>
 80039e8:	2000      	movs	r0, #0
 80039ea:	e7ee      	b.n	80039ca <quorem+0xee>
 80039ec:	0000      	movs	r0, r0
	...

080039f0 <_dtoa_r>:
 80039f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039f4:	4614      	mov	r4, r2
 80039f6:	461d      	mov	r5, r3
 80039f8:	69c7      	ldr	r7, [r0, #28]
 80039fa:	b097      	sub	sp, #92	@ 0x5c
 80039fc:	4681      	mov	r9, r0
 80039fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003a02:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8003a04:	b97f      	cbnz	r7, 8003a26 <_dtoa_r+0x36>
 8003a06:	2010      	movs	r0, #16
 8003a08:	f000 ff1e 	bl	8004848 <malloc>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	f8c9 001c 	str.w	r0, [r9, #28]
 8003a12:	b920      	cbnz	r0, 8003a1e <_dtoa_r+0x2e>
 8003a14:	21ef      	movs	r1, #239	@ 0xef
 8003a16:	4bac      	ldr	r3, [pc, #688]	@ (8003cc8 <_dtoa_r+0x2d8>)
 8003a18:	48ac      	ldr	r0, [pc, #688]	@ (8003ccc <_dtoa_r+0x2dc>)
 8003a1a:	f001 fcdd 	bl	80053d8 <__assert_func>
 8003a1e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003a22:	6007      	str	r7, [r0, #0]
 8003a24:	60c7      	str	r7, [r0, #12]
 8003a26:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003a2a:	6819      	ldr	r1, [r3, #0]
 8003a2c:	b159      	cbz	r1, 8003a46 <_dtoa_r+0x56>
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	2301      	movs	r3, #1
 8003a32:	4093      	lsls	r3, r2
 8003a34:	604a      	str	r2, [r1, #4]
 8003a36:	608b      	str	r3, [r1, #8]
 8003a38:	4648      	mov	r0, r9
 8003a3a:	f001 f8a3 	bl	8004b84 <_Bfree>
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	1e2b      	subs	r3, r5, #0
 8003a48:	bfaf      	iteee	ge
 8003a4a:	2300      	movge	r3, #0
 8003a4c:	2201      	movlt	r2, #1
 8003a4e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003a52:	9307      	strlt	r3, [sp, #28]
 8003a54:	bfa8      	it	ge
 8003a56:	6033      	strge	r3, [r6, #0]
 8003a58:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8003a5c:	4b9c      	ldr	r3, [pc, #624]	@ (8003cd0 <_dtoa_r+0x2e0>)
 8003a5e:	bfb8      	it	lt
 8003a60:	6032      	strlt	r2, [r6, #0]
 8003a62:	ea33 0308 	bics.w	r3, r3, r8
 8003a66:	d112      	bne.n	8003a8e <_dtoa_r+0x9e>
 8003a68:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003a6c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003a74:	4323      	orrs	r3, r4
 8003a76:	f000 855e 	beq.w	8004536 <_dtoa_r+0xb46>
 8003a7a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003a7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003cd4 <_dtoa_r+0x2e4>
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 8560 	beq.w	8004546 <_dtoa_r+0xb56>
 8003a86:	f10a 0303 	add.w	r3, sl, #3
 8003a8a:	f000 bd5a 	b.w	8004542 <_dtoa_r+0xb52>
 8003a8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003a92:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003a96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f7fc ff83 	bl	80009a8 <__aeabi_dcmpeq>
 8003aa2:	4607      	mov	r7, r0
 8003aa4:	b158      	cbz	r0, 8003abe <_dtoa_r+0xce>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003aae:	b113      	cbz	r3, 8003ab6 <_dtoa_r+0xc6>
 8003ab0:	4b89      	ldr	r3, [pc, #548]	@ (8003cd8 <_dtoa_r+0x2e8>)
 8003ab2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8003cdc <_dtoa_r+0x2ec>
 8003aba:	f000 bd44 	b.w	8004546 <_dtoa_r+0xb56>
 8003abe:	ab14      	add	r3, sp, #80	@ 0x50
 8003ac0:	9301      	str	r3, [sp, #4]
 8003ac2:	ab15      	add	r3, sp, #84	@ 0x54
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	4648      	mov	r0, r9
 8003ac8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003acc:	f001 fb3c 	bl	8005148 <__d2b>
 8003ad0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8003ad4:	9003      	str	r0, [sp, #12]
 8003ad6:	2e00      	cmp	r6, #0
 8003ad8:	d078      	beq.n	8003bcc <_dtoa_r+0x1dc>
 8003ada:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003ade:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ae0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ae8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003aec:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003af0:	9712      	str	r7, [sp, #72]	@ 0x48
 8003af2:	4619      	mov	r1, r3
 8003af4:	2200      	movs	r2, #0
 8003af6:	4b7a      	ldr	r3, [pc, #488]	@ (8003ce0 <_dtoa_r+0x2f0>)
 8003af8:	f7fc fb36 	bl	8000168 <__aeabi_dsub>
 8003afc:	a36c      	add	r3, pc, #432	@ (adr r3, 8003cb0 <_dtoa_r+0x2c0>)
 8003afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b02:	f7fc fce9 	bl	80004d8 <__aeabi_dmul>
 8003b06:	a36c      	add	r3, pc, #432	@ (adr r3, 8003cb8 <_dtoa_r+0x2c8>)
 8003b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0c:	f7fc fb2e 	bl	800016c <__adddf3>
 8003b10:	4604      	mov	r4, r0
 8003b12:	4630      	mov	r0, r6
 8003b14:	460d      	mov	r5, r1
 8003b16:	f7fc fc75 	bl	8000404 <__aeabi_i2d>
 8003b1a:	a369      	add	r3, pc, #420	@ (adr r3, 8003cc0 <_dtoa_r+0x2d0>)
 8003b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b20:	f7fc fcda 	bl	80004d8 <__aeabi_dmul>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4620      	mov	r0, r4
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	f7fc fb1e 	bl	800016c <__adddf3>
 8003b30:	4604      	mov	r4, r0
 8003b32:	460d      	mov	r5, r1
 8003b34:	f7fc ff80 	bl	8000a38 <__aeabi_d2iz>
 8003b38:	2200      	movs	r2, #0
 8003b3a:	4607      	mov	r7, r0
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	4620      	mov	r0, r4
 8003b40:	4629      	mov	r1, r5
 8003b42:	f7fc ff3b 	bl	80009bc <__aeabi_dcmplt>
 8003b46:	b140      	cbz	r0, 8003b5a <_dtoa_r+0x16a>
 8003b48:	4638      	mov	r0, r7
 8003b4a:	f7fc fc5b 	bl	8000404 <__aeabi_i2d>
 8003b4e:	4622      	mov	r2, r4
 8003b50:	462b      	mov	r3, r5
 8003b52:	f7fc ff29 	bl	80009a8 <__aeabi_dcmpeq>
 8003b56:	b900      	cbnz	r0, 8003b5a <_dtoa_r+0x16a>
 8003b58:	3f01      	subs	r7, #1
 8003b5a:	2f16      	cmp	r7, #22
 8003b5c:	d854      	bhi.n	8003c08 <_dtoa_r+0x218>
 8003b5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003b62:	4b60      	ldr	r3, [pc, #384]	@ (8003ce4 <_dtoa_r+0x2f4>)
 8003b64:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f7fc ff26 	bl	80009bc <__aeabi_dcmplt>
 8003b70:	2800      	cmp	r0, #0
 8003b72:	d04b      	beq.n	8003c0c <_dtoa_r+0x21c>
 8003b74:	2300      	movs	r3, #0
 8003b76:	3f01      	subs	r7, #1
 8003b78:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003b7a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003b7c:	1b9b      	subs	r3, r3, r6
 8003b7e:	1e5a      	subs	r2, r3, #1
 8003b80:	bf49      	itett	mi
 8003b82:	f1c3 0301 	rsbmi	r3, r3, #1
 8003b86:	2300      	movpl	r3, #0
 8003b88:	9304      	strmi	r3, [sp, #16]
 8003b8a:	2300      	movmi	r3, #0
 8003b8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b8e:	bf54      	ite	pl
 8003b90:	9304      	strpl	r3, [sp, #16]
 8003b92:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003b94:	2f00      	cmp	r7, #0
 8003b96:	db3b      	blt.n	8003c10 <_dtoa_r+0x220>
 8003b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b9a:	970e      	str	r7, [sp, #56]	@ 0x38
 8003b9c:	443b      	add	r3, r7
 8003b9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ba4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003ba6:	2b09      	cmp	r3, #9
 8003ba8:	d865      	bhi.n	8003c76 <_dtoa_r+0x286>
 8003baa:	2b05      	cmp	r3, #5
 8003bac:	bfc4      	itt	gt
 8003bae:	3b04      	subgt	r3, #4
 8003bb0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003bb2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003bb4:	bfc8      	it	gt
 8003bb6:	2400      	movgt	r4, #0
 8003bb8:	f1a3 0302 	sub.w	r3, r3, #2
 8003bbc:	bfd8      	it	le
 8003bbe:	2401      	movle	r4, #1
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d864      	bhi.n	8003c8e <_dtoa_r+0x29e>
 8003bc4:	e8df f003 	tbb	[pc, r3]
 8003bc8:	2c385553 	.word	0x2c385553
 8003bcc:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003bd0:	441e      	add	r6, r3
 8003bd2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	bfc1      	itttt	gt
 8003bda:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003bde:	fa08 f803 	lslgt.w	r8, r8, r3
 8003be2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003be6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003bea:	bfd6      	itet	le
 8003bec:	f1c3 0320 	rsble	r3, r3, #32
 8003bf0:	ea48 0003 	orrgt.w	r0, r8, r3
 8003bf4:	fa04 f003 	lslle.w	r0, r4, r3
 8003bf8:	f7fc fbf4 	bl	80003e4 <__aeabi_ui2d>
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003c02:	3e01      	subs	r6, #1
 8003c04:	9212      	str	r2, [sp, #72]	@ 0x48
 8003c06:	e774      	b.n	8003af2 <_dtoa_r+0x102>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e7b5      	b.n	8003b78 <_dtoa_r+0x188>
 8003c0c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003c0e:	e7b4      	b.n	8003b7a <_dtoa_r+0x18a>
 8003c10:	9b04      	ldr	r3, [sp, #16]
 8003c12:	1bdb      	subs	r3, r3, r7
 8003c14:	9304      	str	r3, [sp, #16]
 8003c16:	427b      	negs	r3, r7
 8003c18:	930a      	str	r3, [sp, #40]	@ 0x28
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	930e      	str	r3, [sp, #56]	@ 0x38
 8003c1e:	e7c1      	b.n	8003ba4 <_dtoa_r+0x1b4>
 8003c20:	2301      	movs	r3, #1
 8003c22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c24:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003c26:	eb07 0b03 	add.w	fp, r7, r3
 8003c2a:	f10b 0301 	add.w	r3, fp, #1
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	9308      	str	r3, [sp, #32]
 8003c32:	bfb8      	it	lt
 8003c34:	2301      	movlt	r3, #1
 8003c36:	e006      	b.n	8003c46 <_dtoa_r+0x256>
 8003c38:	2301      	movs	r3, #1
 8003c3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c3c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	dd28      	ble.n	8003c94 <_dtoa_r+0x2a4>
 8003c42:	469b      	mov	fp, r3
 8003c44:	9308      	str	r3, [sp, #32]
 8003c46:	2100      	movs	r1, #0
 8003c48:	2204      	movs	r2, #4
 8003c4a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003c4e:	f102 0514 	add.w	r5, r2, #20
 8003c52:	429d      	cmp	r5, r3
 8003c54:	d926      	bls.n	8003ca4 <_dtoa_r+0x2b4>
 8003c56:	6041      	str	r1, [r0, #4]
 8003c58:	4648      	mov	r0, r9
 8003c5a:	f000 ff53 	bl	8004b04 <_Balloc>
 8003c5e:	4682      	mov	sl, r0
 8003c60:	2800      	cmp	r0, #0
 8003c62:	d143      	bne.n	8003cec <_dtoa_r+0x2fc>
 8003c64:	4602      	mov	r2, r0
 8003c66:	f240 11af 	movw	r1, #431	@ 0x1af
 8003c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ce8 <_dtoa_r+0x2f8>)
 8003c6c:	e6d4      	b.n	8003a18 <_dtoa_r+0x28>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	e7e3      	b.n	8003c3a <_dtoa_r+0x24a>
 8003c72:	2300      	movs	r3, #0
 8003c74:	e7d5      	b.n	8003c22 <_dtoa_r+0x232>
 8003c76:	2401      	movs	r4, #1
 8003c78:	2300      	movs	r3, #0
 8003c7a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003c7c:	9320      	str	r3, [sp, #128]	@ 0x80
 8003c7e:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8003c82:	2200      	movs	r2, #0
 8003c84:	2312      	movs	r3, #18
 8003c86:	f8cd b020 	str.w	fp, [sp, #32]
 8003c8a:	9221      	str	r2, [sp, #132]	@ 0x84
 8003c8c:	e7db      	b.n	8003c46 <_dtoa_r+0x256>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c92:	e7f4      	b.n	8003c7e <_dtoa_r+0x28e>
 8003c94:	f04f 0b01 	mov.w	fp, #1
 8003c98:	465b      	mov	r3, fp
 8003c9a:	f8cd b020 	str.w	fp, [sp, #32]
 8003c9e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8003ca2:	e7d0      	b.n	8003c46 <_dtoa_r+0x256>
 8003ca4:	3101      	adds	r1, #1
 8003ca6:	0052      	lsls	r2, r2, #1
 8003ca8:	e7d1      	b.n	8003c4e <_dtoa_r+0x25e>
 8003caa:	bf00      	nop
 8003cac:	f3af 8000 	nop.w
 8003cb0:	636f4361 	.word	0x636f4361
 8003cb4:	3fd287a7 	.word	0x3fd287a7
 8003cb8:	8b60c8b3 	.word	0x8b60c8b3
 8003cbc:	3fc68a28 	.word	0x3fc68a28
 8003cc0:	509f79fb 	.word	0x509f79fb
 8003cc4:	3fd34413 	.word	0x3fd34413
 8003cc8:	08005bc1 	.word	0x08005bc1
 8003ccc:	08005bd8 	.word	0x08005bd8
 8003cd0:	7ff00000 	.word	0x7ff00000
 8003cd4:	08005bbd 	.word	0x08005bbd
 8003cd8:	08005b91 	.word	0x08005b91
 8003cdc:	08005b90 	.word	0x08005b90
 8003ce0:	3ff80000 	.word	0x3ff80000
 8003ce4:	08005d28 	.word	0x08005d28
 8003ce8:	08005c30 	.word	0x08005c30
 8003cec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003cf0:	6018      	str	r0, [r3, #0]
 8003cf2:	9b08      	ldr	r3, [sp, #32]
 8003cf4:	2b0e      	cmp	r3, #14
 8003cf6:	f200 80a1 	bhi.w	8003e3c <_dtoa_r+0x44c>
 8003cfa:	2c00      	cmp	r4, #0
 8003cfc:	f000 809e 	beq.w	8003e3c <_dtoa_r+0x44c>
 8003d00:	2f00      	cmp	r7, #0
 8003d02:	dd33      	ble.n	8003d6c <_dtoa_r+0x37c>
 8003d04:	4b9c      	ldr	r3, [pc, #624]	@ (8003f78 <_dtoa_r+0x588>)
 8003d06:	f007 020f 	and.w	r2, r7, #15
 8003d0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d0e:	05f8      	lsls	r0, r7, #23
 8003d10:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d14:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8003d18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003d1c:	d516      	bpl.n	8003d4c <_dtoa_r+0x35c>
 8003d1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003d22:	4b96      	ldr	r3, [pc, #600]	@ (8003f7c <_dtoa_r+0x58c>)
 8003d24:	2603      	movs	r6, #3
 8003d26:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d2a:	f7fc fcff 	bl	800072c <__aeabi_ddiv>
 8003d2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003d32:	f004 040f 	and.w	r4, r4, #15
 8003d36:	4d91      	ldr	r5, [pc, #580]	@ (8003f7c <_dtoa_r+0x58c>)
 8003d38:	b954      	cbnz	r4, 8003d50 <_dtoa_r+0x360>
 8003d3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003d3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d42:	f7fc fcf3 	bl	800072c <__aeabi_ddiv>
 8003d46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003d4a:	e028      	b.n	8003d9e <_dtoa_r+0x3ae>
 8003d4c:	2602      	movs	r6, #2
 8003d4e:	e7f2      	b.n	8003d36 <_dtoa_r+0x346>
 8003d50:	07e1      	lsls	r1, r4, #31
 8003d52:	d508      	bpl.n	8003d66 <_dtoa_r+0x376>
 8003d54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003d58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003d5c:	f7fc fbbc 	bl	80004d8 <__aeabi_dmul>
 8003d60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003d64:	3601      	adds	r6, #1
 8003d66:	1064      	asrs	r4, r4, #1
 8003d68:	3508      	adds	r5, #8
 8003d6a:	e7e5      	b.n	8003d38 <_dtoa_r+0x348>
 8003d6c:	f000 80af 	beq.w	8003ece <_dtoa_r+0x4de>
 8003d70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003d74:	427c      	negs	r4, r7
 8003d76:	4b80      	ldr	r3, [pc, #512]	@ (8003f78 <_dtoa_r+0x588>)
 8003d78:	f004 020f 	and.w	r2, r4, #15
 8003d7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d84:	f7fc fba8 	bl	80004d8 <__aeabi_dmul>
 8003d88:	2602      	movs	r6, #2
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003d90:	4d7a      	ldr	r5, [pc, #488]	@ (8003f7c <_dtoa_r+0x58c>)
 8003d92:	1124      	asrs	r4, r4, #4
 8003d94:	2c00      	cmp	r4, #0
 8003d96:	f040 808f 	bne.w	8003eb8 <_dtoa_r+0x4c8>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1d3      	bne.n	8003d46 <_dtoa_r+0x356>
 8003d9e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8003da2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 8094 	beq.w	8003ed2 <_dtoa_r+0x4e2>
 8003daa:	2200      	movs	r2, #0
 8003dac:	4620      	mov	r0, r4
 8003dae:	4629      	mov	r1, r5
 8003db0:	4b73      	ldr	r3, [pc, #460]	@ (8003f80 <_dtoa_r+0x590>)
 8003db2:	f7fc fe03 	bl	80009bc <__aeabi_dcmplt>
 8003db6:	2800      	cmp	r0, #0
 8003db8:	f000 808b 	beq.w	8003ed2 <_dtoa_r+0x4e2>
 8003dbc:	9b08      	ldr	r3, [sp, #32]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 8087 	beq.w	8003ed2 <_dtoa_r+0x4e2>
 8003dc4:	f1bb 0f00 	cmp.w	fp, #0
 8003dc8:	dd34      	ble.n	8003e34 <_dtoa_r+0x444>
 8003dca:	4620      	mov	r0, r4
 8003dcc:	2200      	movs	r2, #0
 8003dce:	4629      	mov	r1, r5
 8003dd0:	4b6c      	ldr	r3, [pc, #432]	@ (8003f84 <_dtoa_r+0x594>)
 8003dd2:	f7fc fb81 	bl	80004d8 <__aeabi_dmul>
 8003dd6:	465c      	mov	r4, fp
 8003dd8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003ddc:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8003de0:	3601      	adds	r6, #1
 8003de2:	4630      	mov	r0, r6
 8003de4:	f7fc fb0e 	bl	8000404 <__aeabi_i2d>
 8003de8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003dec:	f7fc fb74 	bl	80004d8 <__aeabi_dmul>
 8003df0:	2200      	movs	r2, #0
 8003df2:	4b65      	ldr	r3, [pc, #404]	@ (8003f88 <_dtoa_r+0x598>)
 8003df4:	f7fc f9ba 	bl	800016c <__adddf3>
 8003df8:	4605      	mov	r5, r0
 8003dfa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003dfe:	2c00      	cmp	r4, #0
 8003e00:	d16a      	bne.n	8003ed8 <_dtoa_r+0x4e8>
 8003e02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e06:	2200      	movs	r2, #0
 8003e08:	4b60      	ldr	r3, [pc, #384]	@ (8003f8c <_dtoa_r+0x59c>)
 8003e0a:	f7fc f9ad 	bl	8000168 <__aeabi_dsub>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003e16:	462a      	mov	r2, r5
 8003e18:	4633      	mov	r3, r6
 8003e1a:	f7fc fded 	bl	80009f8 <__aeabi_dcmpgt>
 8003e1e:	2800      	cmp	r0, #0
 8003e20:	f040 8298 	bne.w	8004354 <_dtoa_r+0x964>
 8003e24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e28:	462a      	mov	r2, r5
 8003e2a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003e2e:	f7fc fdc5 	bl	80009bc <__aeabi_dcmplt>
 8003e32:	bb38      	cbnz	r0, 8003e84 <_dtoa_r+0x494>
 8003e34:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003e38:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003e3c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f2c0 8157 	blt.w	80040f2 <_dtoa_r+0x702>
 8003e44:	2f0e      	cmp	r7, #14
 8003e46:	f300 8154 	bgt.w	80040f2 <_dtoa_r+0x702>
 8003e4a:	4b4b      	ldr	r3, [pc, #300]	@ (8003f78 <_dtoa_r+0x588>)
 8003e4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003e50:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e54:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003e58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f280 80e5 	bge.w	800402a <_dtoa_r+0x63a>
 8003e60:	9b08      	ldr	r3, [sp, #32]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f300 80e1 	bgt.w	800402a <_dtoa_r+0x63a>
 8003e68:	d10c      	bne.n	8003e84 <_dtoa_r+0x494>
 8003e6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	4b46      	ldr	r3, [pc, #280]	@ (8003f8c <_dtoa_r+0x59c>)
 8003e72:	f7fc fb31 	bl	80004d8 <__aeabi_dmul>
 8003e76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003e7a:	f7fc fdb3 	bl	80009e4 <__aeabi_dcmpge>
 8003e7e:	2800      	cmp	r0, #0
 8003e80:	f000 8266 	beq.w	8004350 <_dtoa_r+0x960>
 8003e84:	2400      	movs	r4, #0
 8003e86:	4625      	mov	r5, r4
 8003e88:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003e8a:	4656      	mov	r6, sl
 8003e8c:	ea6f 0803 	mvn.w	r8, r3
 8003e90:	2700      	movs	r7, #0
 8003e92:	4621      	mov	r1, r4
 8003e94:	4648      	mov	r0, r9
 8003e96:	f000 fe75 	bl	8004b84 <_Bfree>
 8003e9a:	2d00      	cmp	r5, #0
 8003e9c:	f000 80bd 	beq.w	800401a <_dtoa_r+0x62a>
 8003ea0:	b12f      	cbz	r7, 8003eae <_dtoa_r+0x4be>
 8003ea2:	42af      	cmp	r7, r5
 8003ea4:	d003      	beq.n	8003eae <_dtoa_r+0x4be>
 8003ea6:	4639      	mov	r1, r7
 8003ea8:	4648      	mov	r0, r9
 8003eaa:	f000 fe6b 	bl	8004b84 <_Bfree>
 8003eae:	4629      	mov	r1, r5
 8003eb0:	4648      	mov	r0, r9
 8003eb2:	f000 fe67 	bl	8004b84 <_Bfree>
 8003eb6:	e0b0      	b.n	800401a <_dtoa_r+0x62a>
 8003eb8:	07e2      	lsls	r2, r4, #31
 8003eba:	d505      	bpl.n	8003ec8 <_dtoa_r+0x4d8>
 8003ebc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003ec0:	f7fc fb0a 	bl	80004d8 <__aeabi_dmul>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	3601      	adds	r6, #1
 8003ec8:	1064      	asrs	r4, r4, #1
 8003eca:	3508      	adds	r5, #8
 8003ecc:	e762      	b.n	8003d94 <_dtoa_r+0x3a4>
 8003ece:	2602      	movs	r6, #2
 8003ed0:	e765      	b.n	8003d9e <_dtoa_r+0x3ae>
 8003ed2:	46b8      	mov	r8, r7
 8003ed4:	9c08      	ldr	r4, [sp, #32]
 8003ed6:	e784      	b.n	8003de2 <_dtoa_r+0x3f2>
 8003ed8:	4b27      	ldr	r3, [pc, #156]	@ (8003f78 <_dtoa_r+0x588>)
 8003eda:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003edc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003ee0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003ee4:	4454      	add	r4, sl
 8003ee6:	2900      	cmp	r1, #0
 8003ee8:	d054      	beq.n	8003f94 <_dtoa_r+0x5a4>
 8003eea:	2000      	movs	r0, #0
 8003eec:	4928      	ldr	r1, [pc, #160]	@ (8003f90 <_dtoa_r+0x5a0>)
 8003eee:	f7fc fc1d 	bl	800072c <__aeabi_ddiv>
 8003ef2:	4633      	mov	r3, r6
 8003ef4:	462a      	mov	r2, r5
 8003ef6:	f7fc f937 	bl	8000168 <__aeabi_dsub>
 8003efa:	4656      	mov	r6, sl
 8003efc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003f00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f04:	f7fc fd98 	bl	8000a38 <__aeabi_d2iz>
 8003f08:	4605      	mov	r5, r0
 8003f0a:	f7fc fa7b 	bl	8000404 <__aeabi_i2d>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f16:	f7fc f927 	bl	8000168 <__aeabi_dsub>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	3530      	adds	r5, #48	@ 0x30
 8003f20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003f24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003f28:	f806 5b01 	strb.w	r5, [r6], #1
 8003f2c:	f7fc fd46 	bl	80009bc <__aeabi_dcmplt>
 8003f30:	2800      	cmp	r0, #0
 8003f32:	d172      	bne.n	800401a <_dtoa_r+0x62a>
 8003f34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f38:	2000      	movs	r0, #0
 8003f3a:	4911      	ldr	r1, [pc, #68]	@ (8003f80 <_dtoa_r+0x590>)
 8003f3c:	f7fc f914 	bl	8000168 <__aeabi_dsub>
 8003f40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003f44:	f7fc fd3a 	bl	80009bc <__aeabi_dcmplt>
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	f040 80b4 	bne.w	80040b6 <_dtoa_r+0x6c6>
 8003f4e:	42a6      	cmp	r6, r4
 8003f50:	f43f af70 	beq.w	8003e34 <_dtoa_r+0x444>
 8003f54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003f58:	2200      	movs	r2, #0
 8003f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f84 <_dtoa_r+0x594>)
 8003f5c:	f7fc fabc 	bl	80004d8 <__aeabi_dmul>
 8003f60:	2200      	movs	r2, #0
 8003f62:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003f66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f6a:	4b06      	ldr	r3, [pc, #24]	@ (8003f84 <_dtoa_r+0x594>)
 8003f6c:	f7fc fab4 	bl	80004d8 <__aeabi_dmul>
 8003f70:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003f74:	e7c4      	b.n	8003f00 <_dtoa_r+0x510>
 8003f76:	bf00      	nop
 8003f78:	08005d28 	.word	0x08005d28
 8003f7c:	08005d00 	.word	0x08005d00
 8003f80:	3ff00000 	.word	0x3ff00000
 8003f84:	40240000 	.word	0x40240000
 8003f88:	401c0000 	.word	0x401c0000
 8003f8c:	40140000 	.word	0x40140000
 8003f90:	3fe00000 	.word	0x3fe00000
 8003f94:	4631      	mov	r1, r6
 8003f96:	4628      	mov	r0, r5
 8003f98:	f7fc fa9e 	bl	80004d8 <__aeabi_dmul>
 8003f9c:	4656      	mov	r6, sl
 8003f9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003fa2:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003fa4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003fa8:	f7fc fd46 	bl	8000a38 <__aeabi_d2iz>
 8003fac:	4605      	mov	r5, r0
 8003fae:	f7fc fa29 	bl	8000404 <__aeabi_i2d>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003fba:	f7fc f8d5 	bl	8000168 <__aeabi_dsub>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	3530      	adds	r5, #48	@ 0x30
 8003fc4:	f806 5b01 	strb.w	r5, [r6], #1
 8003fc8:	42a6      	cmp	r6, r4
 8003fca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003fce:	f04f 0200 	mov.w	r2, #0
 8003fd2:	d124      	bne.n	800401e <_dtoa_r+0x62e>
 8003fd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003fd8:	4bae      	ldr	r3, [pc, #696]	@ (8004294 <_dtoa_r+0x8a4>)
 8003fda:	f7fc f8c7 	bl	800016c <__adddf3>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003fe6:	f7fc fd07 	bl	80009f8 <__aeabi_dcmpgt>
 8003fea:	2800      	cmp	r0, #0
 8003fec:	d163      	bne.n	80040b6 <_dtoa_r+0x6c6>
 8003fee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	49a7      	ldr	r1, [pc, #668]	@ (8004294 <_dtoa_r+0x8a4>)
 8003ff6:	f7fc f8b7 	bl	8000168 <__aeabi_dsub>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004002:	f7fc fcdb 	bl	80009bc <__aeabi_dcmplt>
 8004006:	2800      	cmp	r0, #0
 8004008:	f43f af14 	beq.w	8003e34 <_dtoa_r+0x444>
 800400c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800400e:	1e73      	subs	r3, r6, #1
 8004010:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004012:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004016:	2b30      	cmp	r3, #48	@ 0x30
 8004018:	d0f8      	beq.n	800400c <_dtoa_r+0x61c>
 800401a:	4647      	mov	r7, r8
 800401c:	e03b      	b.n	8004096 <_dtoa_r+0x6a6>
 800401e:	4b9e      	ldr	r3, [pc, #632]	@ (8004298 <_dtoa_r+0x8a8>)
 8004020:	f7fc fa5a 	bl	80004d8 <__aeabi_dmul>
 8004024:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004028:	e7bc      	b.n	8003fa4 <_dtoa_r+0x5b4>
 800402a:	4656      	mov	r6, sl
 800402c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004030:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004034:	4620      	mov	r0, r4
 8004036:	4629      	mov	r1, r5
 8004038:	f7fc fb78 	bl	800072c <__aeabi_ddiv>
 800403c:	f7fc fcfc 	bl	8000a38 <__aeabi_d2iz>
 8004040:	4680      	mov	r8, r0
 8004042:	f7fc f9df 	bl	8000404 <__aeabi_i2d>
 8004046:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800404a:	f7fc fa45 	bl	80004d8 <__aeabi_dmul>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4620      	mov	r0, r4
 8004054:	4629      	mov	r1, r5
 8004056:	f7fc f887 	bl	8000168 <__aeabi_dsub>
 800405a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800405e:	9d08      	ldr	r5, [sp, #32]
 8004060:	f806 4b01 	strb.w	r4, [r6], #1
 8004064:	eba6 040a 	sub.w	r4, r6, sl
 8004068:	42a5      	cmp	r5, r4
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	d133      	bne.n	80040d8 <_dtoa_r+0x6e8>
 8004070:	f7fc f87c 	bl	800016c <__adddf3>
 8004074:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004078:	4604      	mov	r4, r0
 800407a:	460d      	mov	r5, r1
 800407c:	f7fc fcbc 	bl	80009f8 <__aeabi_dcmpgt>
 8004080:	b9c0      	cbnz	r0, 80040b4 <_dtoa_r+0x6c4>
 8004082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004086:	4620      	mov	r0, r4
 8004088:	4629      	mov	r1, r5
 800408a:	f7fc fc8d 	bl	80009a8 <__aeabi_dcmpeq>
 800408e:	b110      	cbz	r0, 8004096 <_dtoa_r+0x6a6>
 8004090:	f018 0f01 	tst.w	r8, #1
 8004094:	d10e      	bne.n	80040b4 <_dtoa_r+0x6c4>
 8004096:	4648      	mov	r0, r9
 8004098:	9903      	ldr	r1, [sp, #12]
 800409a:	f000 fd73 	bl	8004b84 <_Bfree>
 800409e:	2300      	movs	r3, #0
 80040a0:	7033      	strb	r3, [r6, #0]
 80040a2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80040a4:	3701      	adds	r7, #1
 80040a6:	601f      	str	r7, [r3, #0]
 80040a8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 824b 	beq.w	8004546 <_dtoa_r+0xb56>
 80040b0:	601e      	str	r6, [r3, #0]
 80040b2:	e248      	b.n	8004546 <_dtoa_r+0xb56>
 80040b4:	46b8      	mov	r8, r7
 80040b6:	4633      	mov	r3, r6
 80040b8:	461e      	mov	r6, r3
 80040ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80040be:	2a39      	cmp	r2, #57	@ 0x39
 80040c0:	d106      	bne.n	80040d0 <_dtoa_r+0x6e0>
 80040c2:	459a      	cmp	sl, r3
 80040c4:	d1f8      	bne.n	80040b8 <_dtoa_r+0x6c8>
 80040c6:	2230      	movs	r2, #48	@ 0x30
 80040c8:	f108 0801 	add.w	r8, r8, #1
 80040cc:	f88a 2000 	strb.w	r2, [sl]
 80040d0:	781a      	ldrb	r2, [r3, #0]
 80040d2:	3201      	adds	r2, #1
 80040d4:	701a      	strb	r2, [r3, #0]
 80040d6:	e7a0      	b.n	800401a <_dtoa_r+0x62a>
 80040d8:	2200      	movs	r2, #0
 80040da:	4b6f      	ldr	r3, [pc, #444]	@ (8004298 <_dtoa_r+0x8a8>)
 80040dc:	f7fc f9fc 	bl	80004d8 <__aeabi_dmul>
 80040e0:	2200      	movs	r2, #0
 80040e2:	2300      	movs	r3, #0
 80040e4:	4604      	mov	r4, r0
 80040e6:	460d      	mov	r5, r1
 80040e8:	f7fc fc5e 	bl	80009a8 <__aeabi_dcmpeq>
 80040ec:	2800      	cmp	r0, #0
 80040ee:	d09f      	beq.n	8004030 <_dtoa_r+0x640>
 80040f0:	e7d1      	b.n	8004096 <_dtoa_r+0x6a6>
 80040f2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80040f4:	2a00      	cmp	r2, #0
 80040f6:	f000 80ea 	beq.w	80042ce <_dtoa_r+0x8de>
 80040fa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80040fc:	2a01      	cmp	r2, #1
 80040fe:	f300 80cd 	bgt.w	800429c <_dtoa_r+0x8ac>
 8004102:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004104:	2a00      	cmp	r2, #0
 8004106:	f000 80c1 	beq.w	800428c <_dtoa_r+0x89c>
 800410a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800410e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004110:	9e04      	ldr	r6, [sp, #16]
 8004112:	9a04      	ldr	r2, [sp, #16]
 8004114:	2101      	movs	r1, #1
 8004116:	441a      	add	r2, r3
 8004118:	9204      	str	r2, [sp, #16]
 800411a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800411c:	4648      	mov	r0, r9
 800411e:	441a      	add	r2, r3
 8004120:	9209      	str	r2, [sp, #36]	@ 0x24
 8004122:	f000 fde3 	bl	8004cec <__i2b>
 8004126:	4605      	mov	r5, r0
 8004128:	b166      	cbz	r6, 8004144 <_dtoa_r+0x754>
 800412a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800412c:	2b00      	cmp	r3, #0
 800412e:	dd09      	ble.n	8004144 <_dtoa_r+0x754>
 8004130:	42b3      	cmp	r3, r6
 8004132:	bfa8      	it	ge
 8004134:	4633      	movge	r3, r6
 8004136:	9a04      	ldr	r2, [sp, #16]
 8004138:	1af6      	subs	r6, r6, r3
 800413a:	1ad2      	subs	r2, r2, r3
 800413c:	9204      	str	r2, [sp, #16]
 800413e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	9309      	str	r3, [sp, #36]	@ 0x24
 8004144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004146:	b30b      	cbz	r3, 800418c <_dtoa_r+0x79c>
 8004148:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 80c6 	beq.w	80042dc <_dtoa_r+0x8ec>
 8004150:	2c00      	cmp	r4, #0
 8004152:	f000 80c0 	beq.w	80042d6 <_dtoa_r+0x8e6>
 8004156:	4629      	mov	r1, r5
 8004158:	4622      	mov	r2, r4
 800415a:	4648      	mov	r0, r9
 800415c:	f000 fe7e 	bl	8004e5c <__pow5mult>
 8004160:	9a03      	ldr	r2, [sp, #12]
 8004162:	4601      	mov	r1, r0
 8004164:	4605      	mov	r5, r0
 8004166:	4648      	mov	r0, r9
 8004168:	f000 fdd6 	bl	8004d18 <__multiply>
 800416c:	9903      	ldr	r1, [sp, #12]
 800416e:	4680      	mov	r8, r0
 8004170:	4648      	mov	r0, r9
 8004172:	f000 fd07 	bl	8004b84 <_Bfree>
 8004176:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004178:	1b1b      	subs	r3, r3, r4
 800417a:	930a      	str	r3, [sp, #40]	@ 0x28
 800417c:	f000 80b1 	beq.w	80042e2 <_dtoa_r+0x8f2>
 8004180:	4641      	mov	r1, r8
 8004182:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004184:	4648      	mov	r0, r9
 8004186:	f000 fe69 	bl	8004e5c <__pow5mult>
 800418a:	9003      	str	r0, [sp, #12]
 800418c:	2101      	movs	r1, #1
 800418e:	4648      	mov	r0, r9
 8004190:	f000 fdac 	bl	8004cec <__i2b>
 8004194:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004196:	4604      	mov	r4, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 81d8 	beq.w	800454e <_dtoa_r+0xb5e>
 800419e:	461a      	mov	r2, r3
 80041a0:	4601      	mov	r1, r0
 80041a2:	4648      	mov	r0, r9
 80041a4:	f000 fe5a 	bl	8004e5c <__pow5mult>
 80041a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80041aa:	4604      	mov	r4, r0
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	f300 809f 	bgt.w	80042f0 <_dtoa_r+0x900>
 80041b2:	9b06      	ldr	r3, [sp, #24]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f040 8097 	bne.w	80042e8 <_dtoa_r+0x8f8>
 80041ba:	9b07      	ldr	r3, [sp, #28]
 80041bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f040 8093 	bne.w	80042ec <_dtoa_r+0x8fc>
 80041c6:	9b07      	ldr	r3, [sp, #28]
 80041c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041cc:	0d1b      	lsrs	r3, r3, #20
 80041ce:	051b      	lsls	r3, r3, #20
 80041d0:	b133      	cbz	r3, 80041e0 <_dtoa_r+0x7f0>
 80041d2:	9b04      	ldr	r3, [sp, #16]
 80041d4:	3301      	adds	r3, #1
 80041d6:	9304      	str	r3, [sp, #16]
 80041d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041da:	3301      	adds	r3, #1
 80041dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80041de:	2301      	movs	r3, #1
 80041e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80041e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 81b8 	beq.w	800455a <_dtoa_r+0xb6a>
 80041ea:	6923      	ldr	r3, [r4, #16]
 80041ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80041f0:	6918      	ldr	r0, [r3, #16]
 80041f2:	f000 fd2f 	bl	8004c54 <__hi0bits>
 80041f6:	f1c0 0020 	rsb	r0, r0, #32
 80041fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041fc:	4418      	add	r0, r3
 80041fe:	f010 001f 	ands.w	r0, r0, #31
 8004202:	f000 8082 	beq.w	800430a <_dtoa_r+0x91a>
 8004206:	f1c0 0320 	rsb	r3, r0, #32
 800420a:	2b04      	cmp	r3, #4
 800420c:	dd73      	ble.n	80042f6 <_dtoa_r+0x906>
 800420e:	9b04      	ldr	r3, [sp, #16]
 8004210:	f1c0 001c 	rsb	r0, r0, #28
 8004214:	4403      	add	r3, r0
 8004216:	9304      	str	r3, [sp, #16]
 8004218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800421a:	4406      	add	r6, r0
 800421c:	4403      	add	r3, r0
 800421e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004220:	9b04      	ldr	r3, [sp, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	dd05      	ble.n	8004232 <_dtoa_r+0x842>
 8004226:	461a      	mov	r2, r3
 8004228:	4648      	mov	r0, r9
 800422a:	9903      	ldr	r1, [sp, #12]
 800422c:	f000 fe70 	bl	8004f10 <__lshift>
 8004230:	9003      	str	r0, [sp, #12]
 8004232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004234:	2b00      	cmp	r3, #0
 8004236:	dd05      	ble.n	8004244 <_dtoa_r+0x854>
 8004238:	4621      	mov	r1, r4
 800423a:	461a      	mov	r2, r3
 800423c:	4648      	mov	r0, r9
 800423e:	f000 fe67 	bl	8004f10 <__lshift>
 8004242:	4604      	mov	r4, r0
 8004244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004246:	2b00      	cmp	r3, #0
 8004248:	d061      	beq.n	800430e <_dtoa_r+0x91e>
 800424a:	4621      	mov	r1, r4
 800424c:	9803      	ldr	r0, [sp, #12]
 800424e:	f000 fecb 	bl	8004fe8 <__mcmp>
 8004252:	2800      	cmp	r0, #0
 8004254:	da5b      	bge.n	800430e <_dtoa_r+0x91e>
 8004256:	2300      	movs	r3, #0
 8004258:	220a      	movs	r2, #10
 800425a:	4648      	mov	r0, r9
 800425c:	9903      	ldr	r1, [sp, #12]
 800425e:	f000 fcb3 	bl	8004bc8 <__multadd>
 8004262:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004264:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8004268:	9003      	str	r0, [sp, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 8177 	beq.w	800455e <_dtoa_r+0xb6e>
 8004270:	4629      	mov	r1, r5
 8004272:	2300      	movs	r3, #0
 8004274:	220a      	movs	r2, #10
 8004276:	4648      	mov	r0, r9
 8004278:	f000 fca6 	bl	8004bc8 <__multadd>
 800427c:	f1bb 0f00 	cmp.w	fp, #0
 8004280:	4605      	mov	r5, r0
 8004282:	dc6f      	bgt.n	8004364 <_dtoa_r+0x974>
 8004284:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004286:	2b02      	cmp	r3, #2
 8004288:	dc49      	bgt.n	800431e <_dtoa_r+0x92e>
 800428a:	e06b      	b.n	8004364 <_dtoa_r+0x974>
 800428c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800428e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004292:	e73c      	b.n	800410e <_dtoa_r+0x71e>
 8004294:	3fe00000 	.word	0x3fe00000
 8004298:	40240000 	.word	0x40240000
 800429c:	9b08      	ldr	r3, [sp, #32]
 800429e:	1e5c      	subs	r4, r3, #1
 80042a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042a2:	42a3      	cmp	r3, r4
 80042a4:	db09      	blt.n	80042ba <_dtoa_r+0x8ca>
 80042a6:	1b1c      	subs	r4, r3, r4
 80042a8:	9b08      	ldr	r3, [sp, #32]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f6bf af30 	bge.w	8004110 <_dtoa_r+0x720>
 80042b0:	9b04      	ldr	r3, [sp, #16]
 80042b2:	9a08      	ldr	r2, [sp, #32]
 80042b4:	1a9e      	subs	r6, r3, r2
 80042b6:	2300      	movs	r3, #0
 80042b8:	e72b      	b.n	8004112 <_dtoa_r+0x722>
 80042ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80042be:	1ae3      	subs	r3, r4, r3
 80042c0:	441a      	add	r2, r3
 80042c2:	940a      	str	r4, [sp, #40]	@ 0x28
 80042c4:	9e04      	ldr	r6, [sp, #16]
 80042c6:	2400      	movs	r4, #0
 80042c8:	9b08      	ldr	r3, [sp, #32]
 80042ca:	920e      	str	r2, [sp, #56]	@ 0x38
 80042cc:	e721      	b.n	8004112 <_dtoa_r+0x722>
 80042ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80042d0:	9e04      	ldr	r6, [sp, #16]
 80042d2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80042d4:	e728      	b.n	8004128 <_dtoa_r+0x738>
 80042d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80042da:	e751      	b.n	8004180 <_dtoa_r+0x790>
 80042dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80042de:	9903      	ldr	r1, [sp, #12]
 80042e0:	e750      	b.n	8004184 <_dtoa_r+0x794>
 80042e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80042e6:	e751      	b.n	800418c <_dtoa_r+0x79c>
 80042e8:	2300      	movs	r3, #0
 80042ea:	e779      	b.n	80041e0 <_dtoa_r+0x7f0>
 80042ec:	9b06      	ldr	r3, [sp, #24]
 80042ee:	e777      	b.n	80041e0 <_dtoa_r+0x7f0>
 80042f0:	2300      	movs	r3, #0
 80042f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80042f4:	e779      	b.n	80041ea <_dtoa_r+0x7fa>
 80042f6:	d093      	beq.n	8004220 <_dtoa_r+0x830>
 80042f8:	9a04      	ldr	r2, [sp, #16]
 80042fa:	331c      	adds	r3, #28
 80042fc:	441a      	add	r2, r3
 80042fe:	9204      	str	r2, [sp, #16]
 8004300:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004302:	441e      	add	r6, r3
 8004304:	441a      	add	r2, r3
 8004306:	9209      	str	r2, [sp, #36]	@ 0x24
 8004308:	e78a      	b.n	8004220 <_dtoa_r+0x830>
 800430a:	4603      	mov	r3, r0
 800430c:	e7f4      	b.n	80042f8 <_dtoa_r+0x908>
 800430e:	9b08      	ldr	r3, [sp, #32]
 8004310:	46b8      	mov	r8, r7
 8004312:	2b00      	cmp	r3, #0
 8004314:	dc20      	bgt.n	8004358 <_dtoa_r+0x968>
 8004316:	469b      	mov	fp, r3
 8004318:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800431a:	2b02      	cmp	r3, #2
 800431c:	dd1e      	ble.n	800435c <_dtoa_r+0x96c>
 800431e:	f1bb 0f00 	cmp.w	fp, #0
 8004322:	f47f adb1 	bne.w	8003e88 <_dtoa_r+0x498>
 8004326:	4621      	mov	r1, r4
 8004328:	465b      	mov	r3, fp
 800432a:	2205      	movs	r2, #5
 800432c:	4648      	mov	r0, r9
 800432e:	f000 fc4b 	bl	8004bc8 <__multadd>
 8004332:	4601      	mov	r1, r0
 8004334:	4604      	mov	r4, r0
 8004336:	9803      	ldr	r0, [sp, #12]
 8004338:	f000 fe56 	bl	8004fe8 <__mcmp>
 800433c:	2800      	cmp	r0, #0
 800433e:	f77f ada3 	ble.w	8003e88 <_dtoa_r+0x498>
 8004342:	4656      	mov	r6, sl
 8004344:	2331      	movs	r3, #49	@ 0x31
 8004346:	f108 0801 	add.w	r8, r8, #1
 800434a:	f806 3b01 	strb.w	r3, [r6], #1
 800434e:	e59f      	b.n	8003e90 <_dtoa_r+0x4a0>
 8004350:	46b8      	mov	r8, r7
 8004352:	9c08      	ldr	r4, [sp, #32]
 8004354:	4625      	mov	r5, r4
 8004356:	e7f4      	b.n	8004342 <_dtoa_r+0x952>
 8004358:	f8dd b020 	ldr.w	fp, [sp, #32]
 800435c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 8101 	beq.w	8004566 <_dtoa_r+0xb76>
 8004364:	2e00      	cmp	r6, #0
 8004366:	dd05      	ble.n	8004374 <_dtoa_r+0x984>
 8004368:	4629      	mov	r1, r5
 800436a:	4632      	mov	r2, r6
 800436c:	4648      	mov	r0, r9
 800436e:	f000 fdcf 	bl	8004f10 <__lshift>
 8004372:	4605      	mov	r5, r0
 8004374:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004376:	2b00      	cmp	r3, #0
 8004378:	d05c      	beq.n	8004434 <_dtoa_r+0xa44>
 800437a:	4648      	mov	r0, r9
 800437c:	6869      	ldr	r1, [r5, #4]
 800437e:	f000 fbc1 	bl	8004b04 <_Balloc>
 8004382:	4606      	mov	r6, r0
 8004384:	b928      	cbnz	r0, 8004392 <_dtoa_r+0x9a2>
 8004386:	4602      	mov	r2, r0
 8004388:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800438c:	4b80      	ldr	r3, [pc, #512]	@ (8004590 <_dtoa_r+0xba0>)
 800438e:	f7ff bb43 	b.w	8003a18 <_dtoa_r+0x28>
 8004392:	692a      	ldr	r2, [r5, #16]
 8004394:	f105 010c 	add.w	r1, r5, #12
 8004398:	3202      	adds	r2, #2
 800439a:	0092      	lsls	r2, r2, #2
 800439c:	300c      	adds	r0, #12
 800439e:	f001 f80d 	bl	80053bc <memcpy>
 80043a2:	2201      	movs	r2, #1
 80043a4:	4631      	mov	r1, r6
 80043a6:	4648      	mov	r0, r9
 80043a8:	f000 fdb2 	bl	8004f10 <__lshift>
 80043ac:	462f      	mov	r7, r5
 80043ae:	4605      	mov	r5, r0
 80043b0:	f10a 0301 	add.w	r3, sl, #1
 80043b4:	9304      	str	r3, [sp, #16]
 80043b6:	eb0a 030b 	add.w	r3, sl, fp
 80043ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80043bc:	9b06      	ldr	r3, [sp, #24]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80043c4:	9b04      	ldr	r3, [sp, #16]
 80043c6:	4621      	mov	r1, r4
 80043c8:	9803      	ldr	r0, [sp, #12]
 80043ca:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80043ce:	f7ff fa85 	bl	80038dc <quorem>
 80043d2:	4603      	mov	r3, r0
 80043d4:	4639      	mov	r1, r7
 80043d6:	3330      	adds	r3, #48	@ 0x30
 80043d8:	9006      	str	r0, [sp, #24]
 80043da:	9803      	ldr	r0, [sp, #12]
 80043dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80043de:	f000 fe03 	bl	8004fe8 <__mcmp>
 80043e2:	462a      	mov	r2, r5
 80043e4:	9008      	str	r0, [sp, #32]
 80043e6:	4621      	mov	r1, r4
 80043e8:	4648      	mov	r0, r9
 80043ea:	f000 fe19 	bl	8005020 <__mdiff>
 80043ee:	68c2      	ldr	r2, [r0, #12]
 80043f0:	4606      	mov	r6, r0
 80043f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80043f4:	bb02      	cbnz	r2, 8004438 <_dtoa_r+0xa48>
 80043f6:	4601      	mov	r1, r0
 80043f8:	9803      	ldr	r0, [sp, #12]
 80043fa:	f000 fdf5 	bl	8004fe8 <__mcmp>
 80043fe:	4602      	mov	r2, r0
 8004400:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004402:	4631      	mov	r1, r6
 8004404:	4648      	mov	r0, r9
 8004406:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800440a:	f000 fbbb 	bl	8004b84 <_Bfree>
 800440e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004410:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004412:	9e04      	ldr	r6, [sp, #16]
 8004414:	ea42 0103 	orr.w	r1, r2, r3
 8004418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800441a:	4319      	orrs	r1, r3
 800441c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800441e:	d10d      	bne.n	800443c <_dtoa_r+0xa4c>
 8004420:	2b39      	cmp	r3, #57	@ 0x39
 8004422:	d027      	beq.n	8004474 <_dtoa_r+0xa84>
 8004424:	9a08      	ldr	r2, [sp, #32]
 8004426:	2a00      	cmp	r2, #0
 8004428:	dd01      	ble.n	800442e <_dtoa_r+0xa3e>
 800442a:	9b06      	ldr	r3, [sp, #24]
 800442c:	3331      	adds	r3, #49	@ 0x31
 800442e:	f88b 3000 	strb.w	r3, [fp]
 8004432:	e52e      	b.n	8003e92 <_dtoa_r+0x4a2>
 8004434:	4628      	mov	r0, r5
 8004436:	e7b9      	b.n	80043ac <_dtoa_r+0x9bc>
 8004438:	2201      	movs	r2, #1
 800443a:	e7e2      	b.n	8004402 <_dtoa_r+0xa12>
 800443c:	9908      	ldr	r1, [sp, #32]
 800443e:	2900      	cmp	r1, #0
 8004440:	db04      	blt.n	800444c <_dtoa_r+0xa5c>
 8004442:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8004444:	4301      	orrs	r1, r0
 8004446:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004448:	4301      	orrs	r1, r0
 800444a:	d120      	bne.n	800448e <_dtoa_r+0xa9e>
 800444c:	2a00      	cmp	r2, #0
 800444e:	ddee      	ble.n	800442e <_dtoa_r+0xa3e>
 8004450:	2201      	movs	r2, #1
 8004452:	9903      	ldr	r1, [sp, #12]
 8004454:	4648      	mov	r0, r9
 8004456:	9304      	str	r3, [sp, #16]
 8004458:	f000 fd5a 	bl	8004f10 <__lshift>
 800445c:	4621      	mov	r1, r4
 800445e:	9003      	str	r0, [sp, #12]
 8004460:	f000 fdc2 	bl	8004fe8 <__mcmp>
 8004464:	2800      	cmp	r0, #0
 8004466:	9b04      	ldr	r3, [sp, #16]
 8004468:	dc02      	bgt.n	8004470 <_dtoa_r+0xa80>
 800446a:	d1e0      	bne.n	800442e <_dtoa_r+0xa3e>
 800446c:	07da      	lsls	r2, r3, #31
 800446e:	d5de      	bpl.n	800442e <_dtoa_r+0xa3e>
 8004470:	2b39      	cmp	r3, #57	@ 0x39
 8004472:	d1da      	bne.n	800442a <_dtoa_r+0xa3a>
 8004474:	2339      	movs	r3, #57	@ 0x39
 8004476:	f88b 3000 	strb.w	r3, [fp]
 800447a:	4633      	mov	r3, r6
 800447c:	461e      	mov	r6, r3
 800447e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004482:	3b01      	subs	r3, #1
 8004484:	2a39      	cmp	r2, #57	@ 0x39
 8004486:	d04e      	beq.n	8004526 <_dtoa_r+0xb36>
 8004488:	3201      	adds	r2, #1
 800448a:	701a      	strb	r2, [r3, #0]
 800448c:	e501      	b.n	8003e92 <_dtoa_r+0x4a2>
 800448e:	2a00      	cmp	r2, #0
 8004490:	dd03      	ble.n	800449a <_dtoa_r+0xaaa>
 8004492:	2b39      	cmp	r3, #57	@ 0x39
 8004494:	d0ee      	beq.n	8004474 <_dtoa_r+0xa84>
 8004496:	3301      	adds	r3, #1
 8004498:	e7c9      	b.n	800442e <_dtoa_r+0xa3e>
 800449a:	9a04      	ldr	r2, [sp, #16]
 800449c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800449e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80044a2:	428a      	cmp	r2, r1
 80044a4:	d028      	beq.n	80044f8 <_dtoa_r+0xb08>
 80044a6:	2300      	movs	r3, #0
 80044a8:	220a      	movs	r2, #10
 80044aa:	9903      	ldr	r1, [sp, #12]
 80044ac:	4648      	mov	r0, r9
 80044ae:	f000 fb8b 	bl	8004bc8 <__multadd>
 80044b2:	42af      	cmp	r7, r5
 80044b4:	9003      	str	r0, [sp, #12]
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	f04f 020a 	mov.w	r2, #10
 80044be:	4639      	mov	r1, r7
 80044c0:	4648      	mov	r0, r9
 80044c2:	d107      	bne.n	80044d4 <_dtoa_r+0xae4>
 80044c4:	f000 fb80 	bl	8004bc8 <__multadd>
 80044c8:	4607      	mov	r7, r0
 80044ca:	4605      	mov	r5, r0
 80044cc:	9b04      	ldr	r3, [sp, #16]
 80044ce:	3301      	adds	r3, #1
 80044d0:	9304      	str	r3, [sp, #16]
 80044d2:	e777      	b.n	80043c4 <_dtoa_r+0x9d4>
 80044d4:	f000 fb78 	bl	8004bc8 <__multadd>
 80044d8:	4629      	mov	r1, r5
 80044da:	4607      	mov	r7, r0
 80044dc:	2300      	movs	r3, #0
 80044de:	220a      	movs	r2, #10
 80044e0:	4648      	mov	r0, r9
 80044e2:	f000 fb71 	bl	8004bc8 <__multadd>
 80044e6:	4605      	mov	r5, r0
 80044e8:	e7f0      	b.n	80044cc <_dtoa_r+0xadc>
 80044ea:	f1bb 0f00 	cmp.w	fp, #0
 80044ee:	bfcc      	ite	gt
 80044f0:	465e      	movgt	r6, fp
 80044f2:	2601      	movle	r6, #1
 80044f4:	2700      	movs	r7, #0
 80044f6:	4456      	add	r6, sl
 80044f8:	2201      	movs	r2, #1
 80044fa:	9903      	ldr	r1, [sp, #12]
 80044fc:	4648      	mov	r0, r9
 80044fe:	9304      	str	r3, [sp, #16]
 8004500:	f000 fd06 	bl	8004f10 <__lshift>
 8004504:	4621      	mov	r1, r4
 8004506:	9003      	str	r0, [sp, #12]
 8004508:	f000 fd6e 	bl	8004fe8 <__mcmp>
 800450c:	2800      	cmp	r0, #0
 800450e:	dcb4      	bgt.n	800447a <_dtoa_r+0xa8a>
 8004510:	d102      	bne.n	8004518 <_dtoa_r+0xb28>
 8004512:	9b04      	ldr	r3, [sp, #16]
 8004514:	07db      	lsls	r3, r3, #31
 8004516:	d4b0      	bmi.n	800447a <_dtoa_r+0xa8a>
 8004518:	4633      	mov	r3, r6
 800451a:	461e      	mov	r6, r3
 800451c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004520:	2a30      	cmp	r2, #48	@ 0x30
 8004522:	d0fa      	beq.n	800451a <_dtoa_r+0xb2a>
 8004524:	e4b5      	b.n	8003e92 <_dtoa_r+0x4a2>
 8004526:	459a      	cmp	sl, r3
 8004528:	d1a8      	bne.n	800447c <_dtoa_r+0xa8c>
 800452a:	2331      	movs	r3, #49	@ 0x31
 800452c:	f108 0801 	add.w	r8, r8, #1
 8004530:	f88a 3000 	strb.w	r3, [sl]
 8004534:	e4ad      	b.n	8003e92 <_dtoa_r+0x4a2>
 8004536:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004538:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004594 <_dtoa_r+0xba4>
 800453c:	b11b      	cbz	r3, 8004546 <_dtoa_r+0xb56>
 800453e:	f10a 0308 	add.w	r3, sl, #8
 8004542:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	4650      	mov	r0, sl
 8004548:	b017      	add	sp, #92	@ 0x5c
 800454a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800454e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004550:	2b01      	cmp	r3, #1
 8004552:	f77f ae2e 	ble.w	80041b2 <_dtoa_r+0x7c2>
 8004556:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004558:	930a      	str	r3, [sp, #40]	@ 0x28
 800455a:	2001      	movs	r0, #1
 800455c:	e64d      	b.n	80041fa <_dtoa_r+0x80a>
 800455e:	f1bb 0f00 	cmp.w	fp, #0
 8004562:	f77f aed9 	ble.w	8004318 <_dtoa_r+0x928>
 8004566:	4656      	mov	r6, sl
 8004568:	4621      	mov	r1, r4
 800456a:	9803      	ldr	r0, [sp, #12]
 800456c:	f7ff f9b6 	bl	80038dc <quorem>
 8004570:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004574:	f806 3b01 	strb.w	r3, [r6], #1
 8004578:	eba6 020a 	sub.w	r2, r6, sl
 800457c:	4593      	cmp	fp, r2
 800457e:	ddb4      	ble.n	80044ea <_dtoa_r+0xafa>
 8004580:	2300      	movs	r3, #0
 8004582:	220a      	movs	r2, #10
 8004584:	4648      	mov	r0, r9
 8004586:	9903      	ldr	r1, [sp, #12]
 8004588:	f000 fb1e 	bl	8004bc8 <__multadd>
 800458c:	9003      	str	r0, [sp, #12]
 800458e:	e7eb      	b.n	8004568 <_dtoa_r+0xb78>
 8004590:	08005c30 	.word	0x08005c30
 8004594:	08005bb4 	.word	0x08005bb4

08004598 <__ssputs_r>:
 8004598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800459c:	461f      	mov	r7, r3
 800459e:	688e      	ldr	r6, [r1, #8]
 80045a0:	4682      	mov	sl, r0
 80045a2:	42be      	cmp	r6, r7
 80045a4:	460c      	mov	r4, r1
 80045a6:	4690      	mov	r8, r2
 80045a8:	680b      	ldr	r3, [r1, #0]
 80045aa:	d82d      	bhi.n	8004608 <__ssputs_r+0x70>
 80045ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80045b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80045b4:	d026      	beq.n	8004604 <__ssputs_r+0x6c>
 80045b6:	6965      	ldr	r5, [r4, #20]
 80045b8:	6909      	ldr	r1, [r1, #16]
 80045ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045be:	eba3 0901 	sub.w	r9, r3, r1
 80045c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045c6:	1c7b      	adds	r3, r7, #1
 80045c8:	444b      	add	r3, r9
 80045ca:	106d      	asrs	r5, r5, #1
 80045cc:	429d      	cmp	r5, r3
 80045ce:	bf38      	it	cc
 80045d0:	461d      	movcc	r5, r3
 80045d2:	0553      	lsls	r3, r2, #21
 80045d4:	d527      	bpl.n	8004626 <__ssputs_r+0x8e>
 80045d6:	4629      	mov	r1, r5
 80045d8:	f000 f960 	bl	800489c <_malloc_r>
 80045dc:	4606      	mov	r6, r0
 80045de:	b360      	cbz	r0, 800463a <__ssputs_r+0xa2>
 80045e0:	464a      	mov	r2, r9
 80045e2:	6921      	ldr	r1, [r4, #16]
 80045e4:	f000 feea 	bl	80053bc <memcpy>
 80045e8:	89a3      	ldrh	r3, [r4, #12]
 80045ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80045ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045f2:	81a3      	strh	r3, [r4, #12]
 80045f4:	6126      	str	r6, [r4, #16]
 80045f6:	444e      	add	r6, r9
 80045f8:	6026      	str	r6, [r4, #0]
 80045fa:	463e      	mov	r6, r7
 80045fc:	6165      	str	r5, [r4, #20]
 80045fe:	eba5 0509 	sub.w	r5, r5, r9
 8004602:	60a5      	str	r5, [r4, #8]
 8004604:	42be      	cmp	r6, r7
 8004606:	d900      	bls.n	800460a <__ssputs_r+0x72>
 8004608:	463e      	mov	r6, r7
 800460a:	4632      	mov	r2, r6
 800460c:	4641      	mov	r1, r8
 800460e:	6820      	ldr	r0, [r4, #0]
 8004610:	f000 fe63 	bl	80052da <memmove>
 8004614:	2000      	movs	r0, #0
 8004616:	68a3      	ldr	r3, [r4, #8]
 8004618:	1b9b      	subs	r3, r3, r6
 800461a:	60a3      	str	r3, [r4, #8]
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	4433      	add	r3, r6
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004626:	462a      	mov	r2, r5
 8004628:	f000 fe29 	bl	800527e <_realloc_r>
 800462c:	4606      	mov	r6, r0
 800462e:	2800      	cmp	r0, #0
 8004630:	d1e0      	bne.n	80045f4 <__ssputs_r+0x5c>
 8004632:	4650      	mov	r0, sl
 8004634:	6921      	ldr	r1, [r4, #16]
 8004636:	f000 ff01 	bl	800543c <_free_r>
 800463a:	230c      	movs	r3, #12
 800463c:	f8ca 3000 	str.w	r3, [sl]
 8004640:	89a3      	ldrh	r3, [r4, #12]
 8004642:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800464a:	81a3      	strh	r3, [r4, #12]
 800464c:	e7e9      	b.n	8004622 <__ssputs_r+0x8a>
	...

08004650 <_svfiprintf_r>:
 8004650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004654:	4698      	mov	r8, r3
 8004656:	898b      	ldrh	r3, [r1, #12]
 8004658:	4607      	mov	r7, r0
 800465a:	061b      	lsls	r3, r3, #24
 800465c:	460d      	mov	r5, r1
 800465e:	4614      	mov	r4, r2
 8004660:	b09d      	sub	sp, #116	@ 0x74
 8004662:	d510      	bpl.n	8004686 <_svfiprintf_r+0x36>
 8004664:	690b      	ldr	r3, [r1, #16]
 8004666:	b973      	cbnz	r3, 8004686 <_svfiprintf_r+0x36>
 8004668:	2140      	movs	r1, #64	@ 0x40
 800466a:	f000 f917 	bl	800489c <_malloc_r>
 800466e:	6028      	str	r0, [r5, #0]
 8004670:	6128      	str	r0, [r5, #16]
 8004672:	b930      	cbnz	r0, 8004682 <_svfiprintf_r+0x32>
 8004674:	230c      	movs	r3, #12
 8004676:	603b      	str	r3, [r7, #0]
 8004678:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800467c:	b01d      	add	sp, #116	@ 0x74
 800467e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004682:	2340      	movs	r3, #64	@ 0x40
 8004684:	616b      	str	r3, [r5, #20]
 8004686:	2300      	movs	r3, #0
 8004688:	9309      	str	r3, [sp, #36]	@ 0x24
 800468a:	2320      	movs	r3, #32
 800468c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004690:	2330      	movs	r3, #48	@ 0x30
 8004692:	f04f 0901 	mov.w	r9, #1
 8004696:	f8cd 800c 	str.w	r8, [sp, #12]
 800469a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004834 <_svfiprintf_r+0x1e4>
 800469e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80046a2:	4623      	mov	r3, r4
 80046a4:	469a      	mov	sl, r3
 80046a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046aa:	b10a      	cbz	r2, 80046b0 <_svfiprintf_r+0x60>
 80046ac:	2a25      	cmp	r2, #37	@ 0x25
 80046ae:	d1f9      	bne.n	80046a4 <_svfiprintf_r+0x54>
 80046b0:	ebba 0b04 	subs.w	fp, sl, r4
 80046b4:	d00b      	beq.n	80046ce <_svfiprintf_r+0x7e>
 80046b6:	465b      	mov	r3, fp
 80046b8:	4622      	mov	r2, r4
 80046ba:	4629      	mov	r1, r5
 80046bc:	4638      	mov	r0, r7
 80046be:	f7ff ff6b 	bl	8004598 <__ssputs_r>
 80046c2:	3001      	adds	r0, #1
 80046c4:	f000 80a7 	beq.w	8004816 <_svfiprintf_r+0x1c6>
 80046c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046ca:	445a      	add	r2, fp
 80046cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80046ce:	f89a 3000 	ldrb.w	r3, [sl]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 809f 	beq.w	8004816 <_svfiprintf_r+0x1c6>
 80046d8:	2300      	movs	r3, #0
 80046da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80046de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046e2:	f10a 0a01 	add.w	sl, sl, #1
 80046e6:	9304      	str	r3, [sp, #16]
 80046e8:	9307      	str	r3, [sp, #28]
 80046ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80046ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80046f0:	4654      	mov	r4, sl
 80046f2:	2205      	movs	r2, #5
 80046f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f8:	484e      	ldr	r0, [pc, #312]	@ (8004834 <_svfiprintf_r+0x1e4>)
 80046fa:	f7ff f8e1 	bl	80038c0 <memchr>
 80046fe:	9a04      	ldr	r2, [sp, #16]
 8004700:	b9d8      	cbnz	r0, 800473a <_svfiprintf_r+0xea>
 8004702:	06d0      	lsls	r0, r2, #27
 8004704:	bf44      	itt	mi
 8004706:	2320      	movmi	r3, #32
 8004708:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800470c:	0711      	lsls	r1, r2, #28
 800470e:	bf44      	itt	mi
 8004710:	232b      	movmi	r3, #43	@ 0x2b
 8004712:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004716:	f89a 3000 	ldrb.w	r3, [sl]
 800471a:	2b2a      	cmp	r3, #42	@ 0x2a
 800471c:	d015      	beq.n	800474a <_svfiprintf_r+0xfa>
 800471e:	4654      	mov	r4, sl
 8004720:	2000      	movs	r0, #0
 8004722:	f04f 0c0a 	mov.w	ip, #10
 8004726:	9a07      	ldr	r2, [sp, #28]
 8004728:	4621      	mov	r1, r4
 800472a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800472e:	3b30      	subs	r3, #48	@ 0x30
 8004730:	2b09      	cmp	r3, #9
 8004732:	d94b      	bls.n	80047cc <_svfiprintf_r+0x17c>
 8004734:	b1b0      	cbz	r0, 8004764 <_svfiprintf_r+0x114>
 8004736:	9207      	str	r2, [sp, #28]
 8004738:	e014      	b.n	8004764 <_svfiprintf_r+0x114>
 800473a:	eba0 0308 	sub.w	r3, r0, r8
 800473e:	fa09 f303 	lsl.w	r3, r9, r3
 8004742:	4313      	orrs	r3, r2
 8004744:	46a2      	mov	sl, r4
 8004746:	9304      	str	r3, [sp, #16]
 8004748:	e7d2      	b.n	80046f0 <_svfiprintf_r+0xa0>
 800474a:	9b03      	ldr	r3, [sp, #12]
 800474c:	1d19      	adds	r1, r3, #4
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	9103      	str	r1, [sp, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	bfbb      	ittet	lt
 8004756:	425b      	neglt	r3, r3
 8004758:	f042 0202 	orrlt.w	r2, r2, #2
 800475c:	9307      	strge	r3, [sp, #28]
 800475e:	9307      	strlt	r3, [sp, #28]
 8004760:	bfb8      	it	lt
 8004762:	9204      	strlt	r2, [sp, #16]
 8004764:	7823      	ldrb	r3, [r4, #0]
 8004766:	2b2e      	cmp	r3, #46	@ 0x2e
 8004768:	d10a      	bne.n	8004780 <_svfiprintf_r+0x130>
 800476a:	7863      	ldrb	r3, [r4, #1]
 800476c:	2b2a      	cmp	r3, #42	@ 0x2a
 800476e:	d132      	bne.n	80047d6 <_svfiprintf_r+0x186>
 8004770:	9b03      	ldr	r3, [sp, #12]
 8004772:	3402      	adds	r4, #2
 8004774:	1d1a      	adds	r2, r3, #4
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	9203      	str	r2, [sp, #12]
 800477a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800477e:	9305      	str	r3, [sp, #20]
 8004780:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004838 <_svfiprintf_r+0x1e8>
 8004784:	2203      	movs	r2, #3
 8004786:	4650      	mov	r0, sl
 8004788:	7821      	ldrb	r1, [r4, #0]
 800478a:	f7ff f899 	bl	80038c0 <memchr>
 800478e:	b138      	cbz	r0, 80047a0 <_svfiprintf_r+0x150>
 8004790:	2240      	movs	r2, #64	@ 0x40
 8004792:	9b04      	ldr	r3, [sp, #16]
 8004794:	eba0 000a 	sub.w	r0, r0, sl
 8004798:	4082      	lsls	r2, r0
 800479a:	4313      	orrs	r3, r2
 800479c:	3401      	adds	r4, #1
 800479e:	9304      	str	r3, [sp, #16]
 80047a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047a4:	2206      	movs	r2, #6
 80047a6:	4825      	ldr	r0, [pc, #148]	@ (800483c <_svfiprintf_r+0x1ec>)
 80047a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80047ac:	f7ff f888 	bl	80038c0 <memchr>
 80047b0:	2800      	cmp	r0, #0
 80047b2:	d036      	beq.n	8004822 <_svfiprintf_r+0x1d2>
 80047b4:	4b22      	ldr	r3, [pc, #136]	@ (8004840 <_svfiprintf_r+0x1f0>)
 80047b6:	bb1b      	cbnz	r3, 8004800 <_svfiprintf_r+0x1b0>
 80047b8:	9b03      	ldr	r3, [sp, #12]
 80047ba:	3307      	adds	r3, #7
 80047bc:	f023 0307 	bic.w	r3, r3, #7
 80047c0:	3308      	adds	r3, #8
 80047c2:	9303      	str	r3, [sp, #12]
 80047c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047c6:	4433      	add	r3, r6
 80047c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80047ca:	e76a      	b.n	80046a2 <_svfiprintf_r+0x52>
 80047cc:	460c      	mov	r4, r1
 80047ce:	2001      	movs	r0, #1
 80047d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80047d4:	e7a8      	b.n	8004728 <_svfiprintf_r+0xd8>
 80047d6:	2300      	movs	r3, #0
 80047d8:	f04f 0c0a 	mov.w	ip, #10
 80047dc:	4619      	mov	r1, r3
 80047de:	3401      	adds	r4, #1
 80047e0:	9305      	str	r3, [sp, #20]
 80047e2:	4620      	mov	r0, r4
 80047e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047e8:	3a30      	subs	r2, #48	@ 0x30
 80047ea:	2a09      	cmp	r2, #9
 80047ec:	d903      	bls.n	80047f6 <_svfiprintf_r+0x1a6>
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0c6      	beq.n	8004780 <_svfiprintf_r+0x130>
 80047f2:	9105      	str	r1, [sp, #20]
 80047f4:	e7c4      	b.n	8004780 <_svfiprintf_r+0x130>
 80047f6:	4604      	mov	r4, r0
 80047f8:	2301      	movs	r3, #1
 80047fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80047fe:	e7f0      	b.n	80047e2 <_svfiprintf_r+0x192>
 8004800:	ab03      	add	r3, sp, #12
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	462a      	mov	r2, r5
 8004806:	4638      	mov	r0, r7
 8004808:	4b0e      	ldr	r3, [pc, #56]	@ (8004844 <_svfiprintf_r+0x1f4>)
 800480a:	a904      	add	r1, sp, #16
 800480c:	f7fe fb70 	bl	8002ef0 <_printf_float>
 8004810:	1c42      	adds	r2, r0, #1
 8004812:	4606      	mov	r6, r0
 8004814:	d1d6      	bne.n	80047c4 <_svfiprintf_r+0x174>
 8004816:	89ab      	ldrh	r3, [r5, #12]
 8004818:	065b      	lsls	r3, r3, #25
 800481a:	f53f af2d 	bmi.w	8004678 <_svfiprintf_r+0x28>
 800481e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004820:	e72c      	b.n	800467c <_svfiprintf_r+0x2c>
 8004822:	ab03      	add	r3, sp, #12
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	462a      	mov	r2, r5
 8004828:	4638      	mov	r0, r7
 800482a:	4b06      	ldr	r3, [pc, #24]	@ (8004844 <_svfiprintf_r+0x1f4>)
 800482c:	a904      	add	r1, sp, #16
 800482e:	f7fe fdfd 	bl	800342c <_printf_i>
 8004832:	e7ed      	b.n	8004810 <_svfiprintf_r+0x1c0>
 8004834:	08005c41 	.word	0x08005c41
 8004838:	08005c47 	.word	0x08005c47
 800483c:	08005c4b 	.word	0x08005c4b
 8004840:	08002ef1 	.word	0x08002ef1
 8004844:	08004599 	.word	0x08004599

08004848 <malloc>:
 8004848:	4b02      	ldr	r3, [pc, #8]	@ (8004854 <malloc+0xc>)
 800484a:	4601      	mov	r1, r0
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	f000 b825 	b.w	800489c <_malloc_r>
 8004852:	bf00      	nop
 8004854:	20000018 	.word	0x20000018

08004858 <sbrk_aligned>:
 8004858:	b570      	push	{r4, r5, r6, lr}
 800485a:	4e0f      	ldr	r6, [pc, #60]	@ (8004898 <sbrk_aligned+0x40>)
 800485c:	460c      	mov	r4, r1
 800485e:	6831      	ldr	r1, [r6, #0]
 8004860:	4605      	mov	r5, r0
 8004862:	b911      	cbnz	r1, 800486a <sbrk_aligned+0x12>
 8004864:	f000 fd78 	bl	8005358 <_sbrk_r>
 8004868:	6030      	str	r0, [r6, #0]
 800486a:	4621      	mov	r1, r4
 800486c:	4628      	mov	r0, r5
 800486e:	f000 fd73 	bl	8005358 <_sbrk_r>
 8004872:	1c43      	adds	r3, r0, #1
 8004874:	d103      	bne.n	800487e <sbrk_aligned+0x26>
 8004876:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800487a:	4620      	mov	r0, r4
 800487c:	bd70      	pop	{r4, r5, r6, pc}
 800487e:	1cc4      	adds	r4, r0, #3
 8004880:	f024 0403 	bic.w	r4, r4, #3
 8004884:	42a0      	cmp	r0, r4
 8004886:	d0f8      	beq.n	800487a <sbrk_aligned+0x22>
 8004888:	1a21      	subs	r1, r4, r0
 800488a:	4628      	mov	r0, r5
 800488c:	f000 fd64 	bl	8005358 <_sbrk_r>
 8004890:	3001      	adds	r0, #1
 8004892:	d1f2      	bne.n	800487a <sbrk_aligned+0x22>
 8004894:	e7ef      	b.n	8004876 <sbrk_aligned+0x1e>
 8004896:	bf00      	nop
 8004898:	20000390 	.word	0x20000390

0800489c <_malloc_r>:
 800489c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048a0:	1ccd      	adds	r5, r1, #3
 80048a2:	f025 0503 	bic.w	r5, r5, #3
 80048a6:	3508      	adds	r5, #8
 80048a8:	2d0c      	cmp	r5, #12
 80048aa:	bf38      	it	cc
 80048ac:	250c      	movcc	r5, #12
 80048ae:	2d00      	cmp	r5, #0
 80048b0:	4606      	mov	r6, r0
 80048b2:	db01      	blt.n	80048b8 <_malloc_r+0x1c>
 80048b4:	42a9      	cmp	r1, r5
 80048b6:	d904      	bls.n	80048c2 <_malloc_r+0x26>
 80048b8:	230c      	movs	r3, #12
 80048ba:	6033      	str	r3, [r6, #0]
 80048bc:	2000      	movs	r0, #0
 80048be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004998 <_malloc_r+0xfc>
 80048c6:	f000 f911 	bl	8004aec <__malloc_lock>
 80048ca:	f8d8 3000 	ldr.w	r3, [r8]
 80048ce:	461c      	mov	r4, r3
 80048d0:	bb44      	cbnz	r4, 8004924 <_malloc_r+0x88>
 80048d2:	4629      	mov	r1, r5
 80048d4:	4630      	mov	r0, r6
 80048d6:	f7ff ffbf 	bl	8004858 <sbrk_aligned>
 80048da:	1c43      	adds	r3, r0, #1
 80048dc:	4604      	mov	r4, r0
 80048de:	d158      	bne.n	8004992 <_malloc_r+0xf6>
 80048e0:	f8d8 4000 	ldr.w	r4, [r8]
 80048e4:	4627      	mov	r7, r4
 80048e6:	2f00      	cmp	r7, #0
 80048e8:	d143      	bne.n	8004972 <_malloc_r+0xd6>
 80048ea:	2c00      	cmp	r4, #0
 80048ec:	d04b      	beq.n	8004986 <_malloc_r+0xea>
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	4639      	mov	r1, r7
 80048f2:	4630      	mov	r0, r6
 80048f4:	eb04 0903 	add.w	r9, r4, r3
 80048f8:	f000 fd2e 	bl	8005358 <_sbrk_r>
 80048fc:	4581      	cmp	r9, r0
 80048fe:	d142      	bne.n	8004986 <_malloc_r+0xea>
 8004900:	6821      	ldr	r1, [r4, #0]
 8004902:	4630      	mov	r0, r6
 8004904:	1a6d      	subs	r5, r5, r1
 8004906:	4629      	mov	r1, r5
 8004908:	f7ff ffa6 	bl	8004858 <sbrk_aligned>
 800490c:	3001      	adds	r0, #1
 800490e:	d03a      	beq.n	8004986 <_malloc_r+0xea>
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	442b      	add	r3, r5
 8004914:	6023      	str	r3, [r4, #0]
 8004916:	f8d8 3000 	ldr.w	r3, [r8]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	bb62      	cbnz	r2, 8004978 <_malloc_r+0xdc>
 800491e:	f8c8 7000 	str.w	r7, [r8]
 8004922:	e00f      	b.n	8004944 <_malloc_r+0xa8>
 8004924:	6822      	ldr	r2, [r4, #0]
 8004926:	1b52      	subs	r2, r2, r5
 8004928:	d420      	bmi.n	800496c <_malloc_r+0xd0>
 800492a:	2a0b      	cmp	r2, #11
 800492c:	d917      	bls.n	800495e <_malloc_r+0xc2>
 800492e:	1961      	adds	r1, r4, r5
 8004930:	42a3      	cmp	r3, r4
 8004932:	6025      	str	r5, [r4, #0]
 8004934:	bf18      	it	ne
 8004936:	6059      	strne	r1, [r3, #4]
 8004938:	6863      	ldr	r3, [r4, #4]
 800493a:	bf08      	it	eq
 800493c:	f8c8 1000 	streq.w	r1, [r8]
 8004940:	5162      	str	r2, [r4, r5]
 8004942:	604b      	str	r3, [r1, #4]
 8004944:	4630      	mov	r0, r6
 8004946:	f000 f8d7 	bl	8004af8 <__malloc_unlock>
 800494a:	f104 000b 	add.w	r0, r4, #11
 800494e:	1d23      	adds	r3, r4, #4
 8004950:	f020 0007 	bic.w	r0, r0, #7
 8004954:	1ac2      	subs	r2, r0, r3
 8004956:	bf1c      	itt	ne
 8004958:	1a1b      	subne	r3, r3, r0
 800495a:	50a3      	strne	r3, [r4, r2]
 800495c:	e7af      	b.n	80048be <_malloc_r+0x22>
 800495e:	6862      	ldr	r2, [r4, #4]
 8004960:	42a3      	cmp	r3, r4
 8004962:	bf0c      	ite	eq
 8004964:	f8c8 2000 	streq.w	r2, [r8]
 8004968:	605a      	strne	r2, [r3, #4]
 800496a:	e7eb      	b.n	8004944 <_malloc_r+0xa8>
 800496c:	4623      	mov	r3, r4
 800496e:	6864      	ldr	r4, [r4, #4]
 8004970:	e7ae      	b.n	80048d0 <_malloc_r+0x34>
 8004972:	463c      	mov	r4, r7
 8004974:	687f      	ldr	r7, [r7, #4]
 8004976:	e7b6      	b.n	80048e6 <_malloc_r+0x4a>
 8004978:	461a      	mov	r2, r3
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	42a3      	cmp	r3, r4
 800497e:	d1fb      	bne.n	8004978 <_malloc_r+0xdc>
 8004980:	2300      	movs	r3, #0
 8004982:	6053      	str	r3, [r2, #4]
 8004984:	e7de      	b.n	8004944 <_malloc_r+0xa8>
 8004986:	230c      	movs	r3, #12
 8004988:	4630      	mov	r0, r6
 800498a:	6033      	str	r3, [r6, #0]
 800498c:	f000 f8b4 	bl	8004af8 <__malloc_unlock>
 8004990:	e794      	b.n	80048bc <_malloc_r+0x20>
 8004992:	6005      	str	r5, [r0, #0]
 8004994:	e7d6      	b.n	8004944 <_malloc_r+0xa8>
 8004996:	bf00      	nop
 8004998:	20000394 	.word	0x20000394

0800499c <__sflush_r>:
 800499c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a2:	0716      	lsls	r6, r2, #28
 80049a4:	4605      	mov	r5, r0
 80049a6:	460c      	mov	r4, r1
 80049a8:	d454      	bmi.n	8004a54 <__sflush_r+0xb8>
 80049aa:	684b      	ldr	r3, [r1, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	dc02      	bgt.n	80049b6 <__sflush_r+0x1a>
 80049b0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	dd48      	ble.n	8004a48 <__sflush_r+0xac>
 80049b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049b8:	2e00      	cmp	r6, #0
 80049ba:	d045      	beq.n	8004a48 <__sflush_r+0xac>
 80049bc:	2300      	movs	r3, #0
 80049be:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80049c2:	682f      	ldr	r7, [r5, #0]
 80049c4:	6a21      	ldr	r1, [r4, #32]
 80049c6:	602b      	str	r3, [r5, #0]
 80049c8:	d030      	beq.n	8004a2c <__sflush_r+0x90>
 80049ca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	0759      	lsls	r1, r3, #29
 80049d0:	d505      	bpl.n	80049de <__sflush_r+0x42>
 80049d2:	6863      	ldr	r3, [r4, #4]
 80049d4:	1ad2      	subs	r2, r2, r3
 80049d6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80049d8:	b10b      	cbz	r3, 80049de <__sflush_r+0x42>
 80049da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049dc:	1ad2      	subs	r2, r2, r3
 80049de:	2300      	movs	r3, #0
 80049e0:	4628      	mov	r0, r5
 80049e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049e4:	6a21      	ldr	r1, [r4, #32]
 80049e6:	47b0      	blx	r6
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	89a3      	ldrh	r3, [r4, #12]
 80049ec:	d106      	bne.n	80049fc <__sflush_r+0x60>
 80049ee:	6829      	ldr	r1, [r5, #0]
 80049f0:	291d      	cmp	r1, #29
 80049f2:	d82b      	bhi.n	8004a4c <__sflush_r+0xb0>
 80049f4:	4a28      	ldr	r2, [pc, #160]	@ (8004a98 <__sflush_r+0xfc>)
 80049f6:	40ca      	lsrs	r2, r1
 80049f8:	07d6      	lsls	r6, r2, #31
 80049fa:	d527      	bpl.n	8004a4c <__sflush_r+0xb0>
 80049fc:	2200      	movs	r2, #0
 80049fe:	6062      	str	r2, [r4, #4]
 8004a00:	6922      	ldr	r2, [r4, #16]
 8004a02:	04d9      	lsls	r1, r3, #19
 8004a04:	6022      	str	r2, [r4, #0]
 8004a06:	d504      	bpl.n	8004a12 <__sflush_r+0x76>
 8004a08:	1c42      	adds	r2, r0, #1
 8004a0a:	d101      	bne.n	8004a10 <__sflush_r+0x74>
 8004a0c:	682b      	ldr	r3, [r5, #0]
 8004a0e:	b903      	cbnz	r3, 8004a12 <__sflush_r+0x76>
 8004a10:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a12:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a14:	602f      	str	r7, [r5, #0]
 8004a16:	b1b9      	cbz	r1, 8004a48 <__sflush_r+0xac>
 8004a18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a1c:	4299      	cmp	r1, r3
 8004a1e:	d002      	beq.n	8004a26 <__sflush_r+0x8a>
 8004a20:	4628      	mov	r0, r5
 8004a22:	f000 fd0b 	bl	800543c <_free_r>
 8004a26:	2300      	movs	r3, #0
 8004a28:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a2a:	e00d      	b.n	8004a48 <__sflush_r+0xac>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	4628      	mov	r0, r5
 8004a30:	47b0      	blx	r6
 8004a32:	4602      	mov	r2, r0
 8004a34:	1c50      	adds	r0, r2, #1
 8004a36:	d1c9      	bne.n	80049cc <__sflush_r+0x30>
 8004a38:	682b      	ldr	r3, [r5, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0c6      	beq.n	80049cc <__sflush_r+0x30>
 8004a3e:	2b1d      	cmp	r3, #29
 8004a40:	d001      	beq.n	8004a46 <__sflush_r+0xaa>
 8004a42:	2b16      	cmp	r3, #22
 8004a44:	d11d      	bne.n	8004a82 <__sflush_r+0xe6>
 8004a46:	602f      	str	r7, [r5, #0]
 8004a48:	2000      	movs	r0, #0
 8004a4a:	e021      	b.n	8004a90 <__sflush_r+0xf4>
 8004a4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a50:	b21b      	sxth	r3, r3
 8004a52:	e01a      	b.n	8004a8a <__sflush_r+0xee>
 8004a54:	690f      	ldr	r7, [r1, #16]
 8004a56:	2f00      	cmp	r7, #0
 8004a58:	d0f6      	beq.n	8004a48 <__sflush_r+0xac>
 8004a5a:	0793      	lsls	r3, r2, #30
 8004a5c:	bf18      	it	ne
 8004a5e:	2300      	movne	r3, #0
 8004a60:	680e      	ldr	r6, [r1, #0]
 8004a62:	bf08      	it	eq
 8004a64:	694b      	ldreq	r3, [r1, #20]
 8004a66:	1bf6      	subs	r6, r6, r7
 8004a68:	600f      	str	r7, [r1, #0]
 8004a6a:	608b      	str	r3, [r1, #8]
 8004a6c:	2e00      	cmp	r6, #0
 8004a6e:	ddeb      	ble.n	8004a48 <__sflush_r+0xac>
 8004a70:	4633      	mov	r3, r6
 8004a72:	463a      	mov	r2, r7
 8004a74:	4628      	mov	r0, r5
 8004a76:	6a21      	ldr	r1, [r4, #32]
 8004a78:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004a7c:	47e0      	blx	ip
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	dc07      	bgt.n	8004a92 <__sflush_r+0xf6>
 8004a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a8e:	81a3      	strh	r3, [r4, #12]
 8004a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a92:	4407      	add	r7, r0
 8004a94:	1a36      	subs	r6, r6, r0
 8004a96:	e7e9      	b.n	8004a6c <__sflush_r+0xd0>
 8004a98:	20400001 	.word	0x20400001

08004a9c <_fflush_r>:
 8004a9c:	b538      	push	{r3, r4, r5, lr}
 8004a9e:	690b      	ldr	r3, [r1, #16]
 8004aa0:	4605      	mov	r5, r0
 8004aa2:	460c      	mov	r4, r1
 8004aa4:	b913      	cbnz	r3, 8004aac <_fflush_r+0x10>
 8004aa6:	2500      	movs	r5, #0
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	bd38      	pop	{r3, r4, r5, pc}
 8004aac:	b118      	cbz	r0, 8004ab6 <_fflush_r+0x1a>
 8004aae:	6a03      	ldr	r3, [r0, #32]
 8004ab0:	b90b      	cbnz	r3, 8004ab6 <_fflush_r+0x1a>
 8004ab2:	f7fe fe9b 	bl	80037ec <__sinit>
 8004ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f3      	beq.n	8004aa6 <_fflush_r+0xa>
 8004abe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ac0:	07d0      	lsls	r0, r2, #31
 8004ac2:	d404      	bmi.n	8004ace <_fflush_r+0x32>
 8004ac4:	0599      	lsls	r1, r3, #22
 8004ac6:	d402      	bmi.n	8004ace <_fflush_r+0x32>
 8004ac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004aca:	f7fe fef2 	bl	80038b2 <__retarget_lock_acquire_recursive>
 8004ace:	4628      	mov	r0, r5
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	f7ff ff63 	bl	800499c <__sflush_r>
 8004ad6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ad8:	4605      	mov	r5, r0
 8004ada:	07da      	lsls	r2, r3, #31
 8004adc:	d4e4      	bmi.n	8004aa8 <_fflush_r+0xc>
 8004ade:	89a3      	ldrh	r3, [r4, #12]
 8004ae0:	059b      	lsls	r3, r3, #22
 8004ae2:	d4e1      	bmi.n	8004aa8 <_fflush_r+0xc>
 8004ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ae6:	f7fe fee5 	bl	80038b4 <__retarget_lock_release_recursive>
 8004aea:	e7dd      	b.n	8004aa8 <_fflush_r+0xc>

08004aec <__malloc_lock>:
 8004aec:	4801      	ldr	r0, [pc, #4]	@ (8004af4 <__malloc_lock+0x8>)
 8004aee:	f7fe bee0 	b.w	80038b2 <__retarget_lock_acquire_recursive>
 8004af2:	bf00      	nop
 8004af4:	2000038c 	.word	0x2000038c

08004af8 <__malloc_unlock>:
 8004af8:	4801      	ldr	r0, [pc, #4]	@ (8004b00 <__malloc_unlock+0x8>)
 8004afa:	f7fe bedb 	b.w	80038b4 <__retarget_lock_release_recursive>
 8004afe:	bf00      	nop
 8004b00:	2000038c 	.word	0x2000038c

08004b04 <_Balloc>:
 8004b04:	b570      	push	{r4, r5, r6, lr}
 8004b06:	69c6      	ldr	r6, [r0, #28]
 8004b08:	4604      	mov	r4, r0
 8004b0a:	460d      	mov	r5, r1
 8004b0c:	b976      	cbnz	r6, 8004b2c <_Balloc+0x28>
 8004b0e:	2010      	movs	r0, #16
 8004b10:	f7ff fe9a 	bl	8004848 <malloc>
 8004b14:	4602      	mov	r2, r0
 8004b16:	61e0      	str	r0, [r4, #28]
 8004b18:	b920      	cbnz	r0, 8004b24 <_Balloc+0x20>
 8004b1a:	216b      	movs	r1, #107	@ 0x6b
 8004b1c:	4b17      	ldr	r3, [pc, #92]	@ (8004b7c <_Balloc+0x78>)
 8004b1e:	4818      	ldr	r0, [pc, #96]	@ (8004b80 <_Balloc+0x7c>)
 8004b20:	f000 fc5a 	bl	80053d8 <__assert_func>
 8004b24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b28:	6006      	str	r6, [r0, #0]
 8004b2a:	60c6      	str	r6, [r0, #12]
 8004b2c:	69e6      	ldr	r6, [r4, #28]
 8004b2e:	68f3      	ldr	r3, [r6, #12]
 8004b30:	b183      	cbz	r3, 8004b54 <_Balloc+0x50>
 8004b32:	69e3      	ldr	r3, [r4, #28]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004b3a:	b9b8      	cbnz	r0, 8004b6c <_Balloc+0x68>
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	fa01 f605 	lsl.w	r6, r1, r5
 8004b42:	1d72      	adds	r2, r6, #5
 8004b44:	4620      	mov	r0, r4
 8004b46:	0092      	lsls	r2, r2, #2
 8004b48:	f000 fc64 	bl	8005414 <_calloc_r>
 8004b4c:	b160      	cbz	r0, 8004b68 <_Balloc+0x64>
 8004b4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004b52:	e00e      	b.n	8004b72 <_Balloc+0x6e>
 8004b54:	2221      	movs	r2, #33	@ 0x21
 8004b56:	2104      	movs	r1, #4
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f000 fc5b 	bl	8005414 <_calloc_r>
 8004b5e:	69e3      	ldr	r3, [r4, #28]
 8004b60:	60f0      	str	r0, [r6, #12]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1e4      	bne.n	8004b32 <_Balloc+0x2e>
 8004b68:	2000      	movs	r0, #0
 8004b6a:	bd70      	pop	{r4, r5, r6, pc}
 8004b6c:	6802      	ldr	r2, [r0, #0]
 8004b6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004b72:	2300      	movs	r3, #0
 8004b74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004b78:	e7f7      	b.n	8004b6a <_Balloc+0x66>
 8004b7a:	bf00      	nop
 8004b7c:	08005bc1 	.word	0x08005bc1
 8004b80:	08005c52 	.word	0x08005c52

08004b84 <_Bfree>:
 8004b84:	b570      	push	{r4, r5, r6, lr}
 8004b86:	69c6      	ldr	r6, [r0, #28]
 8004b88:	4605      	mov	r5, r0
 8004b8a:	460c      	mov	r4, r1
 8004b8c:	b976      	cbnz	r6, 8004bac <_Bfree+0x28>
 8004b8e:	2010      	movs	r0, #16
 8004b90:	f7ff fe5a 	bl	8004848 <malloc>
 8004b94:	4602      	mov	r2, r0
 8004b96:	61e8      	str	r0, [r5, #28]
 8004b98:	b920      	cbnz	r0, 8004ba4 <_Bfree+0x20>
 8004b9a:	218f      	movs	r1, #143	@ 0x8f
 8004b9c:	4b08      	ldr	r3, [pc, #32]	@ (8004bc0 <_Bfree+0x3c>)
 8004b9e:	4809      	ldr	r0, [pc, #36]	@ (8004bc4 <_Bfree+0x40>)
 8004ba0:	f000 fc1a 	bl	80053d8 <__assert_func>
 8004ba4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ba8:	6006      	str	r6, [r0, #0]
 8004baa:	60c6      	str	r6, [r0, #12]
 8004bac:	b13c      	cbz	r4, 8004bbe <_Bfree+0x3a>
 8004bae:	69eb      	ldr	r3, [r5, #28]
 8004bb0:	6862      	ldr	r2, [r4, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004bb8:	6021      	str	r1, [r4, #0]
 8004bba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004bbe:	bd70      	pop	{r4, r5, r6, pc}
 8004bc0:	08005bc1 	.word	0x08005bc1
 8004bc4:	08005c52 	.word	0x08005c52

08004bc8 <__multadd>:
 8004bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bcc:	4607      	mov	r7, r0
 8004bce:	460c      	mov	r4, r1
 8004bd0:	461e      	mov	r6, r3
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	690d      	ldr	r5, [r1, #16]
 8004bd6:	f101 0c14 	add.w	ip, r1, #20
 8004bda:	f8dc 3000 	ldr.w	r3, [ip]
 8004bde:	3001      	adds	r0, #1
 8004be0:	b299      	uxth	r1, r3
 8004be2:	fb02 6101 	mla	r1, r2, r1, r6
 8004be6:	0c1e      	lsrs	r6, r3, #16
 8004be8:	0c0b      	lsrs	r3, r1, #16
 8004bea:	fb02 3306 	mla	r3, r2, r6, r3
 8004bee:	b289      	uxth	r1, r1
 8004bf0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004bf4:	4285      	cmp	r5, r0
 8004bf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004bfa:	f84c 1b04 	str.w	r1, [ip], #4
 8004bfe:	dcec      	bgt.n	8004bda <__multadd+0x12>
 8004c00:	b30e      	cbz	r6, 8004c46 <__multadd+0x7e>
 8004c02:	68a3      	ldr	r3, [r4, #8]
 8004c04:	42ab      	cmp	r3, r5
 8004c06:	dc19      	bgt.n	8004c3c <__multadd+0x74>
 8004c08:	6861      	ldr	r1, [r4, #4]
 8004c0a:	4638      	mov	r0, r7
 8004c0c:	3101      	adds	r1, #1
 8004c0e:	f7ff ff79 	bl	8004b04 <_Balloc>
 8004c12:	4680      	mov	r8, r0
 8004c14:	b928      	cbnz	r0, 8004c22 <__multadd+0x5a>
 8004c16:	4602      	mov	r2, r0
 8004c18:	21ba      	movs	r1, #186	@ 0xba
 8004c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c4c <__multadd+0x84>)
 8004c1c:	480c      	ldr	r0, [pc, #48]	@ (8004c50 <__multadd+0x88>)
 8004c1e:	f000 fbdb 	bl	80053d8 <__assert_func>
 8004c22:	6922      	ldr	r2, [r4, #16]
 8004c24:	f104 010c 	add.w	r1, r4, #12
 8004c28:	3202      	adds	r2, #2
 8004c2a:	0092      	lsls	r2, r2, #2
 8004c2c:	300c      	adds	r0, #12
 8004c2e:	f000 fbc5 	bl	80053bc <memcpy>
 8004c32:	4621      	mov	r1, r4
 8004c34:	4638      	mov	r0, r7
 8004c36:	f7ff ffa5 	bl	8004b84 <_Bfree>
 8004c3a:	4644      	mov	r4, r8
 8004c3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004c40:	3501      	adds	r5, #1
 8004c42:	615e      	str	r6, [r3, #20]
 8004c44:	6125      	str	r5, [r4, #16]
 8004c46:	4620      	mov	r0, r4
 8004c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c4c:	08005c30 	.word	0x08005c30
 8004c50:	08005c52 	.word	0x08005c52

08004c54 <__hi0bits>:
 8004c54:	4603      	mov	r3, r0
 8004c56:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004c5a:	bf3a      	itte	cc
 8004c5c:	0403      	lslcc	r3, r0, #16
 8004c5e:	2010      	movcc	r0, #16
 8004c60:	2000      	movcs	r0, #0
 8004c62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c66:	bf3c      	itt	cc
 8004c68:	021b      	lslcc	r3, r3, #8
 8004c6a:	3008      	addcc	r0, #8
 8004c6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c70:	bf3c      	itt	cc
 8004c72:	011b      	lslcc	r3, r3, #4
 8004c74:	3004      	addcc	r0, #4
 8004c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c7a:	bf3c      	itt	cc
 8004c7c:	009b      	lslcc	r3, r3, #2
 8004c7e:	3002      	addcc	r0, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	db05      	blt.n	8004c90 <__hi0bits+0x3c>
 8004c84:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004c88:	f100 0001 	add.w	r0, r0, #1
 8004c8c:	bf08      	it	eq
 8004c8e:	2020      	moveq	r0, #32
 8004c90:	4770      	bx	lr

08004c92 <__lo0bits>:
 8004c92:	6803      	ldr	r3, [r0, #0]
 8004c94:	4602      	mov	r2, r0
 8004c96:	f013 0007 	ands.w	r0, r3, #7
 8004c9a:	d00b      	beq.n	8004cb4 <__lo0bits+0x22>
 8004c9c:	07d9      	lsls	r1, r3, #31
 8004c9e:	d421      	bmi.n	8004ce4 <__lo0bits+0x52>
 8004ca0:	0798      	lsls	r0, r3, #30
 8004ca2:	bf49      	itett	mi
 8004ca4:	085b      	lsrmi	r3, r3, #1
 8004ca6:	089b      	lsrpl	r3, r3, #2
 8004ca8:	2001      	movmi	r0, #1
 8004caa:	6013      	strmi	r3, [r2, #0]
 8004cac:	bf5c      	itt	pl
 8004cae:	2002      	movpl	r0, #2
 8004cb0:	6013      	strpl	r3, [r2, #0]
 8004cb2:	4770      	bx	lr
 8004cb4:	b299      	uxth	r1, r3
 8004cb6:	b909      	cbnz	r1, 8004cbc <__lo0bits+0x2a>
 8004cb8:	2010      	movs	r0, #16
 8004cba:	0c1b      	lsrs	r3, r3, #16
 8004cbc:	b2d9      	uxtb	r1, r3
 8004cbe:	b909      	cbnz	r1, 8004cc4 <__lo0bits+0x32>
 8004cc0:	3008      	adds	r0, #8
 8004cc2:	0a1b      	lsrs	r3, r3, #8
 8004cc4:	0719      	lsls	r1, r3, #28
 8004cc6:	bf04      	itt	eq
 8004cc8:	091b      	lsreq	r3, r3, #4
 8004cca:	3004      	addeq	r0, #4
 8004ccc:	0799      	lsls	r1, r3, #30
 8004cce:	bf04      	itt	eq
 8004cd0:	089b      	lsreq	r3, r3, #2
 8004cd2:	3002      	addeq	r0, #2
 8004cd4:	07d9      	lsls	r1, r3, #31
 8004cd6:	d403      	bmi.n	8004ce0 <__lo0bits+0x4e>
 8004cd8:	085b      	lsrs	r3, r3, #1
 8004cda:	f100 0001 	add.w	r0, r0, #1
 8004cde:	d003      	beq.n	8004ce8 <__lo0bits+0x56>
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	4770      	bx	lr
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	4770      	bx	lr
 8004ce8:	2020      	movs	r0, #32
 8004cea:	4770      	bx	lr

08004cec <__i2b>:
 8004cec:	b510      	push	{r4, lr}
 8004cee:	460c      	mov	r4, r1
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	f7ff ff07 	bl	8004b04 <_Balloc>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	b928      	cbnz	r0, 8004d06 <__i2b+0x1a>
 8004cfa:	f240 1145 	movw	r1, #325	@ 0x145
 8004cfe:	4b04      	ldr	r3, [pc, #16]	@ (8004d10 <__i2b+0x24>)
 8004d00:	4804      	ldr	r0, [pc, #16]	@ (8004d14 <__i2b+0x28>)
 8004d02:	f000 fb69 	bl	80053d8 <__assert_func>
 8004d06:	2301      	movs	r3, #1
 8004d08:	6144      	str	r4, [r0, #20]
 8004d0a:	6103      	str	r3, [r0, #16]
 8004d0c:	bd10      	pop	{r4, pc}
 8004d0e:	bf00      	nop
 8004d10:	08005c30 	.word	0x08005c30
 8004d14:	08005c52 	.word	0x08005c52

08004d18 <__multiply>:
 8004d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d1c:	4617      	mov	r7, r2
 8004d1e:	690a      	ldr	r2, [r1, #16]
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	4689      	mov	r9, r1
 8004d24:	429a      	cmp	r2, r3
 8004d26:	bfa2      	ittt	ge
 8004d28:	463b      	movge	r3, r7
 8004d2a:	460f      	movge	r7, r1
 8004d2c:	4699      	movge	r9, r3
 8004d2e:	693d      	ldr	r5, [r7, #16]
 8004d30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	eb05 060a 	add.w	r6, r5, sl
 8004d3c:	42b3      	cmp	r3, r6
 8004d3e:	b085      	sub	sp, #20
 8004d40:	bfb8      	it	lt
 8004d42:	3101      	addlt	r1, #1
 8004d44:	f7ff fede 	bl	8004b04 <_Balloc>
 8004d48:	b930      	cbnz	r0, 8004d58 <__multiply+0x40>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004d50:	4b40      	ldr	r3, [pc, #256]	@ (8004e54 <__multiply+0x13c>)
 8004d52:	4841      	ldr	r0, [pc, #260]	@ (8004e58 <__multiply+0x140>)
 8004d54:	f000 fb40 	bl	80053d8 <__assert_func>
 8004d58:	f100 0414 	add.w	r4, r0, #20
 8004d5c:	4623      	mov	r3, r4
 8004d5e:	2200      	movs	r2, #0
 8004d60:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8004d64:	4573      	cmp	r3, lr
 8004d66:	d320      	bcc.n	8004daa <__multiply+0x92>
 8004d68:	f107 0814 	add.w	r8, r7, #20
 8004d6c:	f109 0114 	add.w	r1, r9, #20
 8004d70:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004d74:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004d78:	9302      	str	r3, [sp, #8]
 8004d7a:	1beb      	subs	r3, r5, r7
 8004d7c:	3b15      	subs	r3, #21
 8004d7e:	f023 0303 	bic.w	r3, r3, #3
 8004d82:	3304      	adds	r3, #4
 8004d84:	3715      	adds	r7, #21
 8004d86:	42bd      	cmp	r5, r7
 8004d88:	bf38      	it	cc
 8004d8a:	2304      	movcc	r3, #4
 8004d8c:	9301      	str	r3, [sp, #4]
 8004d8e:	9b02      	ldr	r3, [sp, #8]
 8004d90:	9103      	str	r1, [sp, #12]
 8004d92:	428b      	cmp	r3, r1
 8004d94:	d80c      	bhi.n	8004db0 <__multiply+0x98>
 8004d96:	2e00      	cmp	r6, #0
 8004d98:	dd03      	ble.n	8004da2 <__multiply+0x8a>
 8004d9a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d055      	beq.n	8004e4e <__multiply+0x136>
 8004da2:	6106      	str	r6, [r0, #16]
 8004da4:	b005      	add	sp, #20
 8004da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004daa:	f843 2b04 	str.w	r2, [r3], #4
 8004dae:	e7d9      	b.n	8004d64 <__multiply+0x4c>
 8004db0:	f8b1 a000 	ldrh.w	sl, [r1]
 8004db4:	f1ba 0f00 	cmp.w	sl, #0
 8004db8:	d01f      	beq.n	8004dfa <__multiply+0xe2>
 8004dba:	46c4      	mov	ip, r8
 8004dbc:	46a1      	mov	r9, r4
 8004dbe:	2700      	movs	r7, #0
 8004dc0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004dc4:	f8d9 3000 	ldr.w	r3, [r9]
 8004dc8:	fa1f fb82 	uxth.w	fp, r2
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	fb0a 330b 	mla	r3, sl, fp, r3
 8004dd2:	443b      	add	r3, r7
 8004dd4:	f8d9 7000 	ldr.w	r7, [r9]
 8004dd8:	0c12      	lsrs	r2, r2, #16
 8004dda:	0c3f      	lsrs	r7, r7, #16
 8004ddc:	fb0a 7202 	mla	r2, sl, r2, r7
 8004de0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dea:	4565      	cmp	r5, ip
 8004dec:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004df0:	f849 3b04 	str.w	r3, [r9], #4
 8004df4:	d8e4      	bhi.n	8004dc0 <__multiply+0xa8>
 8004df6:	9b01      	ldr	r3, [sp, #4]
 8004df8:	50e7      	str	r7, [r4, r3]
 8004dfa:	9b03      	ldr	r3, [sp, #12]
 8004dfc:	3104      	adds	r1, #4
 8004dfe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004e02:	f1b9 0f00 	cmp.w	r9, #0
 8004e06:	d020      	beq.n	8004e4a <__multiply+0x132>
 8004e08:	4647      	mov	r7, r8
 8004e0a:	46a4      	mov	ip, r4
 8004e0c:	f04f 0a00 	mov.w	sl, #0
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	f8b7 b000 	ldrh.w	fp, [r7]
 8004e16:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	fb09 220b 	mla	r2, r9, fp, r2
 8004e20:	4452      	add	r2, sl
 8004e22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e26:	f84c 3b04 	str.w	r3, [ip], #4
 8004e2a:	f857 3b04 	ldr.w	r3, [r7], #4
 8004e2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e32:	f8bc 3000 	ldrh.w	r3, [ip]
 8004e36:	42bd      	cmp	r5, r7
 8004e38:	fb09 330a 	mla	r3, r9, sl, r3
 8004e3c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004e40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e44:	d8e5      	bhi.n	8004e12 <__multiply+0xfa>
 8004e46:	9a01      	ldr	r2, [sp, #4]
 8004e48:	50a3      	str	r3, [r4, r2]
 8004e4a:	3404      	adds	r4, #4
 8004e4c:	e79f      	b.n	8004d8e <__multiply+0x76>
 8004e4e:	3e01      	subs	r6, #1
 8004e50:	e7a1      	b.n	8004d96 <__multiply+0x7e>
 8004e52:	bf00      	nop
 8004e54:	08005c30 	.word	0x08005c30
 8004e58:	08005c52 	.word	0x08005c52

08004e5c <__pow5mult>:
 8004e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e60:	4615      	mov	r5, r2
 8004e62:	f012 0203 	ands.w	r2, r2, #3
 8004e66:	4607      	mov	r7, r0
 8004e68:	460e      	mov	r6, r1
 8004e6a:	d007      	beq.n	8004e7c <__pow5mult+0x20>
 8004e6c:	4c25      	ldr	r4, [pc, #148]	@ (8004f04 <__pow5mult+0xa8>)
 8004e6e:	3a01      	subs	r2, #1
 8004e70:	2300      	movs	r3, #0
 8004e72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004e76:	f7ff fea7 	bl	8004bc8 <__multadd>
 8004e7a:	4606      	mov	r6, r0
 8004e7c:	10ad      	asrs	r5, r5, #2
 8004e7e:	d03d      	beq.n	8004efc <__pow5mult+0xa0>
 8004e80:	69fc      	ldr	r4, [r7, #28]
 8004e82:	b97c      	cbnz	r4, 8004ea4 <__pow5mult+0x48>
 8004e84:	2010      	movs	r0, #16
 8004e86:	f7ff fcdf 	bl	8004848 <malloc>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	61f8      	str	r0, [r7, #28]
 8004e8e:	b928      	cbnz	r0, 8004e9c <__pow5mult+0x40>
 8004e90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004e94:	4b1c      	ldr	r3, [pc, #112]	@ (8004f08 <__pow5mult+0xac>)
 8004e96:	481d      	ldr	r0, [pc, #116]	@ (8004f0c <__pow5mult+0xb0>)
 8004e98:	f000 fa9e 	bl	80053d8 <__assert_func>
 8004e9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ea0:	6004      	str	r4, [r0, #0]
 8004ea2:	60c4      	str	r4, [r0, #12]
 8004ea4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004ea8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004eac:	b94c      	cbnz	r4, 8004ec2 <__pow5mult+0x66>
 8004eae:	f240 2171 	movw	r1, #625	@ 0x271
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	f7ff ff1a 	bl	8004cec <__i2b>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	4604      	mov	r4, r0
 8004ebc:	f8c8 0008 	str.w	r0, [r8, #8]
 8004ec0:	6003      	str	r3, [r0, #0]
 8004ec2:	f04f 0900 	mov.w	r9, #0
 8004ec6:	07eb      	lsls	r3, r5, #31
 8004ec8:	d50a      	bpl.n	8004ee0 <__pow5mult+0x84>
 8004eca:	4631      	mov	r1, r6
 8004ecc:	4622      	mov	r2, r4
 8004ece:	4638      	mov	r0, r7
 8004ed0:	f7ff ff22 	bl	8004d18 <__multiply>
 8004ed4:	4680      	mov	r8, r0
 8004ed6:	4631      	mov	r1, r6
 8004ed8:	4638      	mov	r0, r7
 8004eda:	f7ff fe53 	bl	8004b84 <_Bfree>
 8004ede:	4646      	mov	r6, r8
 8004ee0:	106d      	asrs	r5, r5, #1
 8004ee2:	d00b      	beq.n	8004efc <__pow5mult+0xa0>
 8004ee4:	6820      	ldr	r0, [r4, #0]
 8004ee6:	b938      	cbnz	r0, 8004ef8 <__pow5mult+0x9c>
 8004ee8:	4622      	mov	r2, r4
 8004eea:	4621      	mov	r1, r4
 8004eec:	4638      	mov	r0, r7
 8004eee:	f7ff ff13 	bl	8004d18 <__multiply>
 8004ef2:	6020      	str	r0, [r4, #0]
 8004ef4:	f8c0 9000 	str.w	r9, [r0]
 8004ef8:	4604      	mov	r4, r0
 8004efa:	e7e4      	b.n	8004ec6 <__pow5mult+0x6a>
 8004efc:	4630      	mov	r0, r6
 8004efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f02:	bf00      	nop
 8004f04:	08005cf4 	.word	0x08005cf4
 8004f08:	08005bc1 	.word	0x08005bc1
 8004f0c:	08005c52 	.word	0x08005c52

08004f10 <__lshift>:
 8004f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f14:	460c      	mov	r4, r1
 8004f16:	4607      	mov	r7, r0
 8004f18:	4691      	mov	r9, r2
 8004f1a:	6923      	ldr	r3, [r4, #16]
 8004f1c:	6849      	ldr	r1, [r1, #4]
 8004f1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004f22:	68a3      	ldr	r3, [r4, #8]
 8004f24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004f28:	f108 0601 	add.w	r6, r8, #1
 8004f2c:	42b3      	cmp	r3, r6
 8004f2e:	db0b      	blt.n	8004f48 <__lshift+0x38>
 8004f30:	4638      	mov	r0, r7
 8004f32:	f7ff fde7 	bl	8004b04 <_Balloc>
 8004f36:	4605      	mov	r5, r0
 8004f38:	b948      	cbnz	r0, 8004f4e <__lshift+0x3e>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004f40:	4b27      	ldr	r3, [pc, #156]	@ (8004fe0 <__lshift+0xd0>)
 8004f42:	4828      	ldr	r0, [pc, #160]	@ (8004fe4 <__lshift+0xd4>)
 8004f44:	f000 fa48 	bl	80053d8 <__assert_func>
 8004f48:	3101      	adds	r1, #1
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	e7ee      	b.n	8004f2c <__lshift+0x1c>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f100 0114 	add.w	r1, r0, #20
 8004f54:	f100 0210 	add.w	r2, r0, #16
 8004f58:	4618      	mov	r0, r3
 8004f5a:	4553      	cmp	r3, sl
 8004f5c:	db33      	blt.n	8004fc6 <__lshift+0xb6>
 8004f5e:	6920      	ldr	r0, [r4, #16]
 8004f60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004f64:	f104 0314 	add.w	r3, r4, #20
 8004f68:	f019 091f 	ands.w	r9, r9, #31
 8004f6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004f70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004f74:	d02b      	beq.n	8004fce <__lshift+0xbe>
 8004f76:	468a      	mov	sl, r1
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f1c9 0e20 	rsb	lr, r9, #32
 8004f7e:	6818      	ldr	r0, [r3, #0]
 8004f80:	fa00 f009 	lsl.w	r0, r0, r9
 8004f84:	4310      	orrs	r0, r2
 8004f86:	f84a 0b04 	str.w	r0, [sl], #4
 8004f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f8e:	459c      	cmp	ip, r3
 8004f90:	fa22 f20e 	lsr.w	r2, r2, lr
 8004f94:	d8f3      	bhi.n	8004f7e <__lshift+0x6e>
 8004f96:	ebac 0304 	sub.w	r3, ip, r4
 8004f9a:	3b15      	subs	r3, #21
 8004f9c:	f023 0303 	bic.w	r3, r3, #3
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	f104 0015 	add.w	r0, r4, #21
 8004fa6:	4560      	cmp	r0, ip
 8004fa8:	bf88      	it	hi
 8004faa:	2304      	movhi	r3, #4
 8004fac:	50ca      	str	r2, [r1, r3]
 8004fae:	b10a      	cbz	r2, 8004fb4 <__lshift+0xa4>
 8004fb0:	f108 0602 	add.w	r6, r8, #2
 8004fb4:	3e01      	subs	r6, #1
 8004fb6:	4638      	mov	r0, r7
 8004fb8:	4621      	mov	r1, r4
 8004fba:	612e      	str	r6, [r5, #16]
 8004fbc:	f7ff fde2 	bl	8004b84 <_Bfree>
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8004fca:	3301      	adds	r3, #1
 8004fcc:	e7c5      	b.n	8004f5a <__lshift+0x4a>
 8004fce:	3904      	subs	r1, #4
 8004fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fd4:	459c      	cmp	ip, r3
 8004fd6:	f841 2f04 	str.w	r2, [r1, #4]!
 8004fda:	d8f9      	bhi.n	8004fd0 <__lshift+0xc0>
 8004fdc:	e7ea      	b.n	8004fb4 <__lshift+0xa4>
 8004fde:	bf00      	nop
 8004fe0:	08005c30 	.word	0x08005c30
 8004fe4:	08005c52 	.word	0x08005c52

08004fe8 <__mcmp>:
 8004fe8:	4603      	mov	r3, r0
 8004fea:	690a      	ldr	r2, [r1, #16]
 8004fec:	6900      	ldr	r0, [r0, #16]
 8004fee:	b530      	push	{r4, r5, lr}
 8004ff0:	1a80      	subs	r0, r0, r2
 8004ff2:	d10e      	bne.n	8005012 <__mcmp+0x2a>
 8004ff4:	3314      	adds	r3, #20
 8004ff6:	3114      	adds	r1, #20
 8004ff8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004ffc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005000:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005004:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005008:	4295      	cmp	r5, r2
 800500a:	d003      	beq.n	8005014 <__mcmp+0x2c>
 800500c:	d205      	bcs.n	800501a <__mcmp+0x32>
 800500e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005012:	bd30      	pop	{r4, r5, pc}
 8005014:	42a3      	cmp	r3, r4
 8005016:	d3f3      	bcc.n	8005000 <__mcmp+0x18>
 8005018:	e7fb      	b.n	8005012 <__mcmp+0x2a>
 800501a:	2001      	movs	r0, #1
 800501c:	e7f9      	b.n	8005012 <__mcmp+0x2a>
	...

08005020 <__mdiff>:
 8005020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005024:	4689      	mov	r9, r1
 8005026:	4606      	mov	r6, r0
 8005028:	4611      	mov	r1, r2
 800502a:	4648      	mov	r0, r9
 800502c:	4614      	mov	r4, r2
 800502e:	f7ff ffdb 	bl	8004fe8 <__mcmp>
 8005032:	1e05      	subs	r5, r0, #0
 8005034:	d112      	bne.n	800505c <__mdiff+0x3c>
 8005036:	4629      	mov	r1, r5
 8005038:	4630      	mov	r0, r6
 800503a:	f7ff fd63 	bl	8004b04 <_Balloc>
 800503e:	4602      	mov	r2, r0
 8005040:	b928      	cbnz	r0, 800504e <__mdiff+0x2e>
 8005042:	f240 2137 	movw	r1, #567	@ 0x237
 8005046:	4b3e      	ldr	r3, [pc, #248]	@ (8005140 <__mdiff+0x120>)
 8005048:	483e      	ldr	r0, [pc, #248]	@ (8005144 <__mdiff+0x124>)
 800504a:	f000 f9c5 	bl	80053d8 <__assert_func>
 800504e:	2301      	movs	r3, #1
 8005050:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005054:	4610      	mov	r0, r2
 8005056:	b003      	add	sp, #12
 8005058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800505c:	bfbc      	itt	lt
 800505e:	464b      	movlt	r3, r9
 8005060:	46a1      	movlt	r9, r4
 8005062:	4630      	mov	r0, r6
 8005064:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005068:	bfba      	itte	lt
 800506a:	461c      	movlt	r4, r3
 800506c:	2501      	movlt	r5, #1
 800506e:	2500      	movge	r5, #0
 8005070:	f7ff fd48 	bl	8004b04 <_Balloc>
 8005074:	4602      	mov	r2, r0
 8005076:	b918      	cbnz	r0, 8005080 <__mdiff+0x60>
 8005078:	f240 2145 	movw	r1, #581	@ 0x245
 800507c:	4b30      	ldr	r3, [pc, #192]	@ (8005140 <__mdiff+0x120>)
 800507e:	e7e3      	b.n	8005048 <__mdiff+0x28>
 8005080:	f100 0b14 	add.w	fp, r0, #20
 8005084:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005088:	f109 0310 	add.w	r3, r9, #16
 800508c:	60c5      	str	r5, [r0, #12]
 800508e:	f04f 0c00 	mov.w	ip, #0
 8005092:	f109 0514 	add.w	r5, r9, #20
 8005096:	46d9      	mov	r9, fp
 8005098:	6926      	ldr	r6, [r4, #16]
 800509a:	f104 0e14 	add.w	lr, r4, #20
 800509e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80050a2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80050a6:	9301      	str	r3, [sp, #4]
 80050a8:	9b01      	ldr	r3, [sp, #4]
 80050aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80050ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 80050b2:	b281      	uxth	r1, r0
 80050b4:	9301      	str	r3, [sp, #4]
 80050b6:	fa1f f38a 	uxth.w	r3, sl
 80050ba:	1a5b      	subs	r3, r3, r1
 80050bc:	0c00      	lsrs	r0, r0, #16
 80050be:	4463      	add	r3, ip
 80050c0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80050c4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80050ce:	4576      	cmp	r6, lr
 80050d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80050d4:	f849 3b04 	str.w	r3, [r9], #4
 80050d8:	d8e6      	bhi.n	80050a8 <__mdiff+0x88>
 80050da:	1b33      	subs	r3, r6, r4
 80050dc:	3b15      	subs	r3, #21
 80050de:	f023 0303 	bic.w	r3, r3, #3
 80050e2:	3415      	adds	r4, #21
 80050e4:	3304      	adds	r3, #4
 80050e6:	42a6      	cmp	r6, r4
 80050e8:	bf38      	it	cc
 80050ea:	2304      	movcc	r3, #4
 80050ec:	441d      	add	r5, r3
 80050ee:	445b      	add	r3, fp
 80050f0:	461e      	mov	r6, r3
 80050f2:	462c      	mov	r4, r5
 80050f4:	4544      	cmp	r4, r8
 80050f6:	d30e      	bcc.n	8005116 <__mdiff+0xf6>
 80050f8:	f108 0103 	add.w	r1, r8, #3
 80050fc:	1b49      	subs	r1, r1, r5
 80050fe:	f021 0103 	bic.w	r1, r1, #3
 8005102:	3d03      	subs	r5, #3
 8005104:	45a8      	cmp	r8, r5
 8005106:	bf38      	it	cc
 8005108:	2100      	movcc	r1, #0
 800510a:	440b      	add	r3, r1
 800510c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005110:	b199      	cbz	r1, 800513a <__mdiff+0x11a>
 8005112:	6117      	str	r7, [r2, #16]
 8005114:	e79e      	b.n	8005054 <__mdiff+0x34>
 8005116:	46e6      	mov	lr, ip
 8005118:	f854 1b04 	ldr.w	r1, [r4], #4
 800511c:	fa1f fc81 	uxth.w	ip, r1
 8005120:	44f4      	add	ip, lr
 8005122:	0c08      	lsrs	r0, r1, #16
 8005124:	4471      	add	r1, lr
 8005126:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800512a:	b289      	uxth	r1, r1
 800512c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005130:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005134:	f846 1b04 	str.w	r1, [r6], #4
 8005138:	e7dc      	b.n	80050f4 <__mdiff+0xd4>
 800513a:	3f01      	subs	r7, #1
 800513c:	e7e6      	b.n	800510c <__mdiff+0xec>
 800513e:	bf00      	nop
 8005140:	08005c30 	.word	0x08005c30
 8005144:	08005c52 	.word	0x08005c52

08005148 <__d2b>:
 8005148:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800514c:	2101      	movs	r1, #1
 800514e:	4690      	mov	r8, r2
 8005150:	4699      	mov	r9, r3
 8005152:	9e08      	ldr	r6, [sp, #32]
 8005154:	f7ff fcd6 	bl	8004b04 <_Balloc>
 8005158:	4604      	mov	r4, r0
 800515a:	b930      	cbnz	r0, 800516a <__d2b+0x22>
 800515c:	4602      	mov	r2, r0
 800515e:	f240 310f 	movw	r1, #783	@ 0x30f
 8005162:	4b23      	ldr	r3, [pc, #140]	@ (80051f0 <__d2b+0xa8>)
 8005164:	4823      	ldr	r0, [pc, #140]	@ (80051f4 <__d2b+0xac>)
 8005166:	f000 f937 	bl	80053d8 <__assert_func>
 800516a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800516e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005172:	b10d      	cbz	r5, 8005178 <__d2b+0x30>
 8005174:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005178:	9301      	str	r3, [sp, #4]
 800517a:	f1b8 0300 	subs.w	r3, r8, #0
 800517e:	d024      	beq.n	80051ca <__d2b+0x82>
 8005180:	4668      	mov	r0, sp
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	f7ff fd85 	bl	8004c92 <__lo0bits>
 8005188:	e9dd 1200 	ldrd	r1, r2, [sp]
 800518c:	b1d8      	cbz	r0, 80051c6 <__d2b+0x7e>
 800518e:	f1c0 0320 	rsb	r3, r0, #32
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	430b      	orrs	r3, r1
 8005198:	40c2      	lsrs	r2, r0
 800519a:	6163      	str	r3, [r4, #20]
 800519c:	9201      	str	r2, [sp, #4]
 800519e:	9b01      	ldr	r3, [sp, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	bf0c      	ite	eq
 80051a4:	2201      	moveq	r2, #1
 80051a6:	2202      	movne	r2, #2
 80051a8:	61a3      	str	r3, [r4, #24]
 80051aa:	6122      	str	r2, [r4, #16]
 80051ac:	b1ad      	cbz	r5, 80051da <__d2b+0x92>
 80051ae:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80051b2:	4405      	add	r5, r0
 80051b4:	6035      	str	r5, [r6, #0]
 80051b6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80051ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051bc:	6018      	str	r0, [r3, #0]
 80051be:	4620      	mov	r0, r4
 80051c0:	b002      	add	sp, #8
 80051c2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80051c6:	6161      	str	r1, [r4, #20]
 80051c8:	e7e9      	b.n	800519e <__d2b+0x56>
 80051ca:	a801      	add	r0, sp, #4
 80051cc:	f7ff fd61 	bl	8004c92 <__lo0bits>
 80051d0:	9b01      	ldr	r3, [sp, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	6163      	str	r3, [r4, #20]
 80051d6:	3020      	adds	r0, #32
 80051d8:	e7e7      	b.n	80051aa <__d2b+0x62>
 80051da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80051de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80051e2:	6030      	str	r0, [r6, #0]
 80051e4:	6918      	ldr	r0, [r3, #16]
 80051e6:	f7ff fd35 	bl	8004c54 <__hi0bits>
 80051ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80051ee:	e7e4      	b.n	80051ba <__d2b+0x72>
 80051f0:	08005c30 	.word	0x08005c30
 80051f4:	08005c52 	.word	0x08005c52

080051f8 <__sread>:
 80051f8:	b510      	push	{r4, lr}
 80051fa:	460c      	mov	r4, r1
 80051fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005200:	f000 f898 	bl	8005334 <_read_r>
 8005204:	2800      	cmp	r0, #0
 8005206:	bfab      	itete	ge
 8005208:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800520a:	89a3      	ldrhlt	r3, [r4, #12]
 800520c:	181b      	addge	r3, r3, r0
 800520e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005212:	bfac      	ite	ge
 8005214:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005216:	81a3      	strhlt	r3, [r4, #12]
 8005218:	bd10      	pop	{r4, pc}

0800521a <__swrite>:
 800521a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800521e:	461f      	mov	r7, r3
 8005220:	898b      	ldrh	r3, [r1, #12]
 8005222:	4605      	mov	r5, r0
 8005224:	05db      	lsls	r3, r3, #23
 8005226:	460c      	mov	r4, r1
 8005228:	4616      	mov	r6, r2
 800522a:	d505      	bpl.n	8005238 <__swrite+0x1e>
 800522c:	2302      	movs	r3, #2
 800522e:	2200      	movs	r2, #0
 8005230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005234:	f000 f86c 	bl	8005310 <_lseek_r>
 8005238:	89a3      	ldrh	r3, [r4, #12]
 800523a:	4632      	mov	r2, r6
 800523c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005240:	81a3      	strh	r3, [r4, #12]
 8005242:	4628      	mov	r0, r5
 8005244:	463b      	mov	r3, r7
 8005246:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800524a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800524e:	f000 b893 	b.w	8005378 <_write_r>

08005252 <__sseek>:
 8005252:	b510      	push	{r4, lr}
 8005254:	460c      	mov	r4, r1
 8005256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800525a:	f000 f859 	bl	8005310 <_lseek_r>
 800525e:	1c43      	adds	r3, r0, #1
 8005260:	89a3      	ldrh	r3, [r4, #12]
 8005262:	bf15      	itete	ne
 8005264:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005266:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800526a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800526e:	81a3      	strheq	r3, [r4, #12]
 8005270:	bf18      	it	ne
 8005272:	81a3      	strhne	r3, [r4, #12]
 8005274:	bd10      	pop	{r4, pc}

08005276 <__sclose>:
 8005276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800527a:	f000 b88f 	b.w	800539c <_close_r>

0800527e <_realloc_r>:
 800527e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005282:	4607      	mov	r7, r0
 8005284:	4614      	mov	r4, r2
 8005286:	460d      	mov	r5, r1
 8005288:	b921      	cbnz	r1, 8005294 <_realloc_r+0x16>
 800528a:	4611      	mov	r1, r2
 800528c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005290:	f7ff bb04 	b.w	800489c <_malloc_r>
 8005294:	b92a      	cbnz	r2, 80052a2 <_realloc_r+0x24>
 8005296:	f000 f8d1 	bl	800543c <_free_r>
 800529a:	4625      	mov	r5, r4
 800529c:	4628      	mov	r0, r5
 800529e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052a2:	f000 f925 	bl	80054f0 <_malloc_usable_size_r>
 80052a6:	4284      	cmp	r4, r0
 80052a8:	4606      	mov	r6, r0
 80052aa:	d802      	bhi.n	80052b2 <_realloc_r+0x34>
 80052ac:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80052b0:	d8f4      	bhi.n	800529c <_realloc_r+0x1e>
 80052b2:	4621      	mov	r1, r4
 80052b4:	4638      	mov	r0, r7
 80052b6:	f7ff faf1 	bl	800489c <_malloc_r>
 80052ba:	4680      	mov	r8, r0
 80052bc:	b908      	cbnz	r0, 80052c2 <_realloc_r+0x44>
 80052be:	4645      	mov	r5, r8
 80052c0:	e7ec      	b.n	800529c <_realloc_r+0x1e>
 80052c2:	42b4      	cmp	r4, r6
 80052c4:	4622      	mov	r2, r4
 80052c6:	4629      	mov	r1, r5
 80052c8:	bf28      	it	cs
 80052ca:	4632      	movcs	r2, r6
 80052cc:	f000 f876 	bl	80053bc <memcpy>
 80052d0:	4629      	mov	r1, r5
 80052d2:	4638      	mov	r0, r7
 80052d4:	f000 f8b2 	bl	800543c <_free_r>
 80052d8:	e7f1      	b.n	80052be <_realloc_r+0x40>

080052da <memmove>:
 80052da:	4288      	cmp	r0, r1
 80052dc:	b510      	push	{r4, lr}
 80052de:	eb01 0402 	add.w	r4, r1, r2
 80052e2:	d902      	bls.n	80052ea <memmove+0x10>
 80052e4:	4284      	cmp	r4, r0
 80052e6:	4623      	mov	r3, r4
 80052e8:	d807      	bhi.n	80052fa <memmove+0x20>
 80052ea:	1e43      	subs	r3, r0, #1
 80052ec:	42a1      	cmp	r1, r4
 80052ee:	d008      	beq.n	8005302 <memmove+0x28>
 80052f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052f8:	e7f8      	b.n	80052ec <memmove+0x12>
 80052fa:	4601      	mov	r1, r0
 80052fc:	4402      	add	r2, r0
 80052fe:	428a      	cmp	r2, r1
 8005300:	d100      	bne.n	8005304 <memmove+0x2a>
 8005302:	bd10      	pop	{r4, pc}
 8005304:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005308:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800530c:	e7f7      	b.n	80052fe <memmove+0x24>
	...

08005310 <_lseek_r>:
 8005310:	b538      	push	{r3, r4, r5, lr}
 8005312:	4604      	mov	r4, r0
 8005314:	4608      	mov	r0, r1
 8005316:	4611      	mov	r1, r2
 8005318:	2200      	movs	r2, #0
 800531a:	4d05      	ldr	r5, [pc, #20]	@ (8005330 <_lseek_r+0x20>)
 800531c:	602a      	str	r2, [r5, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	f000 fbd8 	bl	8005ad4 <_lseek>
 8005324:	1c43      	adds	r3, r0, #1
 8005326:	d102      	bne.n	800532e <_lseek_r+0x1e>
 8005328:	682b      	ldr	r3, [r5, #0]
 800532a:	b103      	cbz	r3, 800532e <_lseek_r+0x1e>
 800532c:	6023      	str	r3, [r4, #0]
 800532e:	bd38      	pop	{r3, r4, r5, pc}
 8005330:	20000398 	.word	0x20000398

08005334 <_read_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	4604      	mov	r4, r0
 8005338:	4608      	mov	r0, r1
 800533a:	4611      	mov	r1, r2
 800533c:	2200      	movs	r2, #0
 800533e:	4d05      	ldr	r5, [pc, #20]	@ (8005354 <_read_r+0x20>)
 8005340:	602a      	str	r2, [r5, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	f000 fbce 	bl	8005ae4 <_read>
 8005348:	1c43      	adds	r3, r0, #1
 800534a:	d102      	bne.n	8005352 <_read_r+0x1e>
 800534c:	682b      	ldr	r3, [r5, #0]
 800534e:	b103      	cbz	r3, 8005352 <_read_r+0x1e>
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	bd38      	pop	{r3, r4, r5, pc}
 8005354:	20000398 	.word	0x20000398

08005358 <_sbrk_r>:
 8005358:	b538      	push	{r3, r4, r5, lr}
 800535a:	2300      	movs	r3, #0
 800535c:	4d05      	ldr	r5, [pc, #20]	@ (8005374 <_sbrk_r+0x1c>)
 800535e:	4604      	mov	r4, r0
 8005360:	4608      	mov	r0, r1
 8005362:	602b      	str	r3, [r5, #0]
 8005364:	f000 fbc6 	bl	8005af4 <_sbrk>
 8005368:	1c43      	adds	r3, r0, #1
 800536a:	d102      	bne.n	8005372 <_sbrk_r+0x1a>
 800536c:	682b      	ldr	r3, [r5, #0]
 800536e:	b103      	cbz	r3, 8005372 <_sbrk_r+0x1a>
 8005370:	6023      	str	r3, [r4, #0]
 8005372:	bd38      	pop	{r3, r4, r5, pc}
 8005374:	20000398 	.word	0x20000398

08005378 <_write_r>:
 8005378:	b538      	push	{r3, r4, r5, lr}
 800537a:	4604      	mov	r4, r0
 800537c:	4608      	mov	r0, r1
 800537e:	4611      	mov	r1, r2
 8005380:	2200      	movs	r2, #0
 8005382:	4d05      	ldr	r5, [pc, #20]	@ (8005398 <_write_r+0x20>)
 8005384:	602a      	str	r2, [r5, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	f000 fbc2 	bl	8005b10 <_write>
 800538c:	1c43      	adds	r3, r0, #1
 800538e:	d102      	bne.n	8005396 <_write_r+0x1e>
 8005390:	682b      	ldr	r3, [r5, #0]
 8005392:	b103      	cbz	r3, 8005396 <_write_r+0x1e>
 8005394:	6023      	str	r3, [r4, #0]
 8005396:	bd38      	pop	{r3, r4, r5, pc}
 8005398:	20000398 	.word	0x20000398

0800539c <_close_r>:
 800539c:	b538      	push	{r3, r4, r5, lr}
 800539e:	2300      	movs	r3, #0
 80053a0:	4d05      	ldr	r5, [pc, #20]	@ (80053b8 <_close_r+0x1c>)
 80053a2:	4604      	mov	r4, r0
 80053a4:	4608      	mov	r0, r1
 80053a6:	602b      	str	r3, [r5, #0]
 80053a8:	f000 fb6c 	bl	8005a84 <_close>
 80053ac:	1c43      	adds	r3, r0, #1
 80053ae:	d102      	bne.n	80053b6 <_close_r+0x1a>
 80053b0:	682b      	ldr	r3, [r5, #0]
 80053b2:	b103      	cbz	r3, 80053b6 <_close_r+0x1a>
 80053b4:	6023      	str	r3, [r4, #0]
 80053b6:	bd38      	pop	{r3, r4, r5, pc}
 80053b8:	20000398 	.word	0x20000398

080053bc <memcpy>:
 80053bc:	440a      	add	r2, r1
 80053be:	4291      	cmp	r1, r2
 80053c0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80053c4:	d100      	bne.n	80053c8 <memcpy+0xc>
 80053c6:	4770      	bx	lr
 80053c8:	b510      	push	{r4, lr}
 80053ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053ce:	4291      	cmp	r1, r2
 80053d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053d4:	d1f9      	bne.n	80053ca <memcpy+0xe>
 80053d6:	bd10      	pop	{r4, pc}

080053d8 <__assert_func>:
 80053d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80053da:	4614      	mov	r4, r2
 80053dc:	461a      	mov	r2, r3
 80053de:	4b09      	ldr	r3, [pc, #36]	@ (8005404 <__assert_func+0x2c>)
 80053e0:	4605      	mov	r5, r0
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68d8      	ldr	r0, [r3, #12]
 80053e6:	b14c      	cbz	r4, 80053fc <__assert_func+0x24>
 80053e8:	4b07      	ldr	r3, [pc, #28]	@ (8005408 <__assert_func+0x30>)
 80053ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80053ee:	9100      	str	r1, [sp, #0]
 80053f0:	462b      	mov	r3, r5
 80053f2:	4906      	ldr	r1, [pc, #24]	@ (800540c <__assert_func+0x34>)
 80053f4:	f000 f884 	bl	8005500 <fiprintf>
 80053f8:	f000 f8a1 	bl	800553e <abort>
 80053fc:	4b04      	ldr	r3, [pc, #16]	@ (8005410 <__assert_func+0x38>)
 80053fe:	461c      	mov	r4, r3
 8005400:	e7f3      	b.n	80053ea <__assert_func+0x12>
 8005402:	bf00      	nop
 8005404:	20000018 	.word	0x20000018
 8005408:	08005cb5 	.word	0x08005cb5
 800540c:	08005cc2 	.word	0x08005cc2
 8005410:	08005cf0 	.word	0x08005cf0

08005414 <_calloc_r>:
 8005414:	b570      	push	{r4, r5, r6, lr}
 8005416:	fba1 5402 	umull	r5, r4, r1, r2
 800541a:	b934      	cbnz	r4, 800542a <_calloc_r+0x16>
 800541c:	4629      	mov	r1, r5
 800541e:	f7ff fa3d 	bl	800489c <_malloc_r>
 8005422:	4606      	mov	r6, r0
 8005424:	b928      	cbnz	r0, 8005432 <_calloc_r+0x1e>
 8005426:	4630      	mov	r0, r6
 8005428:	bd70      	pop	{r4, r5, r6, pc}
 800542a:	220c      	movs	r2, #12
 800542c:	2600      	movs	r6, #0
 800542e:	6002      	str	r2, [r0, #0]
 8005430:	e7f9      	b.n	8005426 <_calloc_r+0x12>
 8005432:	462a      	mov	r2, r5
 8005434:	4621      	mov	r1, r4
 8005436:	f7fe fa0f 	bl	8003858 <memset>
 800543a:	e7f4      	b.n	8005426 <_calloc_r+0x12>

0800543c <_free_r>:
 800543c:	b538      	push	{r3, r4, r5, lr}
 800543e:	4605      	mov	r5, r0
 8005440:	2900      	cmp	r1, #0
 8005442:	d040      	beq.n	80054c6 <_free_r+0x8a>
 8005444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005448:	1f0c      	subs	r4, r1, #4
 800544a:	2b00      	cmp	r3, #0
 800544c:	bfb8      	it	lt
 800544e:	18e4      	addlt	r4, r4, r3
 8005450:	f7ff fb4c 	bl	8004aec <__malloc_lock>
 8005454:	4a1c      	ldr	r2, [pc, #112]	@ (80054c8 <_free_r+0x8c>)
 8005456:	6813      	ldr	r3, [r2, #0]
 8005458:	b933      	cbnz	r3, 8005468 <_free_r+0x2c>
 800545a:	6063      	str	r3, [r4, #4]
 800545c:	6014      	str	r4, [r2, #0]
 800545e:	4628      	mov	r0, r5
 8005460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005464:	f7ff bb48 	b.w	8004af8 <__malloc_unlock>
 8005468:	42a3      	cmp	r3, r4
 800546a:	d908      	bls.n	800547e <_free_r+0x42>
 800546c:	6820      	ldr	r0, [r4, #0]
 800546e:	1821      	adds	r1, r4, r0
 8005470:	428b      	cmp	r3, r1
 8005472:	bf01      	itttt	eq
 8005474:	6819      	ldreq	r1, [r3, #0]
 8005476:	685b      	ldreq	r3, [r3, #4]
 8005478:	1809      	addeq	r1, r1, r0
 800547a:	6021      	streq	r1, [r4, #0]
 800547c:	e7ed      	b.n	800545a <_free_r+0x1e>
 800547e:	461a      	mov	r2, r3
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	b10b      	cbz	r3, 8005488 <_free_r+0x4c>
 8005484:	42a3      	cmp	r3, r4
 8005486:	d9fa      	bls.n	800547e <_free_r+0x42>
 8005488:	6811      	ldr	r1, [r2, #0]
 800548a:	1850      	adds	r0, r2, r1
 800548c:	42a0      	cmp	r0, r4
 800548e:	d10b      	bne.n	80054a8 <_free_r+0x6c>
 8005490:	6820      	ldr	r0, [r4, #0]
 8005492:	4401      	add	r1, r0
 8005494:	1850      	adds	r0, r2, r1
 8005496:	4283      	cmp	r3, r0
 8005498:	6011      	str	r1, [r2, #0]
 800549a:	d1e0      	bne.n	800545e <_free_r+0x22>
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	4408      	add	r0, r1
 80054a2:	6010      	str	r0, [r2, #0]
 80054a4:	6053      	str	r3, [r2, #4]
 80054a6:	e7da      	b.n	800545e <_free_r+0x22>
 80054a8:	d902      	bls.n	80054b0 <_free_r+0x74>
 80054aa:	230c      	movs	r3, #12
 80054ac:	602b      	str	r3, [r5, #0]
 80054ae:	e7d6      	b.n	800545e <_free_r+0x22>
 80054b0:	6820      	ldr	r0, [r4, #0]
 80054b2:	1821      	adds	r1, r4, r0
 80054b4:	428b      	cmp	r3, r1
 80054b6:	bf01      	itttt	eq
 80054b8:	6819      	ldreq	r1, [r3, #0]
 80054ba:	685b      	ldreq	r3, [r3, #4]
 80054bc:	1809      	addeq	r1, r1, r0
 80054be:	6021      	streq	r1, [r4, #0]
 80054c0:	6063      	str	r3, [r4, #4]
 80054c2:	6054      	str	r4, [r2, #4]
 80054c4:	e7cb      	b.n	800545e <_free_r+0x22>
 80054c6:	bd38      	pop	{r3, r4, r5, pc}
 80054c8:	20000394 	.word	0x20000394

080054cc <__ascii_mbtowc>:
 80054cc:	b082      	sub	sp, #8
 80054ce:	b901      	cbnz	r1, 80054d2 <__ascii_mbtowc+0x6>
 80054d0:	a901      	add	r1, sp, #4
 80054d2:	b142      	cbz	r2, 80054e6 <__ascii_mbtowc+0x1a>
 80054d4:	b14b      	cbz	r3, 80054ea <__ascii_mbtowc+0x1e>
 80054d6:	7813      	ldrb	r3, [r2, #0]
 80054d8:	600b      	str	r3, [r1, #0]
 80054da:	7812      	ldrb	r2, [r2, #0]
 80054dc:	1e10      	subs	r0, r2, #0
 80054de:	bf18      	it	ne
 80054e0:	2001      	movne	r0, #1
 80054e2:	b002      	add	sp, #8
 80054e4:	4770      	bx	lr
 80054e6:	4610      	mov	r0, r2
 80054e8:	e7fb      	b.n	80054e2 <__ascii_mbtowc+0x16>
 80054ea:	f06f 0001 	mvn.w	r0, #1
 80054ee:	e7f8      	b.n	80054e2 <__ascii_mbtowc+0x16>

080054f0 <_malloc_usable_size_r>:
 80054f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054f4:	1f18      	subs	r0, r3, #4
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	bfbc      	itt	lt
 80054fa:	580b      	ldrlt	r3, [r1, r0]
 80054fc:	18c0      	addlt	r0, r0, r3
 80054fe:	4770      	bx	lr

08005500 <fiprintf>:
 8005500:	b40e      	push	{r1, r2, r3}
 8005502:	b503      	push	{r0, r1, lr}
 8005504:	4601      	mov	r1, r0
 8005506:	ab03      	add	r3, sp, #12
 8005508:	4805      	ldr	r0, [pc, #20]	@ (8005520 <fiprintf+0x20>)
 800550a:	f853 2b04 	ldr.w	r2, [r3], #4
 800550e:	6800      	ldr	r0, [r0, #0]
 8005510:	9301      	str	r3, [sp, #4]
 8005512:	f000 f843 	bl	800559c <_vfiprintf_r>
 8005516:	b002      	add	sp, #8
 8005518:	f85d eb04 	ldr.w	lr, [sp], #4
 800551c:	b003      	add	sp, #12
 800551e:	4770      	bx	lr
 8005520:	20000018 	.word	0x20000018

08005524 <__ascii_wctomb>:
 8005524:	4603      	mov	r3, r0
 8005526:	4608      	mov	r0, r1
 8005528:	b141      	cbz	r1, 800553c <__ascii_wctomb+0x18>
 800552a:	2aff      	cmp	r2, #255	@ 0xff
 800552c:	d904      	bls.n	8005538 <__ascii_wctomb+0x14>
 800552e:	228a      	movs	r2, #138	@ 0x8a
 8005530:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	4770      	bx	lr
 8005538:	2001      	movs	r0, #1
 800553a:	700a      	strb	r2, [r1, #0]
 800553c:	4770      	bx	lr

0800553e <abort>:
 800553e:	2006      	movs	r0, #6
 8005540:	b508      	push	{r3, lr}
 8005542:	f000 fa61 	bl	8005a08 <raise>
 8005546:	2001      	movs	r0, #1
 8005548:	f000 faea 	bl	8005b20 <_exit>

0800554c <__sfputc_r>:
 800554c:	6893      	ldr	r3, [r2, #8]
 800554e:	b410      	push	{r4}
 8005550:	3b01      	subs	r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	6093      	str	r3, [r2, #8]
 8005556:	da07      	bge.n	8005568 <__sfputc_r+0x1c>
 8005558:	6994      	ldr	r4, [r2, #24]
 800555a:	42a3      	cmp	r3, r4
 800555c:	db01      	blt.n	8005562 <__sfputc_r+0x16>
 800555e:	290a      	cmp	r1, #10
 8005560:	d102      	bne.n	8005568 <__sfputc_r+0x1c>
 8005562:	bc10      	pop	{r4}
 8005564:	f000 b932 	b.w	80057cc <__swbuf_r>
 8005568:	6813      	ldr	r3, [r2, #0]
 800556a:	1c58      	adds	r0, r3, #1
 800556c:	6010      	str	r0, [r2, #0]
 800556e:	7019      	strb	r1, [r3, #0]
 8005570:	4608      	mov	r0, r1
 8005572:	bc10      	pop	{r4}
 8005574:	4770      	bx	lr

08005576 <__sfputs_r>:
 8005576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005578:	4606      	mov	r6, r0
 800557a:	460f      	mov	r7, r1
 800557c:	4614      	mov	r4, r2
 800557e:	18d5      	adds	r5, r2, r3
 8005580:	42ac      	cmp	r4, r5
 8005582:	d101      	bne.n	8005588 <__sfputs_r+0x12>
 8005584:	2000      	movs	r0, #0
 8005586:	e007      	b.n	8005598 <__sfputs_r+0x22>
 8005588:	463a      	mov	r2, r7
 800558a:	4630      	mov	r0, r6
 800558c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005590:	f7ff ffdc 	bl	800554c <__sfputc_r>
 8005594:	1c43      	adds	r3, r0, #1
 8005596:	d1f3      	bne.n	8005580 <__sfputs_r+0xa>
 8005598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800559c <_vfiprintf_r>:
 800559c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a0:	460d      	mov	r5, r1
 80055a2:	4614      	mov	r4, r2
 80055a4:	4698      	mov	r8, r3
 80055a6:	4606      	mov	r6, r0
 80055a8:	b09d      	sub	sp, #116	@ 0x74
 80055aa:	b118      	cbz	r0, 80055b4 <_vfiprintf_r+0x18>
 80055ac:	6a03      	ldr	r3, [r0, #32]
 80055ae:	b90b      	cbnz	r3, 80055b4 <_vfiprintf_r+0x18>
 80055b0:	f7fe f91c 	bl	80037ec <__sinit>
 80055b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80055b6:	07d9      	lsls	r1, r3, #31
 80055b8:	d405      	bmi.n	80055c6 <_vfiprintf_r+0x2a>
 80055ba:	89ab      	ldrh	r3, [r5, #12]
 80055bc:	059a      	lsls	r2, r3, #22
 80055be:	d402      	bmi.n	80055c6 <_vfiprintf_r+0x2a>
 80055c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80055c2:	f7fe f976 	bl	80038b2 <__retarget_lock_acquire_recursive>
 80055c6:	89ab      	ldrh	r3, [r5, #12]
 80055c8:	071b      	lsls	r3, r3, #28
 80055ca:	d501      	bpl.n	80055d0 <_vfiprintf_r+0x34>
 80055cc:	692b      	ldr	r3, [r5, #16]
 80055ce:	b99b      	cbnz	r3, 80055f8 <_vfiprintf_r+0x5c>
 80055d0:	4629      	mov	r1, r5
 80055d2:	4630      	mov	r0, r6
 80055d4:	f000 f938 	bl	8005848 <__swsetup_r>
 80055d8:	b170      	cbz	r0, 80055f8 <_vfiprintf_r+0x5c>
 80055da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80055dc:	07dc      	lsls	r4, r3, #31
 80055de:	d504      	bpl.n	80055ea <_vfiprintf_r+0x4e>
 80055e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055e4:	b01d      	add	sp, #116	@ 0x74
 80055e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ea:	89ab      	ldrh	r3, [r5, #12]
 80055ec:	0598      	lsls	r0, r3, #22
 80055ee:	d4f7      	bmi.n	80055e0 <_vfiprintf_r+0x44>
 80055f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80055f2:	f7fe f95f 	bl	80038b4 <__retarget_lock_release_recursive>
 80055f6:	e7f3      	b.n	80055e0 <_vfiprintf_r+0x44>
 80055f8:	2300      	movs	r3, #0
 80055fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80055fc:	2320      	movs	r3, #32
 80055fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005602:	2330      	movs	r3, #48	@ 0x30
 8005604:	f04f 0901 	mov.w	r9, #1
 8005608:	f8cd 800c 	str.w	r8, [sp, #12]
 800560c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80057b8 <_vfiprintf_r+0x21c>
 8005610:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005614:	4623      	mov	r3, r4
 8005616:	469a      	mov	sl, r3
 8005618:	f813 2b01 	ldrb.w	r2, [r3], #1
 800561c:	b10a      	cbz	r2, 8005622 <_vfiprintf_r+0x86>
 800561e:	2a25      	cmp	r2, #37	@ 0x25
 8005620:	d1f9      	bne.n	8005616 <_vfiprintf_r+0x7a>
 8005622:	ebba 0b04 	subs.w	fp, sl, r4
 8005626:	d00b      	beq.n	8005640 <_vfiprintf_r+0xa4>
 8005628:	465b      	mov	r3, fp
 800562a:	4622      	mov	r2, r4
 800562c:	4629      	mov	r1, r5
 800562e:	4630      	mov	r0, r6
 8005630:	f7ff ffa1 	bl	8005576 <__sfputs_r>
 8005634:	3001      	adds	r0, #1
 8005636:	f000 80a7 	beq.w	8005788 <_vfiprintf_r+0x1ec>
 800563a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800563c:	445a      	add	r2, fp
 800563e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005640:	f89a 3000 	ldrb.w	r3, [sl]
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 809f 	beq.w	8005788 <_vfiprintf_r+0x1ec>
 800564a:	2300      	movs	r3, #0
 800564c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005650:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005654:	f10a 0a01 	add.w	sl, sl, #1
 8005658:	9304      	str	r3, [sp, #16]
 800565a:	9307      	str	r3, [sp, #28]
 800565c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005660:	931a      	str	r3, [sp, #104]	@ 0x68
 8005662:	4654      	mov	r4, sl
 8005664:	2205      	movs	r2, #5
 8005666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800566a:	4853      	ldr	r0, [pc, #332]	@ (80057b8 <_vfiprintf_r+0x21c>)
 800566c:	f7fe f928 	bl	80038c0 <memchr>
 8005670:	9a04      	ldr	r2, [sp, #16]
 8005672:	b9d8      	cbnz	r0, 80056ac <_vfiprintf_r+0x110>
 8005674:	06d1      	lsls	r1, r2, #27
 8005676:	bf44      	itt	mi
 8005678:	2320      	movmi	r3, #32
 800567a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800567e:	0713      	lsls	r3, r2, #28
 8005680:	bf44      	itt	mi
 8005682:	232b      	movmi	r3, #43	@ 0x2b
 8005684:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005688:	f89a 3000 	ldrb.w	r3, [sl]
 800568c:	2b2a      	cmp	r3, #42	@ 0x2a
 800568e:	d015      	beq.n	80056bc <_vfiprintf_r+0x120>
 8005690:	4654      	mov	r4, sl
 8005692:	2000      	movs	r0, #0
 8005694:	f04f 0c0a 	mov.w	ip, #10
 8005698:	9a07      	ldr	r2, [sp, #28]
 800569a:	4621      	mov	r1, r4
 800569c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056a0:	3b30      	subs	r3, #48	@ 0x30
 80056a2:	2b09      	cmp	r3, #9
 80056a4:	d94b      	bls.n	800573e <_vfiprintf_r+0x1a2>
 80056a6:	b1b0      	cbz	r0, 80056d6 <_vfiprintf_r+0x13a>
 80056a8:	9207      	str	r2, [sp, #28]
 80056aa:	e014      	b.n	80056d6 <_vfiprintf_r+0x13a>
 80056ac:	eba0 0308 	sub.w	r3, r0, r8
 80056b0:	fa09 f303 	lsl.w	r3, r9, r3
 80056b4:	4313      	orrs	r3, r2
 80056b6:	46a2      	mov	sl, r4
 80056b8:	9304      	str	r3, [sp, #16]
 80056ba:	e7d2      	b.n	8005662 <_vfiprintf_r+0xc6>
 80056bc:	9b03      	ldr	r3, [sp, #12]
 80056be:	1d19      	adds	r1, r3, #4
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	9103      	str	r1, [sp, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	bfbb      	ittet	lt
 80056c8:	425b      	neglt	r3, r3
 80056ca:	f042 0202 	orrlt.w	r2, r2, #2
 80056ce:	9307      	strge	r3, [sp, #28]
 80056d0:	9307      	strlt	r3, [sp, #28]
 80056d2:	bfb8      	it	lt
 80056d4:	9204      	strlt	r2, [sp, #16]
 80056d6:	7823      	ldrb	r3, [r4, #0]
 80056d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80056da:	d10a      	bne.n	80056f2 <_vfiprintf_r+0x156>
 80056dc:	7863      	ldrb	r3, [r4, #1]
 80056de:	2b2a      	cmp	r3, #42	@ 0x2a
 80056e0:	d132      	bne.n	8005748 <_vfiprintf_r+0x1ac>
 80056e2:	9b03      	ldr	r3, [sp, #12]
 80056e4:	3402      	adds	r4, #2
 80056e6:	1d1a      	adds	r2, r3, #4
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	9203      	str	r2, [sp, #12]
 80056ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80056f0:	9305      	str	r3, [sp, #20]
 80056f2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80057bc <_vfiprintf_r+0x220>
 80056f6:	2203      	movs	r2, #3
 80056f8:	4650      	mov	r0, sl
 80056fa:	7821      	ldrb	r1, [r4, #0]
 80056fc:	f7fe f8e0 	bl	80038c0 <memchr>
 8005700:	b138      	cbz	r0, 8005712 <_vfiprintf_r+0x176>
 8005702:	2240      	movs	r2, #64	@ 0x40
 8005704:	9b04      	ldr	r3, [sp, #16]
 8005706:	eba0 000a 	sub.w	r0, r0, sl
 800570a:	4082      	lsls	r2, r0
 800570c:	4313      	orrs	r3, r2
 800570e:	3401      	adds	r4, #1
 8005710:	9304      	str	r3, [sp, #16]
 8005712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005716:	2206      	movs	r2, #6
 8005718:	4829      	ldr	r0, [pc, #164]	@ (80057c0 <_vfiprintf_r+0x224>)
 800571a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800571e:	f7fe f8cf 	bl	80038c0 <memchr>
 8005722:	2800      	cmp	r0, #0
 8005724:	d03f      	beq.n	80057a6 <_vfiprintf_r+0x20a>
 8005726:	4b27      	ldr	r3, [pc, #156]	@ (80057c4 <_vfiprintf_r+0x228>)
 8005728:	bb1b      	cbnz	r3, 8005772 <_vfiprintf_r+0x1d6>
 800572a:	9b03      	ldr	r3, [sp, #12]
 800572c:	3307      	adds	r3, #7
 800572e:	f023 0307 	bic.w	r3, r3, #7
 8005732:	3308      	adds	r3, #8
 8005734:	9303      	str	r3, [sp, #12]
 8005736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005738:	443b      	add	r3, r7
 800573a:	9309      	str	r3, [sp, #36]	@ 0x24
 800573c:	e76a      	b.n	8005614 <_vfiprintf_r+0x78>
 800573e:	460c      	mov	r4, r1
 8005740:	2001      	movs	r0, #1
 8005742:	fb0c 3202 	mla	r2, ip, r2, r3
 8005746:	e7a8      	b.n	800569a <_vfiprintf_r+0xfe>
 8005748:	2300      	movs	r3, #0
 800574a:	f04f 0c0a 	mov.w	ip, #10
 800574e:	4619      	mov	r1, r3
 8005750:	3401      	adds	r4, #1
 8005752:	9305      	str	r3, [sp, #20]
 8005754:	4620      	mov	r0, r4
 8005756:	f810 2b01 	ldrb.w	r2, [r0], #1
 800575a:	3a30      	subs	r2, #48	@ 0x30
 800575c:	2a09      	cmp	r2, #9
 800575e:	d903      	bls.n	8005768 <_vfiprintf_r+0x1cc>
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0c6      	beq.n	80056f2 <_vfiprintf_r+0x156>
 8005764:	9105      	str	r1, [sp, #20]
 8005766:	e7c4      	b.n	80056f2 <_vfiprintf_r+0x156>
 8005768:	4604      	mov	r4, r0
 800576a:	2301      	movs	r3, #1
 800576c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005770:	e7f0      	b.n	8005754 <_vfiprintf_r+0x1b8>
 8005772:	ab03      	add	r3, sp, #12
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	462a      	mov	r2, r5
 8005778:	4630      	mov	r0, r6
 800577a:	4b13      	ldr	r3, [pc, #76]	@ (80057c8 <_vfiprintf_r+0x22c>)
 800577c:	a904      	add	r1, sp, #16
 800577e:	f7fd fbb7 	bl	8002ef0 <_printf_float>
 8005782:	4607      	mov	r7, r0
 8005784:	1c78      	adds	r0, r7, #1
 8005786:	d1d6      	bne.n	8005736 <_vfiprintf_r+0x19a>
 8005788:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800578a:	07d9      	lsls	r1, r3, #31
 800578c:	d405      	bmi.n	800579a <_vfiprintf_r+0x1fe>
 800578e:	89ab      	ldrh	r3, [r5, #12]
 8005790:	059a      	lsls	r2, r3, #22
 8005792:	d402      	bmi.n	800579a <_vfiprintf_r+0x1fe>
 8005794:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005796:	f7fe f88d 	bl	80038b4 <__retarget_lock_release_recursive>
 800579a:	89ab      	ldrh	r3, [r5, #12]
 800579c:	065b      	lsls	r3, r3, #25
 800579e:	f53f af1f 	bmi.w	80055e0 <_vfiprintf_r+0x44>
 80057a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057a4:	e71e      	b.n	80055e4 <_vfiprintf_r+0x48>
 80057a6:	ab03      	add	r3, sp, #12
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	462a      	mov	r2, r5
 80057ac:	4630      	mov	r0, r6
 80057ae:	4b06      	ldr	r3, [pc, #24]	@ (80057c8 <_vfiprintf_r+0x22c>)
 80057b0:	a904      	add	r1, sp, #16
 80057b2:	f7fd fe3b 	bl	800342c <_printf_i>
 80057b6:	e7e4      	b.n	8005782 <_vfiprintf_r+0x1e6>
 80057b8:	08005c41 	.word	0x08005c41
 80057bc:	08005c47 	.word	0x08005c47
 80057c0:	08005c4b 	.word	0x08005c4b
 80057c4:	08002ef1 	.word	0x08002ef1
 80057c8:	08005577 	.word	0x08005577

080057cc <__swbuf_r>:
 80057cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ce:	460e      	mov	r6, r1
 80057d0:	4614      	mov	r4, r2
 80057d2:	4605      	mov	r5, r0
 80057d4:	b118      	cbz	r0, 80057de <__swbuf_r+0x12>
 80057d6:	6a03      	ldr	r3, [r0, #32]
 80057d8:	b90b      	cbnz	r3, 80057de <__swbuf_r+0x12>
 80057da:	f7fe f807 	bl	80037ec <__sinit>
 80057de:	69a3      	ldr	r3, [r4, #24]
 80057e0:	60a3      	str	r3, [r4, #8]
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	071a      	lsls	r2, r3, #28
 80057e6:	d501      	bpl.n	80057ec <__swbuf_r+0x20>
 80057e8:	6923      	ldr	r3, [r4, #16]
 80057ea:	b943      	cbnz	r3, 80057fe <__swbuf_r+0x32>
 80057ec:	4621      	mov	r1, r4
 80057ee:	4628      	mov	r0, r5
 80057f0:	f000 f82a 	bl	8005848 <__swsetup_r>
 80057f4:	b118      	cbz	r0, 80057fe <__swbuf_r+0x32>
 80057f6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80057fa:	4638      	mov	r0, r7
 80057fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	6922      	ldr	r2, [r4, #16]
 8005802:	b2f6      	uxtb	r6, r6
 8005804:	1a98      	subs	r0, r3, r2
 8005806:	6963      	ldr	r3, [r4, #20]
 8005808:	4637      	mov	r7, r6
 800580a:	4283      	cmp	r3, r0
 800580c:	dc05      	bgt.n	800581a <__swbuf_r+0x4e>
 800580e:	4621      	mov	r1, r4
 8005810:	4628      	mov	r0, r5
 8005812:	f7ff f943 	bl	8004a9c <_fflush_r>
 8005816:	2800      	cmp	r0, #0
 8005818:	d1ed      	bne.n	80057f6 <__swbuf_r+0x2a>
 800581a:	68a3      	ldr	r3, [r4, #8]
 800581c:	3b01      	subs	r3, #1
 800581e:	60a3      	str	r3, [r4, #8]
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	6022      	str	r2, [r4, #0]
 8005826:	701e      	strb	r6, [r3, #0]
 8005828:	6962      	ldr	r2, [r4, #20]
 800582a:	1c43      	adds	r3, r0, #1
 800582c:	429a      	cmp	r2, r3
 800582e:	d004      	beq.n	800583a <__swbuf_r+0x6e>
 8005830:	89a3      	ldrh	r3, [r4, #12]
 8005832:	07db      	lsls	r3, r3, #31
 8005834:	d5e1      	bpl.n	80057fa <__swbuf_r+0x2e>
 8005836:	2e0a      	cmp	r6, #10
 8005838:	d1df      	bne.n	80057fa <__swbuf_r+0x2e>
 800583a:	4621      	mov	r1, r4
 800583c:	4628      	mov	r0, r5
 800583e:	f7ff f92d 	bl	8004a9c <_fflush_r>
 8005842:	2800      	cmp	r0, #0
 8005844:	d0d9      	beq.n	80057fa <__swbuf_r+0x2e>
 8005846:	e7d6      	b.n	80057f6 <__swbuf_r+0x2a>

08005848 <__swsetup_r>:
 8005848:	b538      	push	{r3, r4, r5, lr}
 800584a:	4b29      	ldr	r3, [pc, #164]	@ (80058f0 <__swsetup_r+0xa8>)
 800584c:	4605      	mov	r5, r0
 800584e:	6818      	ldr	r0, [r3, #0]
 8005850:	460c      	mov	r4, r1
 8005852:	b118      	cbz	r0, 800585c <__swsetup_r+0x14>
 8005854:	6a03      	ldr	r3, [r0, #32]
 8005856:	b90b      	cbnz	r3, 800585c <__swsetup_r+0x14>
 8005858:	f7fd ffc8 	bl	80037ec <__sinit>
 800585c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005860:	0719      	lsls	r1, r3, #28
 8005862:	d422      	bmi.n	80058aa <__swsetup_r+0x62>
 8005864:	06da      	lsls	r2, r3, #27
 8005866:	d407      	bmi.n	8005878 <__swsetup_r+0x30>
 8005868:	2209      	movs	r2, #9
 800586a:	602a      	str	r2, [r5, #0]
 800586c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005870:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005874:	81a3      	strh	r3, [r4, #12]
 8005876:	e033      	b.n	80058e0 <__swsetup_r+0x98>
 8005878:	0758      	lsls	r0, r3, #29
 800587a:	d512      	bpl.n	80058a2 <__swsetup_r+0x5a>
 800587c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800587e:	b141      	cbz	r1, 8005892 <__swsetup_r+0x4a>
 8005880:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005884:	4299      	cmp	r1, r3
 8005886:	d002      	beq.n	800588e <__swsetup_r+0x46>
 8005888:	4628      	mov	r0, r5
 800588a:	f7ff fdd7 	bl	800543c <_free_r>
 800588e:	2300      	movs	r3, #0
 8005890:	6363      	str	r3, [r4, #52]	@ 0x34
 8005892:	89a3      	ldrh	r3, [r4, #12]
 8005894:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005898:	81a3      	strh	r3, [r4, #12]
 800589a:	2300      	movs	r3, #0
 800589c:	6063      	str	r3, [r4, #4]
 800589e:	6923      	ldr	r3, [r4, #16]
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	89a3      	ldrh	r3, [r4, #12]
 80058a4:	f043 0308 	orr.w	r3, r3, #8
 80058a8:	81a3      	strh	r3, [r4, #12]
 80058aa:	6923      	ldr	r3, [r4, #16]
 80058ac:	b94b      	cbnz	r3, 80058c2 <__swsetup_r+0x7a>
 80058ae:	89a3      	ldrh	r3, [r4, #12]
 80058b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80058b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058b8:	d003      	beq.n	80058c2 <__swsetup_r+0x7a>
 80058ba:	4621      	mov	r1, r4
 80058bc:	4628      	mov	r0, r5
 80058be:	f000 f83e 	bl	800593e <__smakebuf_r>
 80058c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058c6:	f013 0201 	ands.w	r2, r3, #1
 80058ca:	d00a      	beq.n	80058e2 <__swsetup_r+0x9a>
 80058cc:	2200      	movs	r2, #0
 80058ce:	60a2      	str	r2, [r4, #8]
 80058d0:	6962      	ldr	r2, [r4, #20]
 80058d2:	4252      	negs	r2, r2
 80058d4:	61a2      	str	r2, [r4, #24]
 80058d6:	6922      	ldr	r2, [r4, #16]
 80058d8:	b942      	cbnz	r2, 80058ec <__swsetup_r+0xa4>
 80058da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80058de:	d1c5      	bne.n	800586c <__swsetup_r+0x24>
 80058e0:	bd38      	pop	{r3, r4, r5, pc}
 80058e2:	0799      	lsls	r1, r3, #30
 80058e4:	bf58      	it	pl
 80058e6:	6962      	ldrpl	r2, [r4, #20]
 80058e8:	60a2      	str	r2, [r4, #8]
 80058ea:	e7f4      	b.n	80058d6 <__swsetup_r+0x8e>
 80058ec:	2000      	movs	r0, #0
 80058ee:	e7f7      	b.n	80058e0 <__swsetup_r+0x98>
 80058f0:	20000018 	.word	0x20000018

080058f4 <__swhatbuf_r>:
 80058f4:	b570      	push	{r4, r5, r6, lr}
 80058f6:	460c      	mov	r4, r1
 80058f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058fc:	4615      	mov	r5, r2
 80058fe:	2900      	cmp	r1, #0
 8005900:	461e      	mov	r6, r3
 8005902:	b096      	sub	sp, #88	@ 0x58
 8005904:	da0c      	bge.n	8005920 <__swhatbuf_r+0x2c>
 8005906:	89a3      	ldrh	r3, [r4, #12]
 8005908:	2100      	movs	r1, #0
 800590a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800590e:	bf14      	ite	ne
 8005910:	2340      	movne	r3, #64	@ 0x40
 8005912:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005916:	2000      	movs	r0, #0
 8005918:	6031      	str	r1, [r6, #0]
 800591a:	602b      	str	r3, [r5, #0]
 800591c:	b016      	add	sp, #88	@ 0x58
 800591e:	bd70      	pop	{r4, r5, r6, pc}
 8005920:	466a      	mov	r2, sp
 8005922:	f000 f89d 	bl	8005a60 <_fstat_r>
 8005926:	2800      	cmp	r0, #0
 8005928:	dbed      	blt.n	8005906 <__swhatbuf_r+0x12>
 800592a:	9901      	ldr	r1, [sp, #4]
 800592c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005930:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005934:	4259      	negs	r1, r3
 8005936:	4159      	adcs	r1, r3
 8005938:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800593c:	e7eb      	b.n	8005916 <__swhatbuf_r+0x22>

0800593e <__smakebuf_r>:
 800593e:	898b      	ldrh	r3, [r1, #12]
 8005940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005942:	079d      	lsls	r5, r3, #30
 8005944:	4606      	mov	r6, r0
 8005946:	460c      	mov	r4, r1
 8005948:	d507      	bpl.n	800595a <__smakebuf_r+0x1c>
 800594a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800594e:	6023      	str	r3, [r4, #0]
 8005950:	6123      	str	r3, [r4, #16]
 8005952:	2301      	movs	r3, #1
 8005954:	6163      	str	r3, [r4, #20]
 8005956:	b003      	add	sp, #12
 8005958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800595a:	466a      	mov	r2, sp
 800595c:	ab01      	add	r3, sp, #4
 800595e:	f7ff ffc9 	bl	80058f4 <__swhatbuf_r>
 8005962:	9f00      	ldr	r7, [sp, #0]
 8005964:	4605      	mov	r5, r0
 8005966:	4639      	mov	r1, r7
 8005968:	4630      	mov	r0, r6
 800596a:	f7fe ff97 	bl	800489c <_malloc_r>
 800596e:	b948      	cbnz	r0, 8005984 <__smakebuf_r+0x46>
 8005970:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005974:	059a      	lsls	r2, r3, #22
 8005976:	d4ee      	bmi.n	8005956 <__smakebuf_r+0x18>
 8005978:	f023 0303 	bic.w	r3, r3, #3
 800597c:	f043 0302 	orr.w	r3, r3, #2
 8005980:	81a3      	strh	r3, [r4, #12]
 8005982:	e7e2      	b.n	800594a <__smakebuf_r+0xc>
 8005984:	89a3      	ldrh	r3, [r4, #12]
 8005986:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800598a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800598e:	81a3      	strh	r3, [r4, #12]
 8005990:	9b01      	ldr	r3, [sp, #4]
 8005992:	6020      	str	r0, [r4, #0]
 8005994:	b15b      	cbz	r3, 80059ae <__smakebuf_r+0x70>
 8005996:	4630      	mov	r0, r6
 8005998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800599c:	f000 f83c 	bl	8005a18 <_isatty_r>
 80059a0:	b128      	cbz	r0, 80059ae <__smakebuf_r+0x70>
 80059a2:	89a3      	ldrh	r3, [r4, #12]
 80059a4:	f023 0303 	bic.w	r3, r3, #3
 80059a8:	f043 0301 	orr.w	r3, r3, #1
 80059ac:	81a3      	strh	r3, [r4, #12]
 80059ae:	89a3      	ldrh	r3, [r4, #12]
 80059b0:	431d      	orrs	r5, r3
 80059b2:	81a5      	strh	r5, [r4, #12]
 80059b4:	e7cf      	b.n	8005956 <__smakebuf_r+0x18>

080059b6 <_raise_r>:
 80059b6:	291f      	cmp	r1, #31
 80059b8:	b538      	push	{r3, r4, r5, lr}
 80059ba:	4605      	mov	r5, r0
 80059bc:	460c      	mov	r4, r1
 80059be:	d904      	bls.n	80059ca <_raise_r+0x14>
 80059c0:	2316      	movs	r3, #22
 80059c2:	6003      	str	r3, [r0, #0]
 80059c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059c8:	bd38      	pop	{r3, r4, r5, pc}
 80059ca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80059cc:	b112      	cbz	r2, 80059d4 <_raise_r+0x1e>
 80059ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80059d2:	b94b      	cbnz	r3, 80059e8 <_raise_r+0x32>
 80059d4:	4628      	mov	r0, r5
 80059d6:	f000 f841 	bl	8005a5c <_getpid_r>
 80059da:	4622      	mov	r2, r4
 80059dc:	4601      	mov	r1, r0
 80059de:	4628      	mov	r0, r5
 80059e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059e4:	f000 b828 	b.w	8005a38 <_kill_r>
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d00a      	beq.n	8005a02 <_raise_r+0x4c>
 80059ec:	1c59      	adds	r1, r3, #1
 80059ee:	d103      	bne.n	80059f8 <_raise_r+0x42>
 80059f0:	2316      	movs	r3, #22
 80059f2:	6003      	str	r3, [r0, #0]
 80059f4:	2001      	movs	r0, #1
 80059f6:	e7e7      	b.n	80059c8 <_raise_r+0x12>
 80059f8:	2100      	movs	r1, #0
 80059fa:	4620      	mov	r0, r4
 80059fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005a00:	4798      	blx	r3
 8005a02:	2000      	movs	r0, #0
 8005a04:	e7e0      	b.n	80059c8 <_raise_r+0x12>
	...

08005a08 <raise>:
 8005a08:	4b02      	ldr	r3, [pc, #8]	@ (8005a14 <raise+0xc>)
 8005a0a:	4601      	mov	r1, r0
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	f7ff bfd2 	b.w	80059b6 <_raise_r>
 8005a12:	bf00      	nop
 8005a14:	20000018 	.word	0x20000018

08005a18 <_isatty_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	4d05      	ldr	r5, [pc, #20]	@ (8005a34 <_isatty_r+0x1c>)
 8005a1e:	4604      	mov	r4, r0
 8005a20:	4608      	mov	r0, r1
 8005a22:	602b      	str	r3, [r5, #0]
 8005a24:	f000 f846 	bl	8005ab4 <_isatty>
 8005a28:	1c43      	adds	r3, r0, #1
 8005a2a:	d102      	bne.n	8005a32 <_isatty_r+0x1a>
 8005a2c:	682b      	ldr	r3, [r5, #0]
 8005a2e:	b103      	cbz	r3, 8005a32 <_isatty_r+0x1a>
 8005a30:	6023      	str	r3, [r4, #0]
 8005a32:	bd38      	pop	{r3, r4, r5, pc}
 8005a34:	20000398 	.word	0x20000398

08005a38 <_kill_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	4d06      	ldr	r5, [pc, #24]	@ (8005a58 <_kill_r+0x20>)
 8005a3e:	4604      	mov	r4, r0
 8005a40:	4608      	mov	r0, r1
 8005a42:	4611      	mov	r1, r2
 8005a44:	602b      	str	r3, [r5, #0]
 8005a46:	f000 f83d 	bl	8005ac4 <_kill>
 8005a4a:	1c43      	adds	r3, r0, #1
 8005a4c:	d102      	bne.n	8005a54 <_kill_r+0x1c>
 8005a4e:	682b      	ldr	r3, [r5, #0]
 8005a50:	b103      	cbz	r3, 8005a54 <_kill_r+0x1c>
 8005a52:	6023      	str	r3, [r4, #0]
 8005a54:	bd38      	pop	{r3, r4, r5, pc}
 8005a56:	bf00      	nop
 8005a58:	20000398 	.word	0x20000398

08005a5c <_getpid_r>:
 8005a5c:	f000 b822 	b.w	8005aa4 <_getpid>

08005a60 <_fstat_r>:
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	2300      	movs	r3, #0
 8005a64:	4d06      	ldr	r5, [pc, #24]	@ (8005a80 <_fstat_r+0x20>)
 8005a66:	4604      	mov	r4, r0
 8005a68:	4608      	mov	r0, r1
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	602b      	str	r3, [r5, #0]
 8005a6e:	f000 f811 	bl	8005a94 <_fstat>
 8005a72:	1c43      	adds	r3, r0, #1
 8005a74:	d102      	bne.n	8005a7c <_fstat_r+0x1c>
 8005a76:	682b      	ldr	r3, [r5, #0]
 8005a78:	b103      	cbz	r3, 8005a7c <_fstat_r+0x1c>
 8005a7a:	6023      	str	r3, [r4, #0]
 8005a7c:	bd38      	pop	{r3, r4, r5, pc}
 8005a7e:	bf00      	nop
 8005a80:	20000398 	.word	0x20000398

08005a84 <_close>:
 8005a84:	2258      	movs	r2, #88	@ 0x58
 8005a86:	4b02      	ldr	r3, [pc, #8]	@ (8005a90 <_close+0xc>)
 8005a88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	4770      	bx	lr
 8005a90:	20000398 	.word	0x20000398

08005a94 <_fstat>:
 8005a94:	2258      	movs	r2, #88	@ 0x58
 8005a96:	4b02      	ldr	r3, [pc, #8]	@ (8005aa0 <_fstat+0xc>)
 8005a98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	4770      	bx	lr
 8005aa0:	20000398 	.word	0x20000398

08005aa4 <_getpid>:
 8005aa4:	2258      	movs	r2, #88	@ 0x58
 8005aa6:	4b02      	ldr	r3, [pc, #8]	@ (8005ab0 <_getpid+0xc>)
 8005aa8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	4770      	bx	lr
 8005ab0:	20000398 	.word	0x20000398

08005ab4 <_isatty>:
 8005ab4:	2258      	movs	r2, #88	@ 0x58
 8005ab6:	4b02      	ldr	r3, [pc, #8]	@ (8005ac0 <_isatty+0xc>)
 8005ab8:	2000      	movs	r0, #0
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	20000398 	.word	0x20000398

08005ac4 <_kill>:
 8005ac4:	2258      	movs	r2, #88	@ 0x58
 8005ac6:	4b02      	ldr	r3, [pc, #8]	@ (8005ad0 <_kill+0xc>)
 8005ac8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	4770      	bx	lr
 8005ad0:	20000398 	.word	0x20000398

08005ad4 <_lseek>:
 8005ad4:	2258      	movs	r2, #88	@ 0x58
 8005ad6:	4b02      	ldr	r3, [pc, #8]	@ (8005ae0 <_lseek+0xc>)
 8005ad8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	4770      	bx	lr
 8005ae0:	20000398 	.word	0x20000398

08005ae4 <_read>:
 8005ae4:	2258      	movs	r2, #88	@ 0x58
 8005ae6:	4b02      	ldr	r3, [pc, #8]	@ (8005af0 <_read+0xc>)
 8005ae8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	4770      	bx	lr
 8005af0:	20000398 	.word	0x20000398

08005af4 <_sbrk>:
 8005af4:	4a04      	ldr	r2, [pc, #16]	@ (8005b08 <_sbrk+0x14>)
 8005af6:	4603      	mov	r3, r0
 8005af8:	6811      	ldr	r1, [r2, #0]
 8005afa:	b909      	cbnz	r1, 8005b00 <_sbrk+0xc>
 8005afc:	4903      	ldr	r1, [pc, #12]	@ (8005b0c <_sbrk+0x18>)
 8005afe:	6011      	str	r1, [r2, #0]
 8005b00:	6810      	ldr	r0, [r2, #0]
 8005b02:	4403      	add	r3, r0
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	4770      	bx	lr
 8005b08:	2000039c 	.word	0x2000039c
 8005b0c:	200003a0 	.word	0x200003a0

08005b10 <_write>:
 8005b10:	2258      	movs	r2, #88	@ 0x58
 8005b12:	4b02      	ldr	r3, [pc, #8]	@ (8005b1c <_write+0xc>)
 8005b14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	4770      	bx	lr
 8005b1c:	20000398 	.word	0x20000398

08005b20 <_exit>:
 8005b20:	e7fe      	b.n	8005b20 <_exit>
	...

08005b24 <_init>:
 8005b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b26:	bf00      	nop
 8005b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2a:	bc08      	pop	{r3}
 8005b2c:	469e      	mov	lr, r3
 8005b2e:	4770      	bx	lr

08005b30 <_fini>:
 8005b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b32:	bf00      	nop
 8005b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b36:	bc08      	pop	{r3}
 8005b38:	469e      	mov	lr, r3
 8005b3a:	4770      	bx	lr
