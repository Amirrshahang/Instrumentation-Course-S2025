
q4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bb4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002cc4  08002cc4  00003cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d20  08002d20  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002d20  08002d20  0000405c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002d20  08002d20  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d20  08002d20  00003d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d24  08002d24  00003d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002d28  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  2000005c  08002d84  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08002d84  00004218  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007127  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017a3  00000000  00000000  0000b1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0000c950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000071f  00000000  00000000  0000d2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013df4  00000000  00000000  0000d9e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000092ba  00000000  00000000  000217db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006cfd1  00000000  00000000  0002aa95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00097a66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c5c  00000000  00000000  00097aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0009a708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	08002cac 	.word	0x08002cac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	08002cac 	.word	0x08002cac

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000940:	4b2d      	ldr	r3, [pc, #180]	@ (80009f8 <MX_GPIO_Init+0xcc>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a2c      	ldr	r2, [pc, #176]	@ (80009f8 <MX_GPIO_Init+0xcc>)
 8000946:	f043 0320 	orr.w	r3, r3, #32
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b2a      	ldr	r3, [pc, #168]	@ (80009f8 <MX_GPIO_Init+0xcc>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0320 	and.w	r3, r3, #32
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	4b27      	ldr	r3, [pc, #156]	@ (80009f8 <MX_GPIO_Init+0xcc>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a26      	ldr	r2, [pc, #152]	@ (80009f8 <MX_GPIO_Init+0xcc>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b24      	ldr	r3, [pc, #144]	@ (80009f8 <MX_GPIO_Init+0xcc>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000970:	4b21      	ldr	r3, [pc, #132]	@ (80009f8 <MX_GPIO_Init+0xcc>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a20      	ldr	r2, [pc, #128]	@ (80009f8 <MX_GPIO_Init+0xcc>)
 8000976:	f043 0308 	orr.w	r3, r3, #8
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b1e      	ldr	r3, [pc, #120]	@ (80009f8 <MX_GPIO_Init+0xcc>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0308 	and.w	r3, r3, #8
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2102      	movs	r1, #2
 800098c:	481b      	ldr	r0, [pc, #108]	@ (80009fc <MX_GPIO_Init+0xd0>)
 800098e:	f000 fe98 	bl	80016c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8000992:	2200      	movs	r2, #0
 8000994:	f643 4106 	movw	r1, #15366	@ 0x3c06
 8000998:	4819      	ldr	r0, [pc, #100]	@ (8000a00 <MX_GPIO_Init+0xd4>)
 800099a:	f000 fe92 	bl	80016c2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800099e:	2302      	movs	r3, #2
 80009a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	4619      	mov	r1, r3
 80009b4:	4811      	ldr	r0, [pc, #68]	@ (80009fc <MX_GPIO_Init+0xd0>)
 80009b6:	f000 fcf1 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009ba:	2304      	movs	r3, #4
 80009bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 0310 	add.w	r3, r7, #16
 80009ca:	4619      	mov	r1, r3
 80009cc:	480b      	ldr	r0, [pc, #44]	@ (80009fc <MX_GPIO_Init+0xd0>)
 80009ce:	f000 fce5 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80009d2:	f643 4306 	movw	r3, #15366	@ 0x3c06
 80009d6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	4619      	mov	r1, r3
 80009ea:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <MX_GPIO_Init+0xd4>)
 80009ec:	f000 fcd6 	bl	800139c <HAL_GPIO_Init>

}
 80009f0:	bf00      	nop
 80009f2:	3720      	adds	r7, #32
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40010800 	.word	0x40010800
 8000a00:	40010c00 	.word	0x40010c00

08000a04 <LCD_Delay>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void LCD_Delay(uint32_t t) {
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < t * 10; i++) __NOP();
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	e003      	b.n	8000a1a <LCD_Delay+0x16>
 8000a12:	bf00      	nop
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	3301      	adds	r3, #1
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	4413      	add	r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	461a      	mov	r2, r3
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d3f2      	bcc.n	8000a12 <LCD_Delay+0xe>
}
 8000a2c:	bf00      	nop
 8000a2e:	bf00      	nop
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <LCD_EnablePulse>:

// LCD functions
void LCD_EnablePulse(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_Port, EN_Pin, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2104      	movs	r1, #4
 8000a40:	4807      	ldr	r0, [pc, #28]	@ (8000a60 <LCD_EnablePulse+0x28>)
 8000a42:	f000 fe3e 	bl	80016c2 <HAL_GPIO_WritePin>
    LCD_Delay(2);
 8000a46:	2002      	movs	r0, #2
 8000a48:	f7ff ffdc 	bl	8000a04 <LCD_Delay>
    HAL_GPIO_WritePin(LCD_Port, EN_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2104      	movs	r1, #4
 8000a50:	4803      	ldr	r0, [pc, #12]	@ (8000a60 <LCD_EnablePulse+0x28>)
 8000a52:	f000 fe36 	bl	80016c2 <HAL_GPIO_WritePin>
    LCD_Delay(2);
 8000a56:	2002      	movs	r0, #2
 8000a58:	f7ff ffd4 	bl	8000a04 <LCD_Delay>
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40010c00 	.word	0x40010c00

08000a64 <LCD_Send4Bits>:
void LCD_Send4Bits(uint8_t data) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_Port, D4_Pin, (data >> 0) & 1);
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	461a      	mov	r2, r3
 8000a78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a7c:	4816      	ldr	r0, [pc, #88]	@ (8000ad8 <LCD_Send4Bits+0x74>)
 8000a7e:	f000 fe20 	bl	80016c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Port, D5_Pin, (data >> 1) & 1);
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	085b      	lsrs	r3, r3, #1
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	461a      	mov	r2, r3
 8000a90:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a94:	4810      	ldr	r0, [pc, #64]	@ (8000ad8 <LCD_Send4Bits+0x74>)
 8000a96:	f000 fe14 	bl	80016c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Port, D6_Pin, (data >> 2) & 1);
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	089b      	lsrs	r3, r3, #2
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aac:	480a      	ldr	r0, [pc, #40]	@ (8000ad8 <LCD_Send4Bits+0x74>)
 8000aae:	f000 fe08 	bl	80016c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Port, D7_Pin, (data >> 3) & 1);
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	08db      	lsrs	r3, r3, #3
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	461a      	mov	r2, r3
 8000ac0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ac4:	4804      	ldr	r0, [pc, #16]	@ (8000ad8 <LCD_Send4Bits+0x74>)
 8000ac6:	f000 fdfc 	bl	80016c2 <HAL_GPIO_WritePin>
    LCD_EnablePulse();
 8000aca:	f7ff ffb5 	bl	8000a38 <LCD_EnablePulse>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40010c00 	.word	0x40010c00

08000adc <LCD_SendCommand>:
void LCD_SendCommand(uint8_t cmd) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_Port, RS_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2102      	movs	r1, #2
 8000aea:	480b      	ldr	r0, [pc, #44]	@ (8000b18 <LCD_SendCommand+0x3c>)
 8000aec:	f000 fde9 	bl	80016c2 <HAL_GPIO_WritePin>
    LCD_Send4Bits(cmd >> 4);
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	091b      	lsrs	r3, r3, #4
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ffb4 	bl	8000a64 <LCD_Send4Bits>
    LCD_Send4Bits(cmd & 0x0F);
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	f003 030f 	and.w	r3, r3, #15
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ffad 	bl	8000a64 <LCD_Send4Bits>
    LCD_Delay(5);
 8000b0a:	2005      	movs	r0, #5
 8000b0c:	f7ff ff7a 	bl	8000a04 <LCD_Delay>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40010c00 	.word	0x40010c00

08000b1c <LCD_SendData>:
void LCD_SendData(uint8_t data) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_Port, RS_Pin, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2102      	movs	r1, #2
 8000b2a:	480b      	ldr	r0, [pc, #44]	@ (8000b58 <LCD_SendData+0x3c>)
 8000b2c:	f000 fdc9 	bl	80016c2 <HAL_GPIO_WritePin>
    LCD_Send4Bits(data >> 4);
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	091b      	lsrs	r3, r3, #4
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ff94 	bl	8000a64 <LCD_Send4Bits>
    LCD_Send4Bits(data & 0x0F);
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	f003 030f 	and.w	r3, r3, #15
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff8d 	bl	8000a64 <LCD_Send4Bits>
    LCD_Delay(5);
 8000b4a:	2005      	movs	r0, #5
 8000b4c:	f7ff ff5a 	bl	8000a04 <LCD_Delay>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40010c00 	.word	0x40010c00

08000b5c <LCD_SendString>:
void LCD_SendString(char* str) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
    while (*str) LCD_SendData(*str++);
 8000b64:	e006      	b.n	8000b74 <LCD_SendString+0x18>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	1c5a      	adds	r2, r3, #1
 8000b6a:	607a      	str	r2, [r7, #4]
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ffd4 	bl	8000b1c <LCD_SendData>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d1f4      	bne.n	8000b66 <LCD_SendString+0xa>
}
 8000b7c:	bf00      	nop
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <LCD_SetCursor>:
void LCD_SetCursor(uint8_t row, uint8_t col) {
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b084      	sub	sp, #16
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	460a      	mov	r2, r1
 8000b90:	71fb      	strb	r3, [r7, #7]
 8000b92:	4613      	mov	r3, r2
 8000b94:	71bb      	strb	r3, [r7, #6]
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d103      	bne.n	8000ba4 <LCD_SetCursor+0x1e>
 8000b9c:	79bb      	ldrb	r3, [r7, #6]
 8000b9e:	3b80      	subs	r3, #128	@ 0x80
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	e002      	b.n	8000baa <LCD_SetCursor+0x24>
 8000ba4:	79bb      	ldrb	r3, [r7, #6]
 8000ba6:	3b40      	subs	r3, #64	@ 0x40
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	73fb      	strb	r3, [r7, #15]
    LCD_SendCommand(pos);
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ff94 	bl	8000adc <LCD_SendCommand>
}
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <LCD_Clear>:
void LCD_Clear(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x01);
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f7ff ff8b 	bl	8000adc <LCD_SendCommand>
    LCD_Delay(2);
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f7ff ff1c 	bl	8000a04 <LCD_Delay>
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <LCD_Init>:
void LCD_Init(void) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
    LCD_Delay(500);
 8000bd4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bd8:	f7ff ff14 	bl	8000a04 <LCD_Delay>
    LCD_Send4Bits(0x03); LCD_Delay(50);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f7ff ff41 	bl	8000a64 <LCD_Send4Bits>
 8000be2:	2032      	movs	r0, #50	@ 0x32
 8000be4:	f7ff ff0e 	bl	8000a04 <LCD_Delay>
    LCD_Send4Bits(0x03); LCD_Delay(50);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f7ff ff3b 	bl	8000a64 <LCD_Send4Bits>
 8000bee:	2032      	movs	r0, #50	@ 0x32
 8000bf0:	f7ff ff08 	bl	8000a04 <LCD_Delay>
    LCD_Send4Bits(0x03); LCD_Delay(50);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f7ff ff35 	bl	8000a64 <LCD_Send4Bits>
 8000bfa:	2032      	movs	r0, #50	@ 0x32
 8000bfc:	f7ff ff02 	bl	8000a04 <LCD_Delay>
    LCD_Send4Bits(0x02);
 8000c00:	2002      	movs	r0, #2
 8000c02:	f7ff ff2f 	bl	8000a64 <LCD_Send4Bits>
    LCD_SendCommand(0x28);
 8000c06:	2028      	movs	r0, #40	@ 0x28
 8000c08:	f7ff ff68 	bl	8000adc <LCD_SendCommand>
    LCD_SendCommand(0x0C);
 8000c0c:	200c      	movs	r0, #12
 8000c0e:	f7ff ff65 	bl	8000adc <LCD_SendCommand>
    LCD_SendCommand(0x06);
 8000c12:	2006      	movs	r0, #6
 8000c14:	f7ff ff62 	bl	8000adc <LCD_SendCommand>
    LCD_SendCommand(0x01);
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f7ff ff5f 	bl	8000adc <LCD_SendCommand>
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	0000      	movs	r0, r0
 8000c24:	0000      	movs	r0, r0
	...

08000c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c2e:	f000 fa4b 	bl	80010c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c32:	f000 f8a7 	bl	8000d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c36:	f7ff fe79 	bl	800092c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000c3a:	f000 f9b1 	bl	8000fa0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000c3e:	484a      	ldr	r0, [pc, #296]	@ (8000d68 <main+0x140>)
 8000c40:	f001 f96b 	bl	8001f1a <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2102      	movs	r1, #2
 8000c48:	4848      	ldr	r0, [pc, #288]	@ (8000d6c <main+0x144>)
 8000c4a:	f000 fd3a 	bl	80016c2 <HAL_GPIO_WritePin>
  LCD_Init();
 8000c4e:	f7ff ffbf 	bl	8000bd0 <LCD_Init>
  LCD_Clear();
 8000c52:	f7ff ffb3 	bl	8000bbc <LCD_Clear>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000c56:	2201      	movs	r2, #1
 8000c58:	2102      	movs	r1, #2
 8000c5a:	4844      	ldr	r0, [pc, #272]	@ (8000d6c <main+0x144>)
 8000c5c:	f000 fd31 	bl	80016c2 <HAL_GPIO_WritePin>
	     __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000c60:	4b41      	ldr	r3, [pc, #260]	@ (8000d68 <main+0x140>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2200      	movs	r2, #0
 8000c66:	625a      	str	r2, [r3, #36]	@ 0x24
	     while (__HAL_TIM_GET_COUNTER(&htim1) < 10);
 8000c68:	bf00      	nop
 8000c6a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d68 <main+0x140>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c70:	2b09      	cmp	r3, #9
 8000c72:	d9fa      	bls.n	8000c6a <main+0x42>
	     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2102      	movs	r1, #2
 8000c78:	483c      	ldr	r0, [pc, #240]	@ (8000d6c <main+0x144>)
 8000c7a:	f000 fd22 	bl	80016c2 <HAL_GPIO_WritePin>

	     pMillis = HAL_GetTick();
 8000c7e:	f000 fa7b 	bl	8001178 <HAL_GetTick>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4a3a      	ldr	r2, [pc, #232]	@ (8000d70 <main+0x148>)
 8000c86:	6013      	str	r3, [r2, #0]
	     while ((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_RESET) && (pMillis + 10 > HAL_GetTick()));
 8000c88:	bf00      	nop
 8000c8a:	2104      	movs	r1, #4
 8000c8c:	4837      	ldr	r0, [pc, #220]	@ (8000d6c <main+0x144>)
 8000c8e:	f000 fd01 	bl	8001694 <HAL_GPIO_ReadPin>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d108      	bne.n	8000caa <main+0x82>
 8000c98:	4b35      	ldr	r3, [pc, #212]	@ (8000d70 <main+0x148>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f103 040a 	add.w	r4, r3, #10
 8000ca0:	f000 fa6a 	bl	8001178 <HAL_GetTick>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	429c      	cmp	r4, r3
 8000ca8:	d8ef      	bhi.n	8000c8a <main+0x62>

	     Value1 = __HAL_TIM_GET_COUNTER(&htim1);
 8000caa:	4b2f      	ldr	r3, [pc, #188]	@ (8000d68 <main+0x140>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cb0:	4a30      	ldr	r2, [pc, #192]	@ (8000d74 <main+0x14c>)
 8000cb2:	6013      	str	r3, [r2, #0]

	     pMillis = HAL_GetTick();
 8000cb4:	f000 fa60 	bl	8001178 <HAL_GetTick>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	4a2d      	ldr	r2, [pc, #180]	@ (8000d70 <main+0x148>)
 8000cbc:	6013      	str	r3, [r2, #0]
	     while ((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET) && (pMillis + 50 > HAL_GetTick()));
 8000cbe:	bf00      	nop
 8000cc0:	2104      	movs	r1, #4
 8000cc2:	482a      	ldr	r0, [pc, #168]	@ (8000d6c <main+0x144>)
 8000cc4:	f000 fce6 	bl	8001694 <HAL_GPIO_ReadPin>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d108      	bne.n	8000ce0 <main+0xb8>
 8000cce:	4b28      	ldr	r3, [pc, #160]	@ (8000d70 <main+0x148>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8000cd6:	f000 fa4f 	bl	8001178 <HAL_GetTick>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	429c      	cmp	r4, r3
 8000cde:	d8ef      	bhi.n	8000cc0 <main+0x98>

	     Value2 = __HAL_TIM_GET_COUNTER(&htim1);
 8000ce0:	4b21      	ldr	r3, [pc, #132]	@ (8000d68 <main+0x140>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ce6:	4a24      	ldr	r2, [pc, #144]	@ (8000d78 <main+0x150>)
 8000ce8:	6013      	str	r3, [r2, #0]

	        Distance = (Value2 - Value1) * 0.034 / 2;
 8000cea:	4b23      	ldr	r3, [pc, #140]	@ (8000d78 <main+0x150>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4b21      	ldr	r3, [pc, #132]	@ (8000d74 <main+0x14c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fb6d 	bl	80003d4 <__aeabi_ui2d>
 8000cfa:	a319      	add	r3, pc, #100	@ (adr r3, 8000d60 <main+0x138>)
 8000cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d00:	f7ff fbe2 	bl	80004c8 <__aeabi_dmul>
 8000d04:	4602      	mov	r2, r0
 8000d06:	460b      	mov	r3, r1
 8000d08:	4610      	mov	r0, r2
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f04f 0200 	mov.w	r2, #0
 8000d10:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d14:	f7ff fd02 	bl	800071c <__aeabi_ddiv>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4610      	mov	r0, r2
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f7ff fde4 	bl	80008ec <__aeabi_d2uiz>
 8000d24:	4603      	mov	r3, r0
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	4b14      	ldr	r3, [pc, #80]	@ (8000d7c <main+0x154>)
 8000d2a:	801a      	strh	r2, [r3, #0]

	         LCD_Clear();
 8000d2c:	f7ff ff46 	bl	8000bbc <LCD_Clear>
	         LCD_SetCursor(0, 0);
 8000d30:	2100      	movs	r1, #0
 8000d32:	2000      	movs	r0, #0
 8000d34:	f7ff ff27 	bl	8000b86 <LCD_SetCursor>
	         sprintf(buffer,"%3d cm", Distance);
 8000d38:	4b10      	ldr	r3, [pc, #64]	@ (8000d7c <main+0x154>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	463b      	mov	r3, r7
 8000d40:	490f      	ldr	r1, [pc, #60]	@ (8000d80 <main+0x158>)
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 fb02 	bl	800234c <siprintf>
	         LCD_SendString(buffer);
 8000d48:	463b      	mov	r3, r7
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff06 	bl	8000b5c <LCD_SendString>

	         HAL_Delay(500);
 8000d50:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d54:	f000 fa1a 	bl	800118c <HAL_Delay>
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000d58:	e77d      	b.n	8000c56 <main+0x2e>
 8000d5a:	bf00      	nop
 8000d5c:	f3af 8000 	nop.w
 8000d60:	b020c49c 	.word	0xb020c49c
 8000d64:	3fa16872 	.word	0x3fa16872
 8000d68:	2000008c 	.word	0x2000008c
 8000d6c:	40010800 	.word	0x40010800
 8000d70:	20000078 	.word	0x20000078
 8000d74:	2000007c 	.word	0x2000007c
 8000d78:	20000080 	.word	0x20000080
 8000d7c:	20000084 	.word	0x20000084
 8000d80:	08002cc4 	.word	0x08002cc4

08000d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b090      	sub	sp, #64	@ 0x40
 8000d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8a:	f107 0318 	add.w	r3, r7, #24
 8000d8e:	2228      	movs	r2, #40	@ 0x28
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fafc 	bl	8002390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000daa:	2301      	movs	r3, #1
 8000dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dae:	2310      	movs	r3, #16
 8000db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db2:	2302      	movs	r3, #2
 8000db4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000db6:	2300      	movs	r3, #0
 8000db8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8000dba:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc0:	f107 0318 	add.w	r3, r7, #24
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 fc95 	bl	80016f4 <HAL_RCC_OscConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000dd0:	f000 f818 	bl	8000e04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000ddc:	2380      	movs	r3, #128	@ 0x80
 8000dde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2100      	movs	r1, #0
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 ff03 	bl	8001bf8 <HAL_RCC_ClockConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000df8:	f000 f804 	bl	8000e04 <Error_Handler>
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	3740      	adds	r7, #64	@ 0x40
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e08:	b672      	cpsid	i
}
 8000e0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <Error_Handler+0x8>

08000e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e16:	4b15      	ldr	r3, [pc, #84]	@ (8000e6c <HAL_MspInit+0x5c>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	4a14      	ldr	r2, [pc, #80]	@ (8000e6c <HAL_MspInit+0x5c>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6193      	str	r3, [r2, #24]
 8000e22:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <HAL_MspInit+0x5c>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <HAL_MspInit+0x5c>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	4a0e      	ldr	r2, [pc, #56]	@ (8000e6c <HAL_MspInit+0x5c>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e38:	61d3      	str	r3, [r2, #28]
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <HAL_MspInit+0x5c>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e46:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <HAL_MspInit+0x60>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	4a04      	ldr	r2, [pc, #16]	@ (8000e70 <HAL_MspInit+0x60>)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010000 	.word	0x40010000

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <NMI_Handler+0x4>

08000e7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <HardFault_Handler+0x4>

08000e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <MemManage_Handler+0x4>

08000e8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <BusFault_Handler+0x4>

08000e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <UsageFault_Handler+0x4>

08000e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec4:	f000 f946 	bl	8001154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed4:	4a14      	ldr	r2, [pc, #80]	@ (8000f28 <_sbrk+0x5c>)
 8000ed6:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <_sbrk+0x60>)
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee0:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d102      	bne.n	8000eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <_sbrk+0x64>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	@ (8000f34 <_sbrk+0x68>)
 8000eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eee:	4b10      	ldr	r3, [pc, #64]	@ (8000f30 <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d207      	bcs.n	8000f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000efc:	f001 fa50 	bl	80023a0 <__errno>
 8000f00:	4603      	mov	r3, r0
 8000f02:	220c      	movs	r2, #12
 8000f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f0a:	e009      	b.n	8000f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f0c:	4b08      	ldr	r3, [pc, #32]	@ (8000f30 <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f12:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	4a05      	ldr	r2, [pc, #20]	@ (8000f30 <_sbrk+0x64>)
 8000f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20002800 	.word	0x20002800
 8000f2c:	00000400 	.word	0x00000400
 8000f30:	20000088 	.word	0x20000088
 8000f34:	20000218 	.word	0x20000218

08000f38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <SystemInit+0x5c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a14      	ldr	r2, [pc, #80]	@ (8000f94 <SystemInit+0x5c>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <SystemInit+0x5c>)
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	4911      	ldr	r1, [pc, #68]	@ (8000f94 <SystemInit+0x5c>)
 8000f4e:	4b12      	ldr	r3, [pc, #72]	@ (8000f98 <SystemInit+0x60>)
 8000f50:	4013      	ands	r3, r2
 8000f52:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <SystemInit+0x5c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0e      	ldr	r2, [pc, #56]	@ (8000f94 <SystemInit+0x5c>)
 8000f5a:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8000f5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f62:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f64:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <SystemInit+0x5c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0a      	ldr	r2, [pc, #40]	@ (8000f94 <SystemInit+0x5c>)
 8000f6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f6e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000f70:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <SystemInit+0x5c>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	4a07      	ldr	r2, [pc, #28]	@ (8000f94 <SystemInit+0x5c>)
 8000f76:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8000f7a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000f7c:	4b05      	ldr	r3, [pc, #20]	@ (8000f94 <SystemInit+0x5c>)
 8000f7e:	f44f 021f 	mov.w	r2, #10420224	@ 0x9f0000
 8000f82:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000f84:	4b05      	ldr	r3, [pc, #20]	@ (8000f9c <SystemInit+0x64>)
 8000f86:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f8a:	609a      	str	r2, [r3, #8]
#endif 
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	40021000 	.word	0x40021000
 8000f98:	f8ff0000 	.word	0xf8ff0000
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001038 <MX_TIM1_Init+0x98>)
 8000fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800103c <MX_TIM1_Init+0x9c>)
 8000fc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001038 <MX_TIM1_Init+0x98>)
 8000fc4:	2247      	movs	r2, #71	@ 0x47
 8000fc6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001038 <MX_TIM1_Init+0x98>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <MX_TIM1_Init+0x98>)
 8000fd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fd4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd6:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <MX_TIM1_Init+0x98>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fdc:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <MX_TIM1_Init+0x98>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe2:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <MX_TIM1_Init+0x98>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fe8:	4813      	ldr	r0, [pc, #76]	@ (8001038 <MX_TIM1_Init+0x98>)
 8000fea:	f000 ff6b 	bl	8001ec4 <HAL_TIM_Base_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ff4:	f7ff ff06 	bl	8000e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ffc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	4619      	mov	r1, r3
 8001004:	480c      	ldr	r0, [pc, #48]	@ (8001038 <MX_TIM1_Init+0x98>)
 8001006:	f000 ffab 	bl	8001f60 <HAL_TIM_ConfigClockSource>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001010:	f7ff fef8 	bl	8000e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001014:	2300      	movs	r3, #0
 8001016:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800101c:	463b      	mov	r3, r7
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	@ (8001038 <MX_TIM1_Init+0x98>)
 8001022:	f001 f94f 	bl	80022c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800102c:	f7ff feea 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000008c 	.word	0x2000008c
 800103c:	40012c00 	.word	0x40012c00

08001040 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a09      	ldr	r2, [pc, #36]	@ (8001074 <HAL_TIM_Base_MspInit+0x34>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d10b      	bne.n	800106a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <HAL_TIM_Base_MspInit+0x38>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	4a08      	ldr	r2, [pc, #32]	@ (8001078 <HAL_TIM_Base_MspInit+0x38>)
 8001058:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800105c:	6193      	str	r3, [r2, #24]
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <HAL_TIM_Base_MspInit+0x38>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800106a:	bf00      	nop
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	40012c00 	.word	0x40012c00
 8001078:	40021000 	.word	0x40021000

0800107c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800107c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800107e:	e003      	b.n	8001088 <LoopCopyDataInit>

08001080 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001080:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001082:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001084:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001086:	3104      	adds	r1, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001088:	480a      	ldr	r0, [pc, #40]	@ (80010b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800108a:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800108c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800108e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001090:	d3f6      	bcc.n	8001080 <CopyDataInit>
  ldr r2, =_sbss
 8001092:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001094:	e002      	b.n	800109c <LoopFillZerobss>

08001096 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001098:	f842 3b04 	str.w	r3, [r2], #4

0800109c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800109c:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800109e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80010a0:	d3f9      	bcc.n	8001096 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010a2:	f7ff ff49 	bl	8000f38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010a6:	f001 f981 	bl	80023ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010aa:	f7ff fdbd 	bl	8000c28 <main>
  bx lr
 80010ae:	4770      	bx	lr
  ldr r3, =_sidata
 80010b0:	08002d28 	.word	0x08002d28
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80010b8:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 80010bc:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 80010c0:	20000218 	.word	0x20000218

080010c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC1_2_IRQHandler>
	...

080010c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010cc:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <HAL_Init+0x28>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a07      	ldr	r2, [pc, #28]	@ (80010f0 <HAL_Init+0x28>)
 80010d2:	f043 0310 	orr.w	r3, r3, #16
 80010d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d8:	2003      	movs	r0, #3
 80010da:	f000 f92b 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010de:	200f      	movs	r0, #15
 80010e0:	f000 f808 	bl	80010f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e4:	f7ff fe94 	bl	8000e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40022000 	.word	0x40022000

080010f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010fc:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <HAL_InitTick+0x54>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b12      	ldr	r3, [pc, #72]	@ (800114c <HAL_InitTick+0x58>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800110a:	fbb3 f3f1 	udiv	r3, r3, r1
 800110e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f935 	bl	8001382 <HAL_SYSTICK_Config>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e00e      	b.n	8001140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b0f      	cmp	r3, #15
 8001126:	d80a      	bhi.n	800113e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001128:	2200      	movs	r2, #0
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001130:	f000 f90b 	bl	800134a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001134:	4a06      	ldr	r2, [pc, #24]	@ (8001150 <HAL_InitTick+0x5c>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	e000      	b.n	8001140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000000 	.word	0x20000000
 800114c:	20000008 	.word	0x20000008
 8001150:	20000004 	.word	0x20000004

08001154 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001158:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <HAL_IncTick+0x1c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <HAL_IncTick+0x20>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4413      	add	r3, r2
 8001164:	4a03      	ldr	r2, [pc, #12]	@ (8001174 <HAL_IncTick+0x20>)
 8001166:	6013      	str	r3, [r2, #0]
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	20000008 	.word	0x20000008
 8001174:	200000cc 	.word	0x200000cc

08001178 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;
 800117c:	4b02      	ldr	r3, [pc, #8]	@ (8001188 <HAL_GetTick+0x10>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	200000cc 	.word	0x200000cc

0800118c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001194:	f7ff fff0 	bl	8001178 <HAL_GetTick>
 8001198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011a4:	d005      	beq.n	80011b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a6:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <HAL_Delay+0x44>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4413      	add	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011b2:	bf00      	nop
 80011b4:	f7ff ffe0 	bl	8001178 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d8f7      	bhi.n	80011b4 <HAL_Delay+0x28>
  {
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000008 	.word	0x20000008

080011d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011f0:	4013      	ands	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001206:	4a04      	ldr	r2, [pc, #16]	@ (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	60d3      	str	r3, [r2, #12]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001220:	4b04      	ldr	r3, [pc, #16]	@ (8001234 <__NVIC_GetPriorityGrouping+0x18>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	f003 0307 	and.w	r3, r3, #7
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	2b00      	cmp	r3, #0
 800124a:	db0a      	blt.n	8001262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	b2da      	uxtb	r2, r3
 8001250:	490c      	ldr	r1, [pc, #48]	@ (8001284 <__NVIC_SetPriority+0x4c>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	0112      	lsls	r2, r2, #4
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	440b      	add	r3, r1
 800125c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001260:	e00a      	b.n	8001278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4908      	ldr	r1, [pc, #32]	@ (8001288 <__NVIC_SetPriority+0x50>)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	3b04      	subs	r3, #4
 8001270:	0112      	lsls	r2, r2, #4
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	440b      	add	r3, r1
 8001276:	761a      	strb	r2, [r3, #24]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000e100 	.word	0xe000e100
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	@ 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f1c3 0307 	rsb	r3, r3, #7
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	bf28      	it	cs
 80012aa:	2304      	movcs	r3, #4
 80012ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3304      	adds	r3, #4
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	d902      	bls.n	80012bc <NVIC_EncodePriority+0x30>
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3b03      	subs	r3, #3
 80012ba:	e000      	b.n	80012be <NVIC_EncodePriority+0x32>
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43da      	mvns	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	401a      	ands	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	43d9      	mvns	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	4313      	orrs	r3, r2
         );
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3724      	adds	r7, #36	@ 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	@ (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001314:	f7ff ff90 	bl	8001238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	@ (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff49 	bl	80011d4 <__NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800135c:	f7ff ff5e 	bl	800121c <__NVIC_GetPriorityGrouping>
 8001360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f7ff ff90 	bl	800128c <NVIC_EncodePriority>
 800136c:	4602      	mov	r2, r0
 800136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff5f 	bl	8001238 <__NVIC_SetPriority>
}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffb0 	bl	80012f0 <SysTick_Config>
 8001390:	4603      	mov	r3, r0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800139c:	b480      	push	{r7}
 800139e:	b08b      	sub	sp, #44	@ 0x2c
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013aa:	2300      	movs	r3, #0
 80013ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ae:	e161      	b.n	8001674 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013b0:	2201      	movs	r2, #1
 80013b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	f040 8150 	bne.w	800166e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4a97      	ldr	r2, [pc, #604]	@ (8001630 <HAL_GPIO_Init+0x294>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d05e      	beq.n	8001496 <HAL_GPIO_Init+0xfa>
 80013d8:	4a95      	ldr	r2, [pc, #596]	@ (8001630 <HAL_GPIO_Init+0x294>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d875      	bhi.n	80014ca <HAL_GPIO_Init+0x12e>
 80013de:	4a95      	ldr	r2, [pc, #596]	@ (8001634 <HAL_GPIO_Init+0x298>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d058      	beq.n	8001496 <HAL_GPIO_Init+0xfa>
 80013e4:	4a93      	ldr	r2, [pc, #588]	@ (8001634 <HAL_GPIO_Init+0x298>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d86f      	bhi.n	80014ca <HAL_GPIO_Init+0x12e>
 80013ea:	4a93      	ldr	r2, [pc, #588]	@ (8001638 <HAL_GPIO_Init+0x29c>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d052      	beq.n	8001496 <HAL_GPIO_Init+0xfa>
 80013f0:	4a91      	ldr	r2, [pc, #580]	@ (8001638 <HAL_GPIO_Init+0x29c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d869      	bhi.n	80014ca <HAL_GPIO_Init+0x12e>
 80013f6:	4a91      	ldr	r2, [pc, #580]	@ (800163c <HAL_GPIO_Init+0x2a0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d04c      	beq.n	8001496 <HAL_GPIO_Init+0xfa>
 80013fc:	4a8f      	ldr	r2, [pc, #572]	@ (800163c <HAL_GPIO_Init+0x2a0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d863      	bhi.n	80014ca <HAL_GPIO_Init+0x12e>
 8001402:	4a8f      	ldr	r2, [pc, #572]	@ (8001640 <HAL_GPIO_Init+0x2a4>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d046      	beq.n	8001496 <HAL_GPIO_Init+0xfa>
 8001408:	4a8d      	ldr	r2, [pc, #564]	@ (8001640 <HAL_GPIO_Init+0x2a4>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d85d      	bhi.n	80014ca <HAL_GPIO_Init+0x12e>
 800140e:	2b12      	cmp	r3, #18
 8001410:	d82a      	bhi.n	8001468 <HAL_GPIO_Init+0xcc>
 8001412:	2b12      	cmp	r3, #18
 8001414:	d859      	bhi.n	80014ca <HAL_GPIO_Init+0x12e>
 8001416:	a201      	add	r2, pc, #4	@ (adr r2, 800141c <HAL_GPIO_Init+0x80>)
 8001418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141c:	08001497 	.word	0x08001497
 8001420:	08001471 	.word	0x08001471
 8001424:	08001483 	.word	0x08001483
 8001428:	080014c5 	.word	0x080014c5
 800142c:	080014cb 	.word	0x080014cb
 8001430:	080014cb 	.word	0x080014cb
 8001434:	080014cb 	.word	0x080014cb
 8001438:	080014cb 	.word	0x080014cb
 800143c:	080014cb 	.word	0x080014cb
 8001440:	080014cb 	.word	0x080014cb
 8001444:	080014cb 	.word	0x080014cb
 8001448:	080014cb 	.word	0x080014cb
 800144c:	080014cb 	.word	0x080014cb
 8001450:	080014cb 	.word	0x080014cb
 8001454:	080014cb 	.word	0x080014cb
 8001458:	080014cb 	.word	0x080014cb
 800145c:	080014cb 	.word	0x080014cb
 8001460:	08001479 	.word	0x08001479
 8001464:	0800148d 	.word	0x0800148d
 8001468:	4a76      	ldr	r2, [pc, #472]	@ (8001644 <HAL_GPIO_Init+0x2a8>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d013      	beq.n	8001496 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800146e:	e02c      	b.n	80014ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	623b      	str	r3, [r7, #32]
          break;
 8001476:	e029      	b.n	80014cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	3304      	adds	r3, #4
 800147e:	623b      	str	r3, [r7, #32]
          break;
 8001480:	e024      	b.n	80014cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	3308      	adds	r3, #8
 8001488:	623b      	str	r3, [r7, #32]
          break;
 800148a:	e01f      	b.n	80014cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	330c      	adds	r3, #12
 8001492:	623b      	str	r3, [r7, #32]
          break;
 8001494:	e01a      	b.n	80014cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d102      	bne.n	80014a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800149e:	2304      	movs	r3, #4
 80014a0:	623b      	str	r3, [r7, #32]
          break;
 80014a2:	e013      	b.n	80014cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d105      	bne.n	80014b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014ac:	2308      	movs	r3, #8
 80014ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69fa      	ldr	r2, [r7, #28]
 80014b4:	611a      	str	r2, [r3, #16]
          break;
 80014b6:	e009      	b.n	80014cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014b8:	2308      	movs	r3, #8
 80014ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	615a      	str	r2, [r3, #20]
          break;
 80014c2:	e003      	b.n	80014cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
          break;
 80014c8:	e000      	b.n	80014cc <HAL_GPIO_Init+0x130>
          break;
 80014ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	2bff      	cmp	r3, #255	@ 0xff
 80014d0:	d801      	bhi.n	80014d6 <HAL_GPIO_Init+0x13a>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	e001      	b.n	80014da <HAL_GPIO_Init+0x13e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3304      	adds	r3, #4
 80014da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	2bff      	cmp	r3, #255	@ 0xff
 80014e0:	d802      	bhi.n	80014e8 <HAL_GPIO_Init+0x14c>
 80014e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	e002      	b.n	80014ee <HAL_GPIO_Init+0x152>
 80014e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ea:	3b08      	subs	r3, #8
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	210f      	movs	r1, #15
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	fa01 f303 	lsl.w	r3, r1, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	401a      	ands	r2, r3
 8001500:	6a39      	ldr	r1, [r7, #32]
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	fa01 f303 	lsl.w	r3, r1, r3
 8001508:	431a      	orrs	r2, r3
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 80a9 	beq.w	800166e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800151c:	4b4a      	ldr	r3, [pc, #296]	@ (8001648 <HAL_GPIO_Init+0x2ac>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a49      	ldr	r2, [pc, #292]	@ (8001648 <HAL_GPIO_Init+0x2ac>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b47      	ldr	r3, [pc, #284]	@ (8001648 <HAL_GPIO_Init+0x2ac>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001534:	4a45      	ldr	r2, [pc, #276]	@ (800164c <HAL_GPIO_Init+0x2b0>)
 8001536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	3302      	adds	r3, #2
 800153c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001540:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	220f      	movs	r2, #15
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	4013      	ands	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a3d      	ldr	r2, [pc, #244]	@ (8001650 <HAL_GPIO_Init+0x2b4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d00d      	beq.n	800157c <HAL_GPIO_Init+0x1e0>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a3c      	ldr	r2, [pc, #240]	@ (8001654 <HAL_GPIO_Init+0x2b8>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d007      	beq.n	8001578 <HAL_GPIO_Init+0x1dc>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a3b      	ldr	r2, [pc, #236]	@ (8001658 <HAL_GPIO_Init+0x2bc>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d101      	bne.n	8001574 <HAL_GPIO_Init+0x1d8>
 8001570:	2302      	movs	r3, #2
 8001572:	e004      	b.n	800157e <HAL_GPIO_Init+0x1e2>
 8001574:	2303      	movs	r3, #3
 8001576:	e002      	b.n	800157e <HAL_GPIO_Init+0x1e2>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <HAL_GPIO_Init+0x1e2>
 800157c:	2300      	movs	r3, #0
 800157e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001580:	f002 0203 	and.w	r2, r2, #3
 8001584:	0092      	lsls	r2, r2, #2
 8001586:	4093      	lsls	r3, r2
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	4313      	orrs	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800158e:	492f      	ldr	r1, [pc, #188]	@ (800164c <HAL_GPIO_Init+0x2b0>)
 8001590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	3302      	adds	r3, #2
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d006      	beq.n	80015b6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015a8:	4b2c      	ldr	r3, [pc, #176]	@ (800165c <HAL_GPIO_Init+0x2c0>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	492b      	ldr	r1, [pc, #172]	@ (800165c <HAL_GPIO_Init+0x2c0>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]
 80015b4:	e006      	b.n	80015c4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015b6:	4b29      	ldr	r3, [pc, #164]	@ (800165c <HAL_GPIO_Init+0x2c0>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	43db      	mvns	r3, r3
 80015be:	4927      	ldr	r1, [pc, #156]	@ (800165c <HAL_GPIO_Init+0x2c0>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015d0:	4b22      	ldr	r3, [pc, #136]	@ (800165c <HAL_GPIO_Init+0x2c0>)
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	4921      	ldr	r1, [pc, #132]	@ (800165c <HAL_GPIO_Init+0x2c0>)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]
 80015dc:	e006      	b.n	80015ec <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015de:	4b1f      	ldr	r3, [pc, #124]	@ (800165c <HAL_GPIO_Init+0x2c0>)
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	491d      	ldr	r1, [pc, #116]	@ (800165c <HAL_GPIO_Init+0x2c0>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d006      	beq.n	8001606 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015f8:	4b18      	ldr	r3, [pc, #96]	@ (800165c <HAL_GPIO_Init+0x2c0>)
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	4917      	ldr	r1, [pc, #92]	@ (800165c <HAL_GPIO_Init+0x2c0>)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	608b      	str	r3, [r1, #8]
 8001604:	e006      	b.n	8001614 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001606:	4b15      	ldr	r3, [pc, #84]	@ (800165c <HAL_GPIO_Init+0x2c0>)
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	43db      	mvns	r3, r3
 800160e:	4913      	ldr	r1, [pc, #76]	@ (800165c <HAL_GPIO_Init+0x2c0>)
 8001610:	4013      	ands	r3, r2
 8001612:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d01f      	beq.n	8001660 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001620:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <HAL_GPIO_Init+0x2c0>)
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	490d      	ldr	r1, [pc, #52]	@ (800165c <HAL_GPIO_Init+0x2c0>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	60cb      	str	r3, [r1, #12]
 800162c:	e01f      	b.n	800166e <HAL_GPIO_Init+0x2d2>
 800162e:	bf00      	nop
 8001630:	10320000 	.word	0x10320000
 8001634:	10310000 	.word	0x10310000
 8001638:	10220000 	.word	0x10220000
 800163c:	10210000 	.word	0x10210000
 8001640:	10120000 	.word	0x10120000
 8001644:	10110000 	.word	0x10110000
 8001648:	40021000 	.word	0x40021000
 800164c:	40010000 	.word	0x40010000
 8001650:	40010800 	.word	0x40010800
 8001654:	40010c00 	.word	0x40010c00
 8001658:	40011000 	.word	0x40011000
 800165c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001660:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <HAL_GPIO_Init+0x2f4>)
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	43db      	mvns	r3, r3
 8001668:	4909      	ldr	r1, [pc, #36]	@ (8001690 <HAL_GPIO_Init+0x2f4>)
 800166a:	4013      	ands	r3, r2
 800166c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001670:	3301      	adds	r3, #1
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167a:	fa22 f303 	lsr.w	r3, r2, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	f47f ae96 	bne.w	80013b0 <HAL_GPIO_Init+0x14>
  }
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	372c      	adds	r7, #44	@ 0x2c
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	40010400 	.word	0x40010400

08001694 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	887b      	ldrh	r3, [r7, #2]
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016ac:	2301      	movs	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
 80016b0:	e001      	b.n	80016b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	460b      	mov	r3, r1
 80016cc:	807b      	strh	r3, [r7, #2]
 80016ce:	4613      	mov	r3, r2
 80016d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016d2:	787b      	ldrb	r3, [r7, #1]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016d8:	887a      	ldrh	r2, [r7, #2]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016de:	e003      	b.n	80016e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016e0:	887b      	ldrh	r3, [r7, #2]
 80016e2:	041a      	lsls	r2, r3, #16
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	611a      	str	r2, [r3, #16]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
	...

080016f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e272      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 8087 	beq.w	8001822 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001714:	4b92      	ldr	r3, [pc, #584]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 030c 	and.w	r3, r3, #12
 800171c:	2b04      	cmp	r3, #4
 800171e:	d00c      	beq.n	800173a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001720:	4b8f      	ldr	r3, [pc, #572]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	2b08      	cmp	r3, #8
 800172a:	d112      	bne.n	8001752 <HAL_RCC_OscConfig+0x5e>
 800172c:	4b8c      	ldr	r3, [pc, #560]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001738:	d10b      	bne.n	8001752 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173a:	4b89      	ldr	r3, [pc, #548]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d06c      	beq.n	8001820 <HAL_RCC_OscConfig+0x12c>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d168      	bne.n	8001820 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e24c      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800175a:	d106      	bne.n	800176a <HAL_RCC_OscConfig+0x76>
 800175c:	4b80      	ldr	r3, [pc, #512]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a7f      	ldr	r2, [pc, #508]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001762:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	e02e      	b.n	80017c8 <HAL_RCC_OscConfig+0xd4>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0x98>
 8001772:	4b7b      	ldr	r3, [pc, #492]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a7a      	ldr	r2, [pc, #488]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001778:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b78      	ldr	r3, [pc, #480]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a77      	ldr	r2, [pc, #476]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001784:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e01d      	b.n	80017c8 <HAL_RCC_OscConfig+0xd4>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0xbc>
 8001796:	4b72      	ldr	r3, [pc, #456]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a71      	ldr	r2, [pc, #452]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 800179c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4b6f      	ldr	r3, [pc, #444]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a6e      	ldr	r2, [pc, #440]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e00b      	b.n	80017c8 <HAL_RCC_OscConfig+0xd4>
 80017b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a6a      	ldr	r2, [pc, #424]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b68      	ldr	r3, [pc, #416]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a67      	ldr	r2, [pc, #412]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 80017c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d013      	beq.n	80017f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff fcd2 	bl	8001178 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff fcce 	bl	8001178 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	@ 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e200      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0xe4>
 80017f6:	e014      	b.n	8001822 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff fcbe 	bl	8001178 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff fcba 	bl	8001178 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	@ 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e1ec      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001812:	4b53      	ldr	r3, [pc, #332]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x10c>
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d063      	beq.n	80018f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800182e:	4b4c      	ldr	r3, [pc, #304]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00b      	beq.n	8001852 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800183a:	4b49      	ldr	r3, [pc, #292]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b08      	cmp	r3, #8
 8001844:	d11c      	bne.n	8001880 <HAL_RCC_OscConfig+0x18c>
 8001846:	4b46      	ldr	r3, [pc, #280]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d116      	bne.n	8001880 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001852:	4b43      	ldr	r3, [pc, #268]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d005      	beq.n	800186a <HAL_RCC_OscConfig+0x176>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d001      	beq.n	800186a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e1c0      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186a:	4b3d      	ldr	r3, [pc, #244]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	4939      	ldr	r1, [pc, #228]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 800187a:	4313      	orrs	r3, r2
 800187c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187e:	e03a      	b.n	80018f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d020      	beq.n	80018ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001888:	4b36      	ldr	r3, [pc, #216]	@ (8001964 <HAL_RCC_OscConfig+0x270>)
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188e:	f7ff fc73 	bl	8001178 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001896:	f7ff fc6f 	bl	8001178 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e1a1      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4927      	ldr	r1, [pc, #156]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	600b      	str	r3, [r1, #0]
 80018c8:	e015      	b.n	80018f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ca:	4b26      	ldr	r3, [pc, #152]	@ (8001964 <HAL_RCC_OscConfig+0x270>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff fc52 	bl	8001178 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d8:	f7ff fc4e 	bl	8001178 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e180      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d03a      	beq.n	8001978 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d019      	beq.n	800193e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190a:	4b17      	ldr	r3, [pc, #92]	@ (8001968 <HAL_RCC_OscConfig+0x274>)
 800190c:	2201      	movs	r2, #1
 800190e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001910:	f7ff fc32 	bl	8001178 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001918:	f7ff fc2e 	bl	8001178 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e160      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192a:	4b0d      	ldr	r3, [pc, #52]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 800192c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001936:	2001      	movs	r0, #1
 8001938:	f000 faa6 	bl	8001e88 <RCC_Delay>
 800193c:	e01c      	b.n	8001978 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800193e:	4b0a      	ldr	r3, [pc, #40]	@ (8001968 <HAL_RCC_OscConfig+0x274>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001944:	f7ff fc18 	bl	8001178 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194a:	e00f      	b.n	800196c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194c:	f7ff fc14 	bl	8001178 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d908      	bls.n	800196c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e146      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000
 8001964:	42420000 	.word	0x42420000
 8001968:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196c:	4b92      	ldr	r3, [pc, #584]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 800196e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1e9      	bne.n	800194c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 80a6 	beq.w	8001ad2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198a:	4b8b      	ldr	r3, [pc, #556]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10d      	bne.n	80019b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	4b88      	ldr	r3, [pc, #544]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	4a87      	ldr	r2, [pc, #540]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a0:	61d3      	str	r3, [r2, #28]
 80019a2:	4b85      	ldr	r3, [pc, #532]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ae:	2301      	movs	r3, #1
 80019b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b2:	4b82      	ldr	r3, [pc, #520]	@ (8001bbc <HAL_RCC_OscConfig+0x4c8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d118      	bne.n	80019f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019be:	4b7f      	ldr	r3, [pc, #508]	@ (8001bbc <HAL_RCC_OscConfig+0x4c8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a7e      	ldr	r2, [pc, #504]	@ (8001bbc <HAL_RCC_OscConfig+0x4c8>)
 80019c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ca:	f7ff fbd5 	bl	8001178 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d2:	f7ff fbd1 	bl	8001178 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b64      	cmp	r3, #100	@ 0x64
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e103      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e4:	4b75      	ldr	r3, [pc, #468]	@ (8001bbc <HAL_RCC_OscConfig+0x4c8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d106      	bne.n	8001a06 <HAL_RCC_OscConfig+0x312>
 80019f8:	4b6f      	ldr	r3, [pc, #444]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	4a6e      	ldr	r2, [pc, #440]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6213      	str	r3, [r2, #32]
 8001a04:	e02d      	b.n	8001a62 <HAL_RCC_OscConfig+0x36e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x334>
 8001a0e:	4b6a      	ldr	r3, [pc, #424]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	4a69      	ldr	r2, [pc, #420]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	6213      	str	r3, [r2, #32]
 8001a1a:	4b67      	ldr	r3, [pc, #412]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	4a66      	ldr	r2, [pc, #408]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	f023 0304 	bic.w	r3, r3, #4
 8001a24:	6213      	str	r3, [r2, #32]
 8001a26:	e01c      	b.n	8001a62 <HAL_RCC_OscConfig+0x36e>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	2b05      	cmp	r3, #5
 8001a2e:	d10c      	bne.n	8001a4a <HAL_RCC_OscConfig+0x356>
 8001a30:	4b61      	ldr	r3, [pc, #388]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	4a60      	ldr	r2, [pc, #384]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	f043 0304 	orr.w	r3, r3, #4
 8001a3a:	6213      	str	r3, [r2, #32]
 8001a3c:	4b5e      	ldr	r3, [pc, #376]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4a5d      	ldr	r2, [pc, #372]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6213      	str	r3, [r2, #32]
 8001a48:	e00b      	b.n	8001a62 <HAL_RCC_OscConfig+0x36e>
 8001a4a:	4b5b      	ldr	r3, [pc, #364]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	4a5a      	ldr	r2, [pc, #360]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	f023 0301 	bic.w	r3, r3, #1
 8001a54:	6213      	str	r3, [r2, #32]
 8001a56:	4b58      	ldr	r3, [pc, #352]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	4a57      	ldr	r2, [pc, #348]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	f023 0304 	bic.w	r3, r3, #4
 8001a60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d015      	beq.n	8001a96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6a:	f7ff fb85 	bl	8001178 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a70:	e00a      	b.n	8001a88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a72:	f7ff fb81 	bl	8001178 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e0b1      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a88:	4b4b      	ldr	r3, [pc, #300]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0ee      	beq.n	8001a72 <HAL_RCC_OscConfig+0x37e>
 8001a94:	e014      	b.n	8001ac0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a96:	f7ff fb6f 	bl	8001178 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9c:	e00a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9e:	f7ff fb6b 	bl	8001178 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e09b      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab4:	4b40      	ldr	r3, [pc, #256]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1ee      	bne.n	8001a9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ac0:	7dfb      	ldrb	r3, [r7, #23]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d105      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac6:	4b3c      	ldr	r3, [pc, #240]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	4a3b      	ldr	r2, [pc, #236]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ad0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 8087 	beq.w	8001bea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001adc:	4b36      	ldr	r3, [pc, #216]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d061      	beq.n	8001bac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d146      	bne.n	8001b7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af0:	4b33      	ldr	r3, [pc, #204]	@ (8001bc0 <HAL_RCC_OscConfig+0x4cc>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7ff fb3f 	bl	8001178 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afe:	f7ff fb3b 	bl	8001178 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e06d      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b10:	4b29      	ldr	r3, [pc, #164]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f0      	bne.n	8001afe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b24:	d108      	bne.n	8001b38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b26:	4b24      	ldr	r3, [pc, #144]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	4921      	ldr	r1, [pc, #132]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b38:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a19      	ldr	r1, [r3, #32]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	491b      	ldr	r1, [pc, #108]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b50:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc0 <HAL_RCC_OscConfig+0x4cc>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b56:	f7ff fb0f 	bl	8001178 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5e:	f7ff fb0b 	bl	8001178 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e03d      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b70:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0f0      	beq.n	8001b5e <HAL_RCC_OscConfig+0x46a>
 8001b7c:	e035      	b.n	8001bea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7e:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <HAL_RCC_OscConfig+0x4cc>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7ff faf8 	bl	8001178 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8c:	f7ff faf4 	bl	8001178 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e026      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9e:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x498>
 8001baa:	e01e      	b.n	8001bea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d107      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e019      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40007000 	.word	0x40007000
 8001bc0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf4 <HAL_RCC_OscConfig+0x500>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d106      	bne.n	8001be6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d001      	beq.n	8001bea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0d0      	b.n	8001dae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c0c:	4b6a      	ldr	r3, [pc, #424]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d910      	bls.n	8001c3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1a:	4b67      	ldr	r3, [pc, #412]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 0207 	bic.w	r2, r3, #7
 8001c22:	4965      	ldr	r1, [pc, #404]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2a:	4b63      	ldr	r3, [pc, #396]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0b8      	b.n	8001dae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d020      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c54:	4b59      	ldr	r3, [pc, #356]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	4a58      	ldr	r2, [pc, #352]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c6c:	4b53      	ldr	r3, [pc, #332]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	4a52      	ldr	r2, [pc, #328]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c78:	4b50      	ldr	r3, [pc, #320]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	494d      	ldr	r1, [pc, #308]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d040      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d107      	bne.n	8001cae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	4b47      	ldr	r3, [pc, #284]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d115      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e07f      	b.n	8001dae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb6:	4b41      	ldr	r3, [pc, #260]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d109      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e073      	b.n	8001dae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc6:	4b3d      	ldr	r3, [pc, #244]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e06b      	b.n	8001dae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd6:	4b39      	ldr	r3, [pc, #228]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f023 0203 	bic.w	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4936      	ldr	r1, [pc, #216]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce8:	f7ff fa46 	bl	8001178 <HAL_GetTick>
 8001cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cee:	e00a      	b.n	8001d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf0:	f7ff fa42 	bl	8001178 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e053      	b.n	8001dae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d06:	4b2d      	ldr	r3, [pc, #180]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 020c 	and.w	r2, r3, #12
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d1eb      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d18:	4b27      	ldr	r3, [pc, #156]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d210      	bcs.n	8001d48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b24      	ldr	r3, [pc, #144]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 0207 	bic.w	r2, r3, #7
 8001d2e:	4922      	ldr	r1, [pc, #136]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b20      	ldr	r3, [pc, #128]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e032      	b.n	8001dae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d54:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	4916      	ldr	r1, [pc, #88]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d009      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d72:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	490e      	ldr	r1, [pc, #56]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d86:	f000 f821 	bl	8001dcc <HAL_RCC_GetSysClockFreq>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	490a      	ldr	r1, [pc, #40]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d98:	5ccb      	ldrb	r3, [r1, r3]
 8001d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9e:	4a09      	ldr	r2, [pc, #36]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1cc>)
 8001da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001da2:	4b09      	ldr	r3, [pc, #36]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1d0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff f9a4 	bl	80010f4 <HAL_InitTick>

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40022000 	.word	0x40022000
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	08002cdc 	.word	0x08002cdc
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	20000004 	.word	0x20000004

08001dcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dcc:	b490      	push	{r4, r7}
 8001dce:	b08a      	sub	sp, #40	@ 0x28
 8001dd0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dd2:	4b29      	ldr	r3, [pc, #164]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0xac>)
 8001dd4:	1d3c      	adds	r4, r7, #4
 8001dd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ddc:	f240 2301 	movw	r3, #513	@ 0x201
 8001de0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001df6:	4b21      	ldr	r3, [pc, #132]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d002      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x40>
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d003      	beq.n	8001e12 <HAL_RCC_GetSysClockFreq+0x46>
 8001e0a:	e02b      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e0e:	623b      	str	r3, [r7, #32]
      break;
 8001e10:	e02b      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	0c9b      	lsrs	r3, r3, #18
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	3328      	adds	r3, #40	@ 0x28
 8001e1c:	443b      	add	r3, r7
 8001e1e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e22:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d012      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e2e:	4b13      	ldr	r3, [pc, #76]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	0c5b      	lsrs	r3, r3, #17
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	3328      	adds	r3, #40	@ 0x28
 8001e3a:	443b      	add	r3, r7
 8001e3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e40:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	4a0e      	ldr	r2, [pc, #56]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e46:	fb03 f202 	mul.w	r2, r3, r2
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e52:	e004      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	4a0b      	ldr	r2, [pc, #44]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e58:	fb02 f303 	mul.w	r3, r2, r3
 8001e5c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e60:	623b      	str	r3, [r7, #32]
      break;
 8001e62:	e002      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e64:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e66:	623b      	str	r3, [r7, #32]
      break;
 8001e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3728      	adds	r7, #40	@ 0x28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc90      	pop	{r4, r7}
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	08002ccc 	.word	0x08002ccc
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	007a1200 	.word	0x007a1200
 8001e84:	003d0900 	.word	0x003d0900

08001e88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e90:	4b0a      	ldr	r3, [pc, #40]	@ (8001ebc <RCC_Delay+0x34>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec0 <RCC_Delay+0x38>)
 8001e96:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9a:	0a5b      	lsrs	r3, r3, #9
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ea2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ea4:	bf00      	nop
  }
  while (Delay --);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1e5a      	subs	r2, r3, #1
 8001eaa:	60fa      	str	r2, [r7, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f9      	bne.n	8001ea4 <RCC_Delay+0x1c>
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	10624dd3 	.word	0x10624dd3

08001ec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e01d      	b.n	8001f12 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d106      	bne.n	8001ef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff f8a8 	bl	8001040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3304      	adds	r3, #4
 8001f00:	4619      	mov	r1, r3
 8001f02:	4610      	mov	r0, r2
 8001f04:	f000 f8f0 	bl	80020e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b085      	sub	sp, #20
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2202      	movs	r2, #2
 8001f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b06      	cmp	r3, #6
 8001f3a:	d007      	beq.n	8001f4c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_TIM_ConfigClockSource+0x18>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e0b3      	b.n	80020e0 <HAL_TIM_ConfigClockSource+0x180>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001f96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fb0:	d03e      	beq.n	8002030 <HAL_TIM_ConfigClockSource+0xd0>
 8001fb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fb6:	f200 8087 	bhi.w	80020c8 <HAL_TIM_ConfigClockSource+0x168>
 8001fba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fbe:	f000 8085 	beq.w	80020cc <HAL_TIM_ConfigClockSource+0x16c>
 8001fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fc6:	d87f      	bhi.n	80020c8 <HAL_TIM_ConfigClockSource+0x168>
 8001fc8:	2b70      	cmp	r3, #112	@ 0x70
 8001fca:	d01a      	beq.n	8002002 <HAL_TIM_ConfigClockSource+0xa2>
 8001fcc:	2b70      	cmp	r3, #112	@ 0x70
 8001fce:	d87b      	bhi.n	80020c8 <HAL_TIM_ConfigClockSource+0x168>
 8001fd0:	2b60      	cmp	r3, #96	@ 0x60
 8001fd2:	d050      	beq.n	8002076 <HAL_TIM_ConfigClockSource+0x116>
 8001fd4:	2b60      	cmp	r3, #96	@ 0x60
 8001fd6:	d877      	bhi.n	80020c8 <HAL_TIM_ConfigClockSource+0x168>
 8001fd8:	2b50      	cmp	r3, #80	@ 0x50
 8001fda:	d03c      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0xf6>
 8001fdc:	2b50      	cmp	r3, #80	@ 0x50
 8001fde:	d873      	bhi.n	80020c8 <HAL_TIM_ConfigClockSource+0x168>
 8001fe0:	2b40      	cmp	r3, #64	@ 0x40
 8001fe2:	d058      	beq.n	8002096 <HAL_TIM_ConfigClockSource+0x136>
 8001fe4:	2b40      	cmp	r3, #64	@ 0x40
 8001fe6:	d86f      	bhi.n	80020c8 <HAL_TIM_ConfigClockSource+0x168>
 8001fe8:	2b30      	cmp	r3, #48	@ 0x30
 8001fea:	d064      	beq.n	80020b6 <HAL_TIM_ConfigClockSource+0x156>
 8001fec:	2b30      	cmp	r3, #48	@ 0x30
 8001fee:	d86b      	bhi.n	80020c8 <HAL_TIM_ConfigClockSource+0x168>
 8001ff0:	2b20      	cmp	r3, #32
 8001ff2:	d060      	beq.n	80020b6 <HAL_TIM_ConfigClockSource+0x156>
 8001ff4:	2b20      	cmp	r3, #32
 8001ff6:	d867      	bhi.n	80020c8 <HAL_TIM_ConfigClockSource+0x168>
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d05c      	beq.n	80020b6 <HAL_TIM_ConfigClockSource+0x156>
 8001ffc:	2b10      	cmp	r3, #16
 8001ffe:	d05a      	beq.n	80020b6 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002000:	e062      	b.n	80020c8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6818      	ldr	r0, [r3, #0]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	6899      	ldr	r1, [r3, #8]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f000 f938 	bl	8002286 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002024:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	609a      	str	r2, [r3, #8]
      break;
 800202e:	e04e      	b.n	80020ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	6899      	ldr	r1, [r3, #8]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f000 f921 	bl	8002286 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002052:	609a      	str	r2, [r3, #8]
      break;
 8002054:	e03b      	b.n	80020ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6859      	ldr	r1, [r3, #4]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	461a      	mov	r2, r3
 8002064:	f000 f898 	bl	8002198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2150      	movs	r1, #80	@ 0x50
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f8ef 	bl	8002252 <TIM_ITRx_SetConfig>
      break;
 8002074:	e02b      	b.n	80020ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	6859      	ldr	r1, [r3, #4]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	461a      	mov	r2, r3
 8002084:	f000 f8b6 	bl	80021f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2160      	movs	r1, #96	@ 0x60
 800208e:	4618      	mov	r0, r3
 8002090:	f000 f8df 	bl	8002252 <TIM_ITRx_SetConfig>
      break;
 8002094:	e01b      	b.n	80020ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6818      	ldr	r0, [r3, #0]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6859      	ldr	r1, [r3, #4]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	461a      	mov	r2, r3
 80020a4:	f000 f878 	bl	8002198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2140      	movs	r1, #64	@ 0x40
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f8cf 	bl	8002252 <TIM_ITRx_SetConfig>
      break;
 80020b4:	e00b      	b.n	80020ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4619      	mov	r1, r3
 80020c0:	4610      	mov	r0, r2
 80020c2:	f000 f8c6 	bl	8002252 <TIM_ITRx_SetConfig>
      break;
 80020c6:	e002      	b.n	80020ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80020c8:	bf00      	nop
 80020ca:	e000      	b.n	80020ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80020cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a25      	ldr	r2, [pc, #148]	@ (8002190 <TIM_Base_SetConfig+0xa8>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d007      	beq.n	8002110 <TIM_Base_SetConfig+0x28>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002106:	d003      	beq.n	8002110 <TIM_Base_SetConfig+0x28>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a22      	ldr	r2, [pc, #136]	@ (8002194 <TIM_Base_SetConfig+0xac>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d108      	bne.n	8002122 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	4313      	orrs	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a1a      	ldr	r2, [pc, #104]	@ (8002190 <TIM_Base_SetConfig+0xa8>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d007      	beq.n	800213a <TIM_Base_SetConfig+0x52>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002130:	d003      	beq.n	800213a <TIM_Base_SetConfig+0x52>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a17      	ldr	r2, [pc, #92]	@ (8002194 <TIM_Base_SetConfig+0xac>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d108      	bne.n	800214c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4313      	orrs	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	4313      	orrs	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a07      	ldr	r2, [pc, #28]	@ (8002190 <TIM_Base_SetConfig+0xa8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d103      	bne.n	8002180 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	615a      	str	r2, [r3, #20]
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	40012c00 	.word	0x40012c00
 8002194:	40000400 	.word	0x40000400

08002198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002198:	b480      	push	{r7}
 800219a:	b087      	sub	sp, #28
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	f023 0201 	bic.w	r2, r3, #1
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80021c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f023 030a 	bic.w	r3, r3, #10
 80021d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4313      	orrs	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	621a      	str	r2, [r3, #32]
}
 80021ea:	bf00      	nop
 80021ec:	371c      	adds	r7, #28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	f023 0210 	bic.w	r2, r3, #16
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800221e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	031b      	lsls	r3, r3, #12
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	4313      	orrs	r3, r2
 8002228:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002230:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	621a      	str	r2, [r3, #32]
}
 8002248:	bf00      	nop
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002252:	b480      	push	{r7}
 8002254:	b085      	sub	sp, #20
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002268:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	f043 0307 	orr.w	r3, r3, #7
 8002274:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	609a      	str	r2, [r3, #8]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr

08002286 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002286:	b480      	push	{r7}
 8002288:	b087      	sub	sp, #28
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80022a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	021a      	lsls	r2, r3, #8
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	431a      	orrs	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	609a      	str	r2, [r3, #8]
}
 80022ba:	bf00      	nop
 80022bc:	371c      	adds	r7, #28
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022d8:	2302      	movs	r3, #2
 80022da:	e032      	b.n	8002342 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002302:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002314:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	4313      	orrs	r3, r2
 800231e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <siprintf>:
 800234c:	b40e      	push	{r1, r2, r3}
 800234e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002352:	b510      	push	{r4, lr}
 8002354:	2400      	movs	r4, #0
 8002356:	b09d      	sub	sp, #116	@ 0x74
 8002358:	ab1f      	add	r3, sp, #124	@ 0x7c
 800235a:	9002      	str	r0, [sp, #8]
 800235c:	9006      	str	r0, [sp, #24]
 800235e:	9107      	str	r1, [sp, #28]
 8002360:	9104      	str	r1, [sp, #16]
 8002362:	4809      	ldr	r0, [pc, #36]	@ (8002388 <siprintf+0x3c>)
 8002364:	4909      	ldr	r1, [pc, #36]	@ (800238c <siprintf+0x40>)
 8002366:	f853 2b04 	ldr.w	r2, [r3], #4
 800236a:	9105      	str	r1, [sp, #20]
 800236c:	6800      	ldr	r0, [r0, #0]
 800236e:	a902      	add	r1, sp, #8
 8002370:	9301      	str	r3, [sp, #4]
 8002372:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002374:	f000 f89c 	bl	80024b0 <_svfiprintf_r>
 8002378:	9b02      	ldr	r3, [sp, #8]
 800237a:	701c      	strb	r4, [r3, #0]
 800237c:	b01d      	add	sp, #116	@ 0x74
 800237e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002382:	b003      	add	sp, #12
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	2000000c 	.word	0x2000000c
 800238c:	ffff0208 	.word	0xffff0208

08002390 <memset>:
 8002390:	4603      	mov	r3, r0
 8002392:	4402      	add	r2, r0
 8002394:	4293      	cmp	r3, r2
 8002396:	d100      	bne.n	800239a <memset+0xa>
 8002398:	4770      	bx	lr
 800239a:	f803 1b01 	strb.w	r1, [r3], #1
 800239e:	e7f9      	b.n	8002394 <memset+0x4>

080023a0 <__errno>:
 80023a0:	4b01      	ldr	r3, [pc, #4]	@ (80023a8 <__errno+0x8>)
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	2000000c 	.word	0x2000000c

080023ac <__libc_init_array>:
 80023ac:	b570      	push	{r4, r5, r6, lr}
 80023ae:	2600      	movs	r6, #0
 80023b0:	4d0c      	ldr	r5, [pc, #48]	@ (80023e4 <__libc_init_array+0x38>)
 80023b2:	4c0d      	ldr	r4, [pc, #52]	@ (80023e8 <__libc_init_array+0x3c>)
 80023b4:	1b64      	subs	r4, r4, r5
 80023b6:	10a4      	asrs	r4, r4, #2
 80023b8:	42a6      	cmp	r6, r4
 80023ba:	d109      	bne.n	80023d0 <__libc_init_array+0x24>
 80023bc:	f000 fc76 	bl	8002cac <_init>
 80023c0:	2600      	movs	r6, #0
 80023c2:	4d0a      	ldr	r5, [pc, #40]	@ (80023ec <__libc_init_array+0x40>)
 80023c4:	4c0a      	ldr	r4, [pc, #40]	@ (80023f0 <__libc_init_array+0x44>)
 80023c6:	1b64      	subs	r4, r4, r5
 80023c8:	10a4      	asrs	r4, r4, #2
 80023ca:	42a6      	cmp	r6, r4
 80023cc:	d105      	bne.n	80023da <__libc_init_array+0x2e>
 80023ce:	bd70      	pop	{r4, r5, r6, pc}
 80023d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80023d4:	4798      	blx	r3
 80023d6:	3601      	adds	r6, #1
 80023d8:	e7ee      	b.n	80023b8 <__libc_init_array+0xc>
 80023da:	f855 3b04 	ldr.w	r3, [r5], #4
 80023de:	4798      	blx	r3
 80023e0:	3601      	adds	r6, #1
 80023e2:	e7f2      	b.n	80023ca <__libc_init_array+0x1e>
 80023e4:	08002d20 	.word	0x08002d20
 80023e8:	08002d20 	.word	0x08002d20
 80023ec:	08002d20 	.word	0x08002d20
 80023f0:	08002d24 	.word	0x08002d24

080023f4 <__retarget_lock_acquire_recursive>:
 80023f4:	4770      	bx	lr

080023f6 <__retarget_lock_release_recursive>:
 80023f6:	4770      	bx	lr

080023f8 <__ssputs_r>:
 80023f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023fc:	461f      	mov	r7, r3
 80023fe:	688e      	ldr	r6, [r1, #8]
 8002400:	4682      	mov	sl, r0
 8002402:	42be      	cmp	r6, r7
 8002404:	460c      	mov	r4, r1
 8002406:	4690      	mov	r8, r2
 8002408:	680b      	ldr	r3, [r1, #0]
 800240a:	d82d      	bhi.n	8002468 <__ssputs_r+0x70>
 800240c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002410:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002414:	d026      	beq.n	8002464 <__ssputs_r+0x6c>
 8002416:	6965      	ldr	r5, [r4, #20]
 8002418:	6909      	ldr	r1, [r1, #16]
 800241a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800241e:	eba3 0901 	sub.w	r9, r3, r1
 8002422:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002426:	1c7b      	adds	r3, r7, #1
 8002428:	444b      	add	r3, r9
 800242a:	106d      	asrs	r5, r5, #1
 800242c:	429d      	cmp	r5, r3
 800242e:	bf38      	it	cc
 8002430:	461d      	movcc	r5, r3
 8002432:	0553      	lsls	r3, r2, #21
 8002434:	d527      	bpl.n	8002486 <__ssputs_r+0x8e>
 8002436:	4629      	mov	r1, r5
 8002438:	f000 f958 	bl	80026ec <_malloc_r>
 800243c:	4606      	mov	r6, r0
 800243e:	b360      	cbz	r0, 800249a <__ssputs_r+0xa2>
 8002440:	464a      	mov	r2, r9
 8002442:	6921      	ldr	r1, [r4, #16]
 8002444:	f000 fbd4 	bl	8002bf0 <memcpy>
 8002448:	89a3      	ldrh	r3, [r4, #12]
 800244a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800244e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002452:	81a3      	strh	r3, [r4, #12]
 8002454:	6126      	str	r6, [r4, #16]
 8002456:	444e      	add	r6, r9
 8002458:	6026      	str	r6, [r4, #0]
 800245a:	463e      	mov	r6, r7
 800245c:	6165      	str	r5, [r4, #20]
 800245e:	eba5 0509 	sub.w	r5, r5, r9
 8002462:	60a5      	str	r5, [r4, #8]
 8002464:	42be      	cmp	r6, r7
 8002466:	d900      	bls.n	800246a <__ssputs_r+0x72>
 8002468:	463e      	mov	r6, r7
 800246a:	4632      	mov	r2, r6
 800246c:	4641      	mov	r1, r8
 800246e:	6820      	ldr	r0, [r4, #0]
 8002470:	f000 fb86 	bl	8002b80 <memmove>
 8002474:	2000      	movs	r0, #0
 8002476:	68a3      	ldr	r3, [r4, #8]
 8002478:	1b9b      	subs	r3, r3, r6
 800247a:	60a3      	str	r3, [r4, #8]
 800247c:	6823      	ldr	r3, [r4, #0]
 800247e:	4433      	add	r3, r6
 8002480:	6023      	str	r3, [r4, #0]
 8002482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002486:	462a      	mov	r2, r5
 8002488:	f000 fb4c 	bl	8002b24 <_realloc_r>
 800248c:	4606      	mov	r6, r0
 800248e:	2800      	cmp	r0, #0
 8002490:	d1e0      	bne.n	8002454 <__ssputs_r+0x5c>
 8002492:	4650      	mov	r0, sl
 8002494:	6921      	ldr	r1, [r4, #16]
 8002496:	f000 fbb9 	bl	8002c0c <_free_r>
 800249a:	230c      	movs	r3, #12
 800249c:	f8ca 3000 	str.w	r3, [sl]
 80024a0:	89a3      	ldrh	r3, [r4, #12]
 80024a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024aa:	81a3      	strh	r3, [r4, #12]
 80024ac:	e7e9      	b.n	8002482 <__ssputs_r+0x8a>
	...

080024b0 <_svfiprintf_r>:
 80024b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024b4:	4698      	mov	r8, r3
 80024b6:	898b      	ldrh	r3, [r1, #12]
 80024b8:	4607      	mov	r7, r0
 80024ba:	061b      	lsls	r3, r3, #24
 80024bc:	460d      	mov	r5, r1
 80024be:	4614      	mov	r4, r2
 80024c0:	b09d      	sub	sp, #116	@ 0x74
 80024c2:	d510      	bpl.n	80024e6 <_svfiprintf_r+0x36>
 80024c4:	690b      	ldr	r3, [r1, #16]
 80024c6:	b973      	cbnz	r3, 80024e6 <_svfiprintf_r+0x36>
 80024c8:	2140      	movs	r1, #64	@ 0x40
 80024ca:	f000 f90f 	bl	80026ec <_malloc_r>
 80024ce:	6028      	str	r0, [r5, #0]
 80024d0:	6128      	str	r0, [r5, #16]
 80024d2:	b930      	cbnz	r0, 80024e2 <_svfiprintf_r+0x32>
 80024d4:	230c      	movs	r3, #12
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024dc:	b01d      	add	sp, #116	@ 0x74
 80024de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024e2:	2340      	movs	r3, #64	@ 0x40
 80024e4:	616b      	str	r3, [r5, #20]
 80024e6:	2300      	movs	r3, #0
 80024e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80024ea:	2320      	movs	r3, #32
 80024ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80024f0:	2330      	movs	r3, #48	@ 0x30
 80024f2:	f04f 0901 	mov.w	r9, #1
 80024f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80024fa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002694 <_svfiprintf_r+0x1e4>
 80024fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002502:	4623      	mov	r3, r4
 8002504:	469a      	mov	sl, r3
 8002506:	f813 2b01 	ldrb.w	r2, [r3], #1
 800250a:	b10a      	cbz	r2, 8002510 <_svfiprintf_r+0x60>
 800250c:	2a25      	cmp	r2, #37	@ 0x25
 800250e:	d1f9      	bne.n	8002504 <_svfiprintf_r+0x54>
 8002510:	ebba 0b04 	subs.w	fp, sl, r4
 8002514:	d00b      	beq.n	800252e <_svfiprintf_r+0x7e>
 8002516:	465b      	mov	r3, fp
 8002518:	4622      	mov	r2, r4
 800251a:	4629      	mov	r1, r5
 800251c:	4638      	mov	r0, r7
 800251e:	f7ff ff6b 	bl	80023f8 <__ssputs_r>
 8002522:	3001      	adds	r0, #1
 8002524:	f000 80a7 	beq.w	8002676 <_svfiprintf_r+0x1c6>
 8002528:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800252a:	445a      	add	r2, fp
 800252c:	9209      	str	r2, [sp, #36]	@ 0x24
 800252e:	f89a 3000 	ldrb.w	r3, [sl]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 809f 	beq.w	8002676 <_svfiprintf_r+0x1c6>
 8002538:	2300      	movs	r3, #0
 800253a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800253e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002542:	f10a 0a01 	add.w	sl, sl, #1
 8002546:	9304      	str	r3, [sp, #16]
 8002548:	9307      	str	r3, [sp, #28]
 800254a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800254e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002550:	4654      	mov	r4, sl
 8002552:	2205      	movs	r2, #5
 8002554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002558:	484e      	ldr	r0, [pc, #312]	@ (8002694 <_svfiprintf_r+0x1e4>)
 800255a:	f000 fb3b 	bl	8002bd4 <memchr>
 800255e:	9a04      	ldr	r2, [sp, #16]
 8002560:	b9d8      	cbnz	r0, 800259a <_svfiprintf_r+0xea>
 8002562:	06d0      	lsls	r0, r2, #27
 8002564:	bf44      	itt	mi
 8002566:	2320      	movmi	r3, #32
 8002568:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800256c:	0711      	lsls	r1, r2, #28
 800256e:	bf44      	itt	mi
 8002570:	232b      	movmi	r3, #43	@ 0x2b
 8002572:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002576:	f89a 3000 	ldrb.w	r3, [sl]
 800257a:	2b2a      	cmp	r3, #42	@ 0x2a
 800257c:	d015      	beq.n	80025aa <_svfiprintf_r+0xfa>
 800257e:	4654      	mov	r4, sl
 8002580:	2000      	movs	r0, #0
 8002582:	f04f 0c0a 	mov.w	ip, #10
 8002586:	9a07      	ldr	r2, [sp, #28]
 8002588:	4621      	mov	r1, r4
 800258a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800258e:	3b30      	subs	r3, #48	@ 0x30
 8002590:	2b09      	cmp	r3, #9
 8002592:	d94b      	bls.n	800262c <_svfiprintf_r+0x17c>
 8002594:	b1b0      	cbz	r0, 80025c4 <_svfiprintf_r+0x114>
 8002596:	9207      	str	r2, [sp, #28]
 8002598:	e014      	b.n	80025c4 <_svfiprintf_r+0x114>
 800259a:	eba0 0308 	sub.w	r3, r0, r8
 800259e:	fa09 f303 	lsl.w	r3, r9, r3
 80025a2:	4313      	orrs	r3, r2
 80025a4:	46a2      	mov	sl, r4
 80025a6:	9304      	str	r3, [sp, #16]
 80025a8:	e7d2      	b.n	8002550 <_svfiprintf_r+0xa0>
 80025aa:	9b03      	ldr	r3, [sp, #12]
 80025ac:	1d19      	adds	r1, r3, #4
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	9103      	str	r1, [sp, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	bfbb      	ittet	lt
 80025b6:	425b      	neglt	r3, r3
 80025b8:	f042 0202 	orrlt.w	r2, r2, #2
 80025bc:	9307      	strge	r3, [sp, #28]
 80025be:	9307      	strlt	r3, [sp, #28]
 80025c0:	bfb8      	it	lt
 80025c2:	9204      	strlt	r2, [sp, #16]
 80025c4:	7823      	ldrb	r3, [r4, #0]
 80025c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80025c8:	d10a      	bne.n	80025e0 <_svfiprintf_r+0x130>
 80025ca:	7863      	ldrb	r3, [r4, #1]
 80025cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80025ce:	d132      	bne.n	8002636 <_svfiprintf_r+0x186>
 80025d0:	9b03      	ldr	r3, [sp, #12]
 80025d2:	3402      	adds	r4, #2
 80025d4:	1d1a      	adds	r2, r3, #4
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	9203      	str	r2, [sp, #12]
 80025da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80025de:	9305      	str	r3, [sp, #20]
 80025e0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002698 <_svfiprintf_r+0x1e8>
 80025e4:	2203      	movs	r2, #3
 80025e6:	4650      	mov	r0, sl
 80025e8:	7821      	ldrb	r1, [r4, #0]
 80025ea:	f000 faf3 	bl	8002bd4 <memchr>
 80025ee:	b138      	cbz	r0, 8002600 <_svfiprintf_r+0x150>
 80025f0:	2240      	movs	r2, #64	@ 0x40
 80025f2:	9b04      	ldr	r3, [sp, #16]
 80025f4:	eba0 000a 	sub.w	r0, r0, sl
 80025f8:	4082      	lsls	r2, r0
 80025fa:	4313      	orrs	r3, r2
 80025fc:	3401      	adds	r4, #1
 80025fe:	9304      	str	r3, [sp, #16]
 8002600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002604:	2206      	movs	r2, #6
 8002606:	4825      	ldr	r0, [pc, #148]	@ (800269c <_svfiprintf_r+0x1ec>)
 8002608:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800260c:	f000 fae2 	bl	8002bd4 <memchr>
 8002610:	2800      	cmp	r0, #0
 8002612:	d036      	beq.n	8002682 <_svfiprintf_r+0x1d2>
 8002614:	4b22      	ldr	r3, [pc, #136]	@ (80026a0 <_svfiprintf_r+0x1f0>)
 8002616:	bb1b      	cbnz	r3, 8002660 <_svfiprintf_r+0x1b0>
 8002618:	9b03      	ldr	r3, [sp, #12]
 800261a:	3307      	adds	r3, #7
 800261c:	f023 0307 	bic.w	r3, r3, #7
 8002620:	3308      	adds	r3, #8
 8002622:	9303      	str	r3, [sp, #12]
 8002624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002626:	4433      	add	r3, r6
 8002628:	9309      	str	r3, [sp, #36]	@ 0x24
 800262a:	e76a      	b.n	8002502 <_svfiprintf_r+0x52>
 800262c:	460c      	mov	r4, r1
 800262e:	2001      	movs	r0, #1
 8002630:	fb0c 3202 	mla	r2, ip, r2, r3
 8002634:	e7a8      	b.n	8002588 <_svfiprintf_r+0xd8>
 8002636:	2300      	movs	r3, #0
 8002638:	f04f 0c0a 	mov.w	ip, #10
 800263c:	4619      	mov	r1, r3
 800263e:	3401      	adds	r4, #1
 8002640:	9305      	str	r3, [sp, #20]
 8002642:	4620      	mov	r0, r4
 8002644:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002648:	3a30      	subs	r2, #48	@ 0x30
 800264a:	2a09      	cmp	r2, #9
 800264c:	d903      	bls.n	8002656 <_svfiprintf_r+0x1a6>
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0c6      	beq.n	80025e0 <_svfiprintf_r+0x130>
 8002652:	9105      	str	r1, [sp, #20]
 8002654:	e7c4      	b.n	80025e0 <_svfiprintf_r+0x130>
 8002656:	4604      	mov	r4, r0
 8002658:	2301      	movs	r3, #1
 800265a:	fb0c 2101 	mla	r1, ip, r1, r2
 800265e:	e7f0      	b.n	8002642 <_svfiprintf_r+0x192>
 8002660:	ab03      	add	r3, sp, #12
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	462a      	mov	r2, r5
 8002666:	4638      	mov	r0, r7
 8002668:	4b0e      	ldr	r3, [pc, #56]	@ (80026a4 <_svfiprintf_r+0x1f4>)
 800266a:	a904      	add	r1, sp, #16
 800266c:	f3af 8000 	nop.w
 8002670:	1c42      	adds	r2, r0, #1
 8002672:	4606      	mov	r6, r0
 8002674:	d1d6      	bne.n	8002624 <_svfiprintf_r+0x174>
 8002676:	89ab      	ldrh	r3, [r5, #12]
 8002678:	065b      	lsls	r3, r3, #25
 800267a:	f53f af2d 	bmi.w	80024d8 <_svfiprintf_r+0x28>
 800267e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002680:	e72c      	b.n	80024dc <_svfiprintf_r+0x2c>
 8002682:	ab03      	add	r3, sp, #12
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	462a      	mov	r2, r5
 8002688:	4638      	mov	r0, r7
 800268a:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <_svfiprintf_r+0x1f4>)
 800268c:	a904      	add	r1, sp, #16
 800268e:	f000 f91f 	bl	80028d0 <_printf_i>
 8002692:	e7ed      	b.n	8002670 <_svfiprintf_r+0x1c0>
 8002694:	08002cec 	.word	0x08002cec
 8002698:	08002cf2 	.word	0x08002cf2
 800269c:	08002cf6 	.word	0x08002cf6
 80026a0:	00000000 	.word	0x00000000
 80026a4:	080023f9 	.word	0x080023f9

080026a8 <sbrk_aligned>:
 80026a8:	b570      	push	{r4, r5, r6, lr}
 80026aa:	4e0f      	ldr	r6, [pc, #60]	@ (80026e8 <sbrk_aligned+0x40>)
 80026ac:	460c      	mov	r4, r1
 80026ae:	6831      	ldr	r1, [r6, #0]
 80026b0:	4605      	mov	r5, r0
 80026b2:	b911      	cbnz	r1, 80026ba <sbrk_aligned+0x12>
 80026b4:	f000 fa7e 	bl	8002bb4 <_sbrk_r>
 80026b8:	6030      	str	r0, [r6, #0]
 80026ba:	4621      	mov	r1, r4
 80026bc:	4628      	mov	r0, r5
 80026be:	f000 fa79 	bl	8002bb4 <_sbrk_r>
 80026c2:	1c43      	adds	r3, r0, #1
 80026c4:	d103      	bne.n	80026ce <sbrk_aligned+0x26>
 80026c6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80026ca:	4620      	mov	r0, r4
 80026cc:	bd70      	pop	{r4, r5, r6, pc}
 80026ce:	1cc4      	adds	r4, r0, #3
 80026d0:	f024 0403 	bic.w	r4, r4, #3
 80026d4:	42a0      	cmp	r0, r4
 80026d6:	d0f8      	beq.n	80026ca <sbrk_aligned+0x22>
 80026d8:	1a21      	subs	r1, r4, r0
 80026da:	4628      	mov	r0, r5
 80026dc:	f000 fa6a 	bl	8002bb4 <_sbrk_r>
 80026e0:	3001      	adds	r0, #1
 80026e2:	d1f2      	bne.n	80026ca <sbrk_aligned+0x22>
 80026e4:	e7ef      	b.n	80026c6 <sbrk_aligned+0x1e>
 80026e6:	bf00      	nop
 80026e8:	2000020c 	.word	0x2000020c

080026ec <_malloc_r>:
 80026ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026f0:	1ccd      	adds	r5, r1, #3
 80026f2:	f025 0503 	bic.w	r5, r5, #3
 80026f6:	3508      	adds	r5, #8
 80026f8:	2d0c      	cmp	r5, #12
 80026fa:	bf38      	it	cc
 80026fc:	250c      	movcc	r5, #12
 80026fe:	2d00      	cmp	r5, #0
 8002700:	4606      	mov	r6, r0
 8002702:	db01      	blt.n	8002708 <_malloc_r+0x1c>
 8002704:	42a9      	cmp	r1, r5
 8002706:	d904      	bls.n	8002712 <_malloc_r+0x26>
 8002708:	230c      	movs	r3, #12
 800270a:	6033      	str	r3, [r6, #0]
 800270c:	2000      	movs	r0, #0
 800270e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002712:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80027e8 <_malloc_r+0xfc>
 8002716:	f000 f9f9 	bl	8002b0c <__malloc_lock>
 800271a:	f8d8 3000 	ldr.w	r3, [r8]
 800271e:	461c      	mov	r4, r3
 8002720:	bb44      	cbnz	r4, 8002774 <_malloc_r+0x88>
 8002722:	4629      	mov	r1, r5
 8002724:	4630      	mov	r0, r6
 8002726:	f7ff ffbf 	bl	80026a8 <sbrk_aligned>
 800272a:	1c43      	adds	r3, r0, #1
 800272c:	4604      	mov	r4, r0
 800272e:	d158      	bne.n	80027e2 <_malloc_r+0xf6>
 8002730:	f8d8 4000 	ldr.w	r4, [r8]
 8002734:	4627      	mov	r7, r4
 8002736:	2f00      	cmp	r7, #0
 8002738:	d143      	bne.n	80027c2 <_malloc_r+0xd6>
 800273a:	2c00      	cmp	r4, #0
 800273c:	d04b      	beq.n	80027d6 <_malloc_r+0xea>
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	4639      	mov	r1, r7
 8002742:	4630      	mov	r0, r6
 8002744:	eb04 0903 	add.w	r9, r4, r3
 8002748:	f000 fa34 	bl	8002bb4 <_sbrk_r>
 800274c:	4581      	cmp	r9, r0
 800274e:	d142      	bne.n	80027d6 <_malloc_r+0xea>
 8002750:	6821      	ldr	r1, [r4, #0]
 8002752:	4630      	mov	r0, r6
 8002754:	1a6d      	subs	r5, r5, r1
 8002756:	4629      	mov	r1, r5
 8002758:	f7ff ffa6 	bl	80026a8 <sbrk_aligned>
 800275c:	3001      	adds	r0, #1
 800275e:	d03a      	beq.n	80027d6 <_malloc_r+0xea>
 8002760:	6823      	ldr	r3, [r4, #0]
 8002762:	442b      	add	r3, r5
 8002764:	6023      	str	r3, [r4, #0]
 8002766:	f8d8 3000 	ldr.w	r3, [r8]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	bb62      	cbnz	r2, 80027c8 <_malloc_r+0xdc>
 800276e:	f8c8 7000 	str.w	r7, [r8]
 8002772:	e00f      	b.n	8002794 <_malloc_r+0xa8>
 8002774:	6822      	ldr	r2, [r4, #0]
 8002776:	1b52      	subs	r2, r2, r5
 8002778:	d420      	bmi.n	80027bc <_malloc_r+0xd0>
 800277a:	2a0b      	cmp	r2, #11
 800277c:	d917      	bls.n	80027ae <_malloc_r+0xc2>
 800277e:	1961      	adds	r1, r4, r5
 8002780:	42a3      	cmp	r3, r4
 8002782:	6025      	str	r5, [r4, #0]
 8002784:	bf18      	it	ne
 8002786:	6059      	strne	r1, [r3, #4]
 8002788:	6863      	ldr	r3, [r4, #4]
 800278a:	bf08      	it	eq
 800278c:	f8c8 1000 	streq.w	r1, [r8]
 8002790:	5162      	str	r2, [r4, r5]
 8002792:	604b      	str	r3, [r1, #4]
 8002794:	4630      	mov	r0, r6
 8002796:	f000 f9bf 	bl	8002b18 <__malloc_unlock>
 800279a:	f104 000b 	add.w	r0, r4, #11
 800279e:	1d23      	adds	r3, r4, #4
 80027a0:	f020 0007 	bic.w	r0, r0, #7
 80027a4:	1ac2      	subs	r2, r0, r3
 80027a6:	bf1c      	itt	ne
 80027a8:	1a1b      	subne	r3, r3, r0
 80027aa:	50a3      	strne	r3, [r4, r2]
 80027ac:	e7af      	b.n	800270e <_malloc_r+0x22>
 80027ae:	6862      	ldr	r2, [r4, #4]
 80027b0:	42a3      	cmp	r3, r4
 80027b2:	bf0c      	ite	eq
 80027b4:	f8c8 2000 	streq.w	r2, [r8]
 80027b8:	605a      	strne	r2, [r3, #4]
 80027ba:	e7eb      	b.n	8002794 <_malloc_r+0xa8>
 80027bc:	4623      	mov	r3, r4
 80027be:	6864      	ldr	r4, [r4, #4]
 80027c0:	e7ae      	b.n	8002720 <_malloc_r+0x34>
 80027c2:	463c      	mov	r4, r7
 80027c4:	687f      	ldr	r7, [r7, #4]
 80027c6:	e7b6      	b.n	8002736 <_malloc_r+0x4a>
 80027c8:	461a      	mov	r2, r3
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	42a3      	cmp	r3, r4
 80027ce:	d1fb      	bne.n	80027c8 <_malloc_r+0xdc>
 80027d0:	2300      	movs	r3, #0
 80027d2:	6053      	str	r3, [r2, #4]
 80027d4:	e7de      	b.n	8002794 <_malloc_r+0xa8>
 80027d6:	230c      	movs	r3, #12
 80027d8:	4630      	mov	r0, r6
 80027da:	6033      	str	r3, [r6, #0]
 80027dc:	f000 f99c 	bl	8002b18 <__malloc_unlock>
 80027e0:	e794      	b.n	800270c <_malloc_r+0x20>
 80027e2:	6005      	str	r5, [r0, #0]
 80027e4:	e7d6      	b.n	8002794 <_malloc_r+0xa8>
 80027e6:	bf00      	nop
 80027e8:	20000210 	.word	0x20000210

080027ec <_printf_common>:
 80027ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027f0:	4616      	mov	r6, r2
 80027f2:	4698      	mov	r8, r3
 80027f4:	688a      	ldr	r2, [r1, #8]
 80027f6:	690b      	ldr	r3, [r1, #16]
 80027f8:	4607      	mov	r7, r0
 80027fa:	4293      	cmp	r3, r2
 80027fc:	bfb8      	it	lt
 80027fe:	4613      	movlt	r3, r2
 8002800:	6033      	str	r3, [r6, #0]
 8002802:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002806:	460c      	mov	r4, r1
 8002808:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800280c:	b10a      	cbz	r2, 8002812 <_printf_common+0x26>
 800280e:	3301      	adds	r3, #1
 8002810:	6033      	str	r3, [r6, #0]
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	0699      	lsls	r1, r3, #26
 8002816:	bf42      	ittt	mi
 8002818:	6833      	ldrmi	r3, [r6, #0]
 800281a:	3302      	addmi	r3, #2
 800281c:	6033      	strmi	r3, [r6, #0]
 800281e:	6825      	ldr	r5, [r4, #0]
 8002820:	f015 0506 	ands.w	r5, r5, #6
 8002824:	d106      	bne.n	8002834 <_printf_common+0x48>
 8002826:	f104 0a19 	add.w	sl, r4, #25
 800282a:	68e3      	ldr	r3, [r4, #12]
 800282c:	6832      	ldr	r2, [r6, #0]
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	42ab      	cmp	r3, r5
 8002832:	dc2b      	bgt.n	800288c <_printf_common+0xa0>
 8002834:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002838:	6822      	ldr	r2, [r4, #0]
 800283a:	3b00      	subs	r3, #0
 800283c:	bf18      	it	ne
 800283e:	2301      	movne	r3, #1
 8002840:	0692      	lsls	r2, r2, #26
 8002842:	d430      	bmi.n	80028a6 <_printf_common+0xba>
 8002844:	4641      	mov	r1, r8
 8002846:	4638      	mov	r0, r7
 8002848:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800284c:	47c8      	blx	r9
 800284e:	3001      	adds	r0, #1
 8002850:	d023      	beq.n	800289a <_printf_common+0xae>
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	6922      	ldr	r2, [r4, #16]
 8002856:	f003 0306 	and.w	r3, r3, #6
 800285a:	2b04      	cmp	r3, #4
 800285c:	bf14      	ite	ne
 800285e:	2500      	movne	r5, #0
 8002860:	6833      	ldreq	r3, [r6, #0]
 8002862:	f04f 0600 	mov.w	r6, #0
 8002866:	bf08      	it	eq
 8002868:	68e5      	ldreq	r5, [r4, #12]
 800286a:	f104 041a 	add.w	r4, r4, #26
 800286e:	bf08      	it	eq
 8002870:	1aed      	subeq	r5, r5, r3
 8002872:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002876:	bf08      	it	eq
 8002878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800287c:	4293      	cmp	r3, r2
 800287e:	bfc4      	itt	gt
 8002880:	1a9b      	subgt	r3, r3, r2
 8002882:	18ed      	addgt	r5, r5, r3
 8002884:	42b5      	cmp	r5, r6
 8002886:	d11a      	bne.n	80028be <_printf_common+0xd2>
 8002888:	2000      	movs	r0, #0
 800288a:	e008      	b.n	800289e <_printf_common+0xb2>
 800288c:	2301      	movs	r3, #1
 800288e:	4652      	mov	r2, sl
 8002890:	4641      	mov	r1, r8
 8002892:	4638      	mov	r0, r7
 8002894:	47c8      	blx	r9
 8002896:	3001      	adds	r0, #1
 8002898:	d103      	bne.n	80028a2 <_printf_common+0xb6>
 800289a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800289e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028a2:	3501      	adds	r5, #1
 80028a4:	e7c1      	b.n	800282a <_printf_common+0x3e>
 80028a6:	2030      	movs	r0, #48	@ 0x30
 80028a8:	18e1      	adds	r1, r4, r3
 80028aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80028b4:	4422      	add	r2, r4
 80028b6:	3302      	adds	r3, #2
 80028b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80028bc:	e7c2      	b.n	8002844 <_printf_common+0x58>
 80028be:	2301      	movs	r3, #1
 80028c0:	4622      	mov	r2, r4
 80028c2:	4641      	mov	r1, r8
 80028c4:	4638      	mov	r0, r7
 80028c6:	47c8      	blx	r9
 80028c8:	3001      	adds	r0, #1
 80028ca:	d0e6      	beq.n	800289a <_printf_common+0xae>
 80028cc:	3601      	adds	r6, #1
 80028ce:	e7d9      	b.n	8002884 <_printf_common+0x98>

080028d0 <_printf_i>:
 80028d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028d4:	7e0f      	ldrb	r7, [r1, #24]
 80028d6:	4691      	mov	r9, r2
 80028d8:	2f78      	cmp	r7, #120	@ 0x78
 80028da:	4680      	mov	r8, r0
 80028dc:	460c      	mov	r4, r1
 80028de:	469a      	mov	sl, r3
 80028e0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80028e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80028e6:	d807      	bhi.n	80028f8 <_printf_i+0x28>
 80028e8:	2f62      	cmp	r7, #98	@ 0x62
 80028ea:	d80a      	bhi.n	8002902 <_printf_i+0x32>
 80028ec:	2f00      	cmp	r7, #0
 80028ee:	f000 80d1 	beq.w	8002a94 <_printf_i+0x1c4>
 80028f2:	2f58      	cmp	r7, #88	@ 0x58
 80028f4:	f000 80b8 	beq.w	8002a68 <_printf_i+0x198>
 80028f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80028fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002900:	e03a      	b.n	8002978 <_printf_i+0xa8>
 8002902:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002906:	2b15      	cmp	r3, #21
 8002908:	d8f6      	bhi.n	80028f8 <_printf_i+0x28>
 800290a:	a101      	add	r1, pc, #4	@ (adr r1, 8002910 <_printf_i+0x40>)
 800290c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002910:	08002969 	.word	0x08002969
 8002914:	0800297d 	.word	0x0800297d
 8002918:	080028f9 	.word	0x080028f9
 800291c:	080028f9 	.word	0x080028f9
 8002920:	080028f9 	.word	0x080028f9
 8002924:	080028f9 	.word	0x080028f9
 8002928:	0800297d 	.word	0x0800297d
 800292c:	080028f9 	.word	0x080028f9
 8002930:	080028f9 	.word	0x080028f9
 8002934:	080028f9 	.word	0x080028f9
 8002938:	080028f9 	.word	0x080028f9
 800293c:	08002a7b 	.word	0x08002a7b
 8002940:	080029a7 	.word	0x080029a7
 8002944:	08002a35 	.word	0x08002a35
 8002948:	080028f9 	.word	0x080028f9
 800294c:	080028f9 	.word	0x080028f9
 8002950:	08002a9d 	.word	0x08002a9d
 8002954:	080028f9 	.word	0x080028f9
 8002958:	080029a7 	.word	0x080029a7
 800295c:	080028f9 	.word	0x080028f9
 8002960:	080028f9 	.word	0x080028f9
 8002964:	08002a3d 	.word	0x08002a3d
 8002968:	6833      	ldr	r3, [r6, #0]
 800296a:	1d1a      	adds	r2, r3, #4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6032      	str	r2, [r6, #0]
 8002970:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002974:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002978:	2301      	movs	r3, #1
 800297a:	e09c      	b.n	8002ab6 <_printf_i+0x1e6>
 800297c:	6833      	ldr	r3, [r6, #0]
 800297e:	6820      	ldr	r0, [r4, #0]
 8002980:	1d19      	adds	r1, r3, #4
 8002982:	6031      	str	r1, [r6, #0]
 8002984:	0606      	lsls	r6, r0, #24
 8002986:	d501      	bpl.n	800298c <_printf_i+0xbc>
 8002988:	681d      	ldr	r5, [r3, #0]
 800298a:	e003      	b.n	8002994 <_printf_i+0xc4>
 800298c:	0645      	lsls	r5, r0, #25
 800298e:	d5fb      	bpl.n	8002988 <_printf_i+0xb8>
 8002990:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002994:	2d00      	cmp	r5, #0
 8002996:	da03      	bge.n	80029a0 <_printf_i+0xd0>
 8002998:	232d      	movs	r3, #45	@ 0x2d
 800299a:	426d      	negs	r5, r5
 800299c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80029a0:	230a      	movs	r3, #10
 80029a2:	4858      	ldr	r0, [pc, #352]	@ (8002b04 <_printf_i+0x234>)
 80029a4:	e011      	b.n	80029ca <_printf_i+0xfa>
 80029a6:	6821      	ldr	r1, [r4, #0]
 80029a8:	6833      	ldr	r3, [r6, #0]
 80029aa:	0608      	lsls	r0, r1, #24
 80029ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80029b0:	d402      	bmi.n	80029b8 <_printf_i+0xe8>
 80029b2:	0649      	lsls	r1, r1, #25
 80029b4:	bf48      	it	mi
 80029b6:	b2ad      	uxthmi	r5, r5
 80029b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80029ba:	6033      	str	r3, [r6, #0]
 80029bc:	bf14      	ite	ne
 80029be:	230a      	movne	r3, #10
 80029c0:	2308      	moveq	r3, #8
 80029c2:	4850      	ldr	r0, [pc, #320]	@ (8002b04 <_printf_i+0x234>)
 80029c4:	2100      	movs	r1, #0
 80029c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80029ca:	6866      	ldr	r6, [r4, #4]
 80029cc:	2e00      	cmp	r6, #0
 80029ce:	60a6      	str	r6, [r4, #8]
 80029d0:	db05      	blt.n	80029de <_printf_i+0x10e>
 80029d2:	6821      	ldr	r1, [r4, #0]
 80029d4:	432e      	orrs	r6, r5
 80029d6:	f021 0104 	bic.w	r1, r1, #4
 80029da:	6021      	str	r1, [r4, #0]
 80029dc:	d04b      	beq.n	8002a76 <_printf_i+0x1a6>
 80029de:	4616      	mov	r6, r2
 80029e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80029e4:	fb03 5711 	mls	r7, r3, r1, r5
 80029e8:	5dc7      	ldrb	r7, [r0, r7]
 80029ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80029ee:	462f      	mov	r7, r5
 80029f0:	42bb      	cmp	r3, r7
 80029f2:	460d      	mov	r5, r1
 80029f4:	d9f4      	bls.n	80029e0 <_printf_i+0x110>
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d10b      	bne.n	8002a12 <_printf_i+0x142>
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	07df      	lsls	r7, r3, #31
 80029fe:	d508      	bpl.n	8002a12 <_printf_i+0x142>
 8002a00:	6923      	ldr	r3, [r4, #16]
 8002a02:	6861      	ldr	r1, [r4, #4]
 8002a04:	4299      	cmp	r1, r3
 8002a06:	bfde      	ittt	le
 8002a08:	2330      	movle	r3, #48	@ 0x30
 8002a0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002a0e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002a12:	1b92      	subs	r2, r2, r6
 8002a14:	6122      	str	r2, [r4, #16]
 8002a16:	464b      	mov	r3, r9
 8002a18:	4621      	mov	r1, r4
 8002a1a:	4640      	mov	r0, r8
 8002a1c:	f8cd a000 	str.w	sl, [sp]
 8002a20:	aa03      	add	r2, sp, #12
 8002a22:	f7ff fee3 	bl	80027ec <_printf_common>
 8002a26:	3001      	adds	r0, #1
 8002a28:	d14a      	bne.n	8002ac0 <_printf_i+0x1f0>
 8002a2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a2e:	b004      	add	sp, #16
 8002a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a34:	6823      	ldr	r3, [r4, #0]
 8002a36:	f043 0320 	orr.w	r3, r3, #32
 8002a3a:	6023      	str	r3, [r4, #0]
 8002a3c:	2778      	movs	r7, #120	@ 0x78
 8002a3e:	4832      	ldr	r0, [pc, #200]	@ (8002b08 <_printf_i+0x238>)
 8002a40:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002a44:	6823      	ldr	r3, [r4, #0]
 8002a46:	6831      	ldr	r1, [r6, #0]
 8002a48:	061f      	lsls	r7, r3, #24
 8002a4a:	f851 5b04 	ldr.w	r5, [r1], #4
 8002a4e:	d402      	bmi.n	8002a56 <_printf_i+0x186>
 8002a50:	065f      	lsls	r7, r3, #25
 8002a52:	bf48      	it	mi
 8002a54:	b2ad      	uxthmi	r5, r5
 8002a56:	6031      	str	r1, [r6, #0]
 8002a58:	07d9      	lsls	r1, r3, #31
 8002a5a:	bf44      	itt	mi
 8002a5c:	f043 0320 	orrmi.w	r3, r3, #32
 8002a60:	6023      	strmi	r3, [r4, #0]
 8002a62:	b11d      	cbz	r5, 8002a6c <_printf_i+0x19c>
 8002a64:	2310      	movs	r3, #16
 8002a66:	e7ad      	b.n	80029c4 <_printf_i+0xf4>
 8002a68:	4826      	ldr	r0, [pc, #152]	@ (8002b04 <_printf_i+0x234>)
 8002a6a:	e7e9      	b.n	8002a40 <_printf_i+0x170>
 8002a6c:	6823      	ldr	r3, [r4, #0]
 8002a6e:	f023 0320 	bic.w	r3, r3, #32
 8002a72:	6023      	str	r3, [r4, #0]
 8002a74:	e7f6      	b.n	8002a64 <_printf_i+0x194>
 8002a76:	4616      	mov	r6, r2
 8002a78:	e7bd      	b.n	80029f6 <_printf_i+0x126>
 8002a7a:	6833      	ldr	r3, [r6, #0]
 8002a7c:	6825      	ldr	r5, [r4, #0]
 8002a7e:	1d18      	adds	r0, r3, #4
 8002a80:	6961      	ldr	r1, [r4, #20]
 8002a82:	6030      	str	r0, [r6, #0]
 8002a84:	062e      	lsls	r6, r5, #24
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	d501      	bpl.n	8002a8e <_printf_i+0x1be>
 8002a8a:	6019      	str	r1, [r3, #0]
 8002a8c:	e002      	b.n	8002a94 <_printf_i+0x1c4>
 8002a8e:	0668      	lsls	r0, r5, #25
 8002a90:	d5fb      	bpl.n	8002a8a <_printf_i+0x1ba>
 8002a92:	8019      	strh	r1, [r3, #0]
 8002a94:	2300      	movs	r3, #0
 8002a96:	4616      	mov	r6, r2
 8002a98:	6123      	str	r3, [r4, #16]
 8002a9a:	e7bc      	b.n	8002a16 <_printf_i+0x146>
 8002a9c:	6833      	ldr	r3, [r6, #0]
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	1d1a      	adds	r2, r3, #4
 8002aa2:	6032      	str	r2, [r6, #0]
 8002aa4:	681e      	ldr	r6, [r3, #0]
 8002aa6:	6862      	ldr	r2, [r4, #4]
 8002aa8:	4630      	mov	r0, r6
 8002aaa:	f000 f893 	bl	8002bd4 <memchr>
 8002aae:	b108      	cbz	r0, 8002ab4 <_printf_i+0x1e4>
 8002ab0:	1b80      	subs	r0, r0, r6
 8002ab2:	6060      	str	r0, [r4, #4]
 8002ab4:	6863      	ldr	r3, [r4, #4]
 8002ab6:	6123      	str	r3, [r4, #16]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002abe:	e7aa      	b.n	8002a16 <_printf_i+0x146>
 8002ac0:	4632      	mov	r2, r6
 8002ac2:	4649      	mov	r1, r9
 8002ac4:	4640      	mov	r0, r8
 8002ac6:	6923      	ldr	r3, [r4, #16]
 8002ac8:	47d0      	blx	sl
 8002aca:	3001      	adds	r0, #1
 8002acc:	d0ad      	beq.n	8002a2a <_printf_i+0x15a>
 8002ace:	6823      	ldr	r3, [r4, #0]
 8002ad0:	079b      	lsls	r3, r3, #30
 8002ad2:	d413      	bmi.n	8002afc <_printf_i+0x22c>
 8002ad4:	68e0      	ldr	r0, [r4, #12]
 8002ad6:	9b03      	ldr	r3, [sp, #12]
 8002ad8:	4298      	cmp	r0, r3
 8002ada:	bfb8      	it	lt
 8002adc:	4618      	movlt	r0, r3
 8002ade:	e7a6      	b.n	8002a2e <_printf_i+0x15e>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	4632      	mov	r2, r6
 8002ae4:	4649      	mov	r1, r9
 8002ae6:	4640      	mov	r0, r8
 8002ae8:	47d0      	blx	sl
 8002aea:	3001      	adds	r0, #1
 8002aec:	d09d      	beq.n	8002a2a <_printf_i+0x15a>
 8002aee:	3501      	adds	r5, #1
 8002af0:	68e3      	ldr	r3, [r4, #12]
 8002af2:	9903      	ldr	r1, [sp, #12]
 8002af4:	1a5b      	subs	r3, r3, r1
 8002af6:	42ab      	cmp	r3, r5
 8002af8:	dcf2      	bgt.n	8002ae0 <_printf_i+0x210>
 8002afa:	e7eb      	b.n	8002ad4 <_printf_i+0x204>
 8002afc:	2500      	movs	r5, #0
 8002afe:	f104 0619 	add.w	r6, r4, #25
 8002b02:	e7f5      	b.n	8002af0 <_printf_i+0x220>
 8002b04:	08002cfd 	.word	0x08002cfd
 8002b08:	08002d0e 	.word	0x08002d0e

08002b0c <__malloc_lock>:
 8002b0c:	4801      	ldr	r0, [pc, #4]	@ (8002b14 <__malloc_lock+0x8>)
 8002b0e:	f7ff bc71 	b.w	80023f4 <__retarget_lock_acquire_recursive>
 8002b12:	bf00      	nop
 8002b14:	20000208 	.word	0x20000208

08002b18 <__malloc_unlock>:
 8002b18:	4801      	ldr	r0, [pc, #4]	@ (8002b20 <__malloc_unlock+0x8>)
 8002b1a:	f7ff bc6c 	b.w	80023f6 <__retarget_lock_release_recursive>
 8002b1e:	bf00      	nop
 8002b20:	20000208 	.word	0x20000208

08002b24 <_realloc_r>:
 8002b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b28:	4607      	mov	r7, r0
 8002b2a:	4614      	mov	r4, r2
 8002b2c:	460d      	mov	r5, r1
 8002b2e:	b921      	cbnz	r1, 8002b3a <_realloc_r+0x16>
 8002b30:	4611      	mov	r1, r2
 8002b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b36:	f7ff bdd9 	b.w	80026ec <_malloc_r>
 8002b3a:	b92a      	cbnz	r2, 8002b48 <_realloc_r+0x24>
 8002b3c:	f000 f866 	bl	8002c0c <_free_r>
 8002b40:	4625      	mov	r5, r4
 8002b42:	4628      	mov	r0, r5
 8002b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b48:	f000 f8a8 	bl	8002c9c <_malloc_usable_size_r>
 8002b4c:	4284      	cmp	r4, r0
 8002b4e:	4606      	mov	r6, r0
 8002b50:	d802      	bhi.n	8002b58 <_realloc_r+0x34>
 8002b52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002b56:	d8f4      	bhi.n	8002b42 <_realloc_r+0x1e>
 8002b58:	4621      	mov	r1, r4
 8002b5a:	4638      	mov	r0, r7
 8002b5c:	f7ff fdc6 	bl	80026ec <_malloc_r>
 8002b60:	4680      	mov	r8, r0
 8002b62:	b908      	cbnz	r0, 8002b68 <_realloc_r+0x44>
 8002b64:	4645      	mov	r5, r8
 8002b66:	e7ec      	b.n	8002b42 <_realloc_r+0x1e>
 8002b68:	42b4      	cmp	r4, r6
 8002b6a:	4622      	mov	r2, r4
 8002b6c:	4629      	mov	r1, r5
 8002b6e:	bf28      	it	cs
 8002b70:	4632      	movcs	r2, r6
 8002b72:	f000 f83d 	bl	8002bf0 <memcpy>
 8002b76:	4629      	mov	r1, r5
 8002b78:	4638      	mov	r0, r7
 8002b7a:	f000 f847 	bl	8002c0c <_free_r>
 8002b7e:	e7f1      	b.n	8002b64 <_realloc_r+0x40>

08002b80 <memmove>:
 8002b80:	4288      	cmp	r0, r1
 8002b82:	b510      	push	{r4, lr}
 8002b84:	eb01 0402 	add.w	r4, r1, r2
 8002b88:	d902      	bls.n	8002b90 <memmove+0x10>
 8002b8a:	4284      	cmp	r4, r0
 8002b8c:	4623      	mov	r3, r4
 8002b8e:	d807      	bhi.n	8002ba0 <memmove+0x20>
 8002b90:	1e43      	subs	r3, r0, #1
 8002b92:	42a1      	cmp	r1, r4
 8002b94:	d008      	beq.n	8002ba8 <memmove+0x28>
 8002b96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002b9e:	e7f8      	b.n	8002b92 <memmove+0x12>
 8002ba0:	4601      	mov	r1, r0
 8002ba2:	4402      	add	r2, r0
 8002ba4:	428a      	cmp	r2, r1
 8002ba6:	d100      	bne.n	8002baa <memmove+0x2a>
 8002ba8:	bd10      	pop	{r4, pc}
 8002baa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002bae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002bb2:	e7f7      	b.n	8002ba4 <memmove+0x24>

08002bb4 <_sbrk_r>:
 8002bb4:	b538      	push	{r3, r4, r5, lr}
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	4d05      	ldr	r5, [pc, #20]	@ (8002bd0 <_sbrk_r+0x1c>)
 8002bba:	4604      	mov	r4, r0
 8002bbc:	4608      	mov	r0, r1
 8002bbe:	602b      	str	r3, [r5, #0]
 8002bc0:	f7fe f984 	bl	8000ecc <_sbrk>
 8002bc4:	1c43      	adds	r3, r0, #1
 8002bc6:	d102      	bne.n	8002bce <_sbrk_r+0x1a>
 8002bc8:	682b      	ldr	r3, [r5, #0]
 8002bca:	b103      	cbz	r3, 8002bce <_sbrk_r+0x1a>
 8002bcc:	6023      	str	r3, [r4, #0]
 8002bce:	bd38      	pop	{r3, r4, r5, pc}
 8002bd0:	20000214 	.word	0x20000214

08002bd4 <memchr>:
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	b510      	push	{r4, lr}
 8002bd8:	b2c9      	uxtb	r1, r1
 8002bda:	4402      	add	r2, r0
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	4618      	mov	r0, r3
 8002be0:	d101      	bne.n	8002be6 <memchr+0x12>
 8002be2:	2000      	movs	r0, #0
 8002be4:	e003      	b.n	8002bee <memchr+0x1a>
 8002be6:	7804      	ldrb	r4, [r0, #0]
 8002be8:	3301      	adds	r3, #1
 8002bea:	428c      	cmp	r4, r1
 8002bec:	d1f6      	bne.n	8002bdc <memchr+0x8>
 8002bee:	bd10      	pop	{r4, pc}

08002bf0 <memcpy>:
 8002bf0:	440a      	add	r2, r1
 8002bf2:	4291      	cmp	r1, r2
 8002bf4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8002bf8:	d100      	bne.n	8002bfc <memcpy+0xc>
 8002bfa:	4770      	bx	lr
 8002bfc:	b510      	push	{r4, lr}
 8002bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c02:	4291      	cmp	r1, r2
 8002c04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c08:	d1f9      	bne.n	8002bfe <memcpy+0xe>
 8002c0a:	bd10      	pop	{r4, pc}

08002c0c <_free_r>:
 8002c0c:	b538      	push	{r3, r4, r5, lr}
 8002c0e:	4605      	mov	r5, r0
 8002c10:	2900      	cmp	r1, #0
 8002c12:	d040      	beq.n	8002c96 <_free_r+0x8a>
 8002c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c18:	1f0c      	subs	r4, r1, #4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	bfb8      	it	lt
 8002c1e:	18e4      	addlt	r4, r4, r3
 8002c20:	f7ff ff74 	bl	8002b0c <__malloc_lock>
 8002c24:	4a1c      	ldr	r2, [pc, #112]	@ (8002c98 <_free_r+0x8c>)
 8002c26:	6813      	ldr	r3, [r2, #0]
 8002c28:	b933      	cbnz	r3, 8002c38 <_free_r+0x2c>
 8002c2a:	6063      	str	r3, [r4, #4]
 8002c2c:	6014      	str	r4, [r2, #0]
 8002c2e:	4628      	mov	r0, r5
 8002c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c34:	f7ff bf70 	b.w	8002b18 <__malloc_unlock>
 8002c38:	42a3      	cmp	r3, r4
 8002c3a:	d908      	bls.n	8002c4e <_free_r+0x42>
 8002c3c:	6820      	ldr	r0, [r4, #0]
 8002c3e:	1821      	adds	r1, r4, r0
 8002c40:	428b      	cmp	r3, r1
 8002c42:	bf01      	itttt	eq
 8002c44:	6819      	ldreq	r1, [r3, #0]
 8002c46:	685b      	ldreq	r3, [r3, #4]
 8002c48:	1809      	addeq	r1, r1, r0
 8002c4a:	6021      	streq	r1, [r4, #0]
 8002c4c:	e7ed      	b.n	8002c2a <_free_r+0x1e>
 8002c4e:	461a      	mov	r2, r3
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	b10b      	cbz	r3, 8002c58 <_free_r+0x4c>
 8002c54:	42a3      	cmp	r3, r4
 8002c56:	d9fa      	bls.n	8002c4e <_free_r+0x42>
 8002c58:	6811      	ldr	r1, [r2, #0]
 8002c5a:	1850      	adds	r0, r2, r1
 8002c5c:	42a0      	cmp	r0, r4
 8002c5e:	d10b      	bne.n	8002c78 <_free_r+0x6c>
 8002c60:	6820      	ldr	r0, [r4, #0]
 8002c62:	4401      	add	r1, r0
 8002c64:	1850      	adds	r0, r2, r1
 8002c66:	4283      	cmp	r3, r0
 8002c68:	6011      	str	r1, [r2, #0]
 8002c6a:	d1e0      	bne.n	8002c2e <_free_r+0x22>
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4408      	add	r0, r1
 8002c72:	6010      	str	r0, [r2, #0]
 8002c74:	6053      	str	r3, [r2, #4]
 8002c76:	e7da      	b.n	8002c2e <_free_r+0x22>
 8002c78:	d902      	bls.n	8002c80 <_free_r+0x74>
 8002c7a:	230c      	movs	r3, #12
 8002c7c:	602b      	str	r3, [r5, #0]
 8002c7e:	e7d6      	b.n	8002c2e <_free_r+0x22>
 8002c80:	6820      	ldr	r0, [r4, #0]
 8002c82:	1821      	adds	r1, r4, r0
 8002c84:	428b      	cmp	r3, r1
 8002c86:	bf01      	itttt	eq
 8002c88:	6819      	ldreq	r1, [r3, #0]
 8002c8a:	685b      	ldreq	r3, [r3, #4]
 8002c8c:	1809      	addeq	r1, r1, r0
 8002c8e:	6021      	streq	r1, [r4, #0]
 8002c90:	6063      	str	r3, [r4, #4]
 8002c92:	6054      	str	r4, [r2, #4]
 8002c94:	e7cb      	b.n	8002c2e <_free_r+0x22>
 8002c96:	bd38      	pop	{r3, r4, r5, pc}
 8002c98:	20000210 	.word	0x20000210

08002c9c <_malloc_usable_size_r>:
 8002c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ca0:	1f18      	subs	r0, r3, #4
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	bfbc      	itt	lt
 8002ca6:	580b      	ldrlt	r3, [r1, r0]
 8002ca8:	18c0      	addlt	r0, r0, r3
 8002caa:	4770      	bx	lr

08002cac <_init>:
 8002cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cae:	bf00      	nop
 8002cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cb2:	bc08      	pop	{r3}
 8002cb4:	469e      	mov	lr, r3
 8002cb6:	4770      	bx	lr

08002cb8 <_fini>:
 8002cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cba:	bf00      	nop
 8002cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cbe:	bc08      	pop	{r3}
 8002cc0:	469e      	mov	lr, r3
 8002cc2:	4770      	bx	lr
