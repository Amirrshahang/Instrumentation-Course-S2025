
q3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001574  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08001680  08001680  00002680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016b4  080016b4  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080016b4  080016b4  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080016b4  080016b4  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016b4  080016b4  000026b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080016b8  080016b8  000026b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080016bc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080016c8  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080016c8  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003144  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000113d  00000000  00000000  00006179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000460  00000000  00000000  000072b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000031e  00000000  00000000  00007718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012e54  00000000  00000000  00007a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005592  00000000  00000000  0001a88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00065403  00000000  00000000  0001fe1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008521f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ef8  00000000  00000000  00085264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0008615c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001668 	.word	0x08001668

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001668 	.word	0x08001668

0800014c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0308 	add.w	r3, r7, #8
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000160:	4b1e      	ldr	r3, [pc, #120]	@ (80001dc <MX_GPIO_Init+0x90>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a1d      	ldr	r2, [pc, #116]	@ (80001dc <MX_GPIO_Init+0x90>)
 8000166:	f043 0304 	orr.w	r3, r3, #4
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b1b      	ldr	r3, [pc, #108]	@ (80001dc <MX_GPIO_Init+0x90>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0304 	and.w	r3, r3, #4
 8000174:	607b      	str	r3, [r7, #4]
 8000176:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000178:	4b18      	ldr	r3, [pc, #96]	@ (80001dc <MX_GPIO_Init+0x90>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a17      	ldr	r2, [pc, #92]	@ (80001dc <MX_GPIO_Init+0x90>)
 800017e:	f043 0308 	orr.w	r3, r3, #8
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b15      	ldr	r3, [pc, #84]	@ (80001dc <MX_GPIO_Init+0x90>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0308 	and.w	r3, r3, #8
 800018c:	603b      	str	r3, [r7, #0]
 800018e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000190:	2200      	movs	r2, #0
 8000192:	f647 4103 	movw	r1, #31747	@ 0x7c03
 8000196:	4812      	ldr	r0, [pc, #72]	@ (80001e0 <MX_GPIO_Init+0x94>)
 8000198:	f000 fd83 	bl	8000ca2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001a4:	2300      	movs	r3, #0
 80001a6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001a8:	f107 0308 	add.w	r3, r7, #8
 80001ac:	4619      	mov	r1, r3
 80001ae:	480d      	ldr	r0, [pc, #52]	@ (80001e4 <MX_GPIO_Init+0x98>)
 80001b0:	f000 fbe4 	bl	800097c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80001b4:	f647 4303 	movw	r3, #31747	@ 0x7c03
 80001b8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ba:	2301      	movs	r3, #1
 80001bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001be:	2300      	movs	r3, #0
 80001c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001c2:	2302      	movs	r3, #2
 80001c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001c6:	f107 0308 	add.w	r3, r7, #8
 80001ca:	4619      	mov	r1, r3
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <MX_GPIO_Init+0x94>)
 80001ce:	f000 fbd5 	bl	800097c <HAL_GPIO_Init>

}
 80001d2:	bf00      	nop
 80001d4:	3718      	adds	r7, #24
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	40021000 	.word	0x40021000
 80001e0:	40010c00 	.word	0x40010c00
 80001e4:	40010800 	.word	0x40010800

080001e8 <LCD_Delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void LCD_Delay(uint32_t time) {
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  for (uint32_t i = 0; i < time * 10; i++) __NOP();
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e003      	b.n	80001fe <LCD_Delay+0x16>
 80001f6:	bf00      	nop
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	3301      	adds	r3, #1
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	687a      	ldr	r2, [r7, #4]
 8000200:	4613      	mov	r3, r2
 8000202:	009b      	lsls	r3, r3, #2
 8000204:	4413      	add	r3, r2
 8000206:	005b      	lsls	r3, r3, #1
 8000208:	461a      	mov	r2, r3
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	4293      	cmp	r3, r2
 800020e:	d3f2      	bcc.n	80001f6 <LCD_Delay+0xe>
}
 8000210:	bf00      	nop
 8000212:	bf00      	nop
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr

0800021c <LCD_EnablePulse>:

void LCD_EnablePulse(void) {
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_Port, EN_Pin, GPIO_PIN_SET);
 8000220:	2201      	movs	r2, #1
 8000222:	2102      	movs	r1, #2
 8000224:	4807      	ldr	r0, [pc, #28]	@ (8000244 <LCD_EnablePulse+0x28>)
 8000226:	f000 fd3c 	bl	8000ca2 <HAL_GPIO_WritePin>
  LCD_Delay(2);
 800022a:	2002      	movs	r0, #2
 800022c:	f7ff ffdc 	bl	80001e8 <LCD_Delay>
  HAL_GPIO_WritePin(LCD_Port, EN_Pin, GPIO_PIN_RESET);
 8000230:	2200      	movs	r2, #0
 8000232:	2102      	movs	r1, #2
 8000234:	4803      	ldr	r0, [pc, #12]	@ (8000244 <LCD_EnablePulse+0x28>)
 8000236:	f000 fd34 	bl	8000ca2 <HAL_GPIO_WritePin>
  LCD_Delay(2);
 800023a:	2002      	movs	r0, #2
 800023c:	f7ff ffd4 	bl	80001e8 <LCD_Delay>
}
 8000240:	bf00      	nop
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40010c00 	.word	0x40010c00

08000248 <LCD_Send4Bits>:

void LCD_Send4Bits(uint8_t data) {
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_Port, D4_Pin, (data >> 0) & 1);
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	f003 0301 	and.w	r3, r3, #1
 8000258:	b2db      	uxtb	r3, r3
 800025a:	461a      	mov	r2, r3
 800025c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000260:	4816      	ldr	r0, [pc, #88]	@ (80002bc <LCD_Send4Bits+0x74>)
 8000262:	f000 fd1e 	bl	8000ca2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_Port, D5_Pin, (data >> 1) & 1);
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	085b      	lsrs	r3, r3, #1
 800026a:	b2db      	uxtb	r3, r3
 800026c:	f003 0301 	and.w	r3, r3, #1
 8000270:	b2db      	uxtb	r3, r3
 8000272:	461a      	mov	r2, r3
 8000274:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000278:	4810      	ldr	r0, [pc, #64]	@ (80002bc <LCD_Send4Bits+0x74>)
 800027a:	f000 fd12 	bl	8000ca2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_Port, D6_Pin, (data >> 2) & 1);
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	089b      	lsrs	r3, r3, #2
 8000282:	b2db      	uxtb	r3, r3
 8000284:	f003 0301 	and.w	r3, r3, #1
 8000288:	b2db      	uxtb	r3, r3
 800028a:	461a      	mov	r2, r3
 800028c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000290:	480a      	ldr	r0, [pc, #40]	@ (80002bc <LCD_Send4Bits+0x74>)
 8000292:	f000 fd06 	bl	8000ca2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_Port, D7_Pin, (data >> 3) & 1);
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	08db      	lsrs	r3, r3, #3
 800029a:	b2db      	uxtb	r3, r3
 800029c:	f003 0301 	and.w	r3, r3, #1
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	461a      	mov	r2, r3
 80002a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002a8:	4804      	ldr	r0, [pc, #16]	@ (80002bc <LCD_Send4Bits+0x74>)
 80002aa:	f000 fcfa 	bl	8000ca2 <HAL_GPIO_WritePin>
  LCD_EnablePulse();
 80002ae:	f7ff ffb5 	bl	800021c <LCD_EnablePulse>
}
 80002b2:	bf00      	nop
 80002b4:	3708      	adds	r7, #8
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40010c00 	.word	0x40010c00

080002c0 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_Port, RS_Pin, GPIO_PIN_RESET);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2101      	movs	r1, #1
 80002ce:	480b      	ldr	r0, [pc, #44]	@ (80002fc <LCD_SendCommand+0x3c>)
 80002d0:	f000 fce7 	bl	8000ca2 <HAL_GPIO_WritePin>
  LCD_Send4Bits(cmd >> 4);
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	091b      	lsrs	r3, r3, #4
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	4618      	mov	r0, r3
 80002dc:	f7ff ffb4 	bl	8000248 <LCD_Send4Bits>
  LCD_Send4Bits(cmd & 0x0F);
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	f003 030f 	and.w	r3, r3, #15
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ffad 	bl	8000248 <LCD_Send4Bits>
  LCD_Delay(5);
 80002ee:	2005      	movs	r0, #5
 80002f0:	f7ff ff7a 	bl	80001e8 <LCD_Delay>
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40010c00 	.word	0x40010c00

08000300 <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_Port, RS_Pin, GPIO_PIN_SET);
 800030a:	2201      	movs	r2, #1
 800030c:	2101      	movs	r1, #1
 800030e:	480b      	ldr	r0, [pc, #44]	@ (800033c <LCD_SendData+0x3c>)
 8000310:	f000 fcc7 	bl	8000ca2 <HAL_GPIO_WritePin>
  LCD_Send4Bits(data >> 4);
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	091b      	lsrs	r3, r3, #4
 8000318:	b2db      	uxtb	r3, r3
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ff94 	bl	8000248 <LCD_Send4Bits>
  LCD_Send4Bits(data & 0x0F);
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 030f 	and.w	r3, r3, #15
 8000326:	b2db      	uxtb	r3, r3
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ff8d 	bl	8000248 <LCD_Send4Bits>
  LCD_Delay(5);
 800032e:	2005      	movs	r0, #5
 8000330:	f7ff ff5a 	bl	80001e8 <LCD_Delay>
}
 8000334:	bf00      	nop
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	40010c00 	.word	0x40010c00

08000340 <LCD_SendString>:

void LCD_SendString(char* str) {
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  while (*str) LCD_SendData(*str++);
 8000348:	e006      	b.n	8000358 <LCD_SendString+0x18>
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	1c5a      	adds	r2, r3, #1
 800034e:	607a      	str	r2, [r7, #4]
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ffd4 	bl	8000300 <LCD_SendData>
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d1f4      	bne.n	800034a <LCD_SendString+0xa>
}
 8000360:	bf00      	nop
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}

0800036a <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 800036a:	b580      	push	{r7, lr}
 800036c:	b084      	sub	sp, #16
 800036e:	af00      	add	r7, sp, #0
 8000370:	4603      	mov	r3, r0
 8000372:	460a      	mov	r2, r1
 8000374:	71fb      	strb	r3, [r7, #7]
 8000376:	4613      	mov	r3, r2
 8000378:	71bb      	strb	r3, [r7, #6]
  uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d103      	bne.n	8000388 <LCD_SetCursor+0x1e>
 8000380:	79bb      	ldrb	r3, [r7, #6]
 8000382:	3b80      	subs	r3, #128	@ 0x80
 8000384:	b2db      	uxtb	r3, r3
 8000386:	e002      	b.n	800038e <LCD_SetCursor+0x24>
 8000388:	79bb      	ldrb	r3, [r7, #6]
 800038a:	3b40      	subs	r3, #64	@ 0x40
 800038c:	b2db      	uxtb	r3, r3
 800038e:	73fb      	strb	r3, [r7, #15]
  LCD_SendCommand(pos);
 8000390:	7bfb      	ldrb	r3, [r7, #15]
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ff94 	bl	80002c0 <LCD_SendCommand>
}
 8000398:	bf00      	nop
 800039a:	3710      	adds	r7, #16
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <LCD_Init>:

void LCD_Init(void) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  LCD_Delay(500);
 80003a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003a8:	f7ff ff1e 	bl	80001e8 <LCD_Delay>
  LCD_Send4Bits(0x03); LCD_Delay(50);
 80003ac:	2003      	movs	r0, #3
 80003ae:	f7ff ff4b 	bl	8000248 <LCD_Send4Bits>
 80003b2:	2032      	movs	r0, #50	@ 0x32
 80003b4:	f7ff ff18 	bl	80001e8 <LCD_Delay>
  LCD_Send4Bits(0x03); LCD_Delay(50);
 80003b8:	2003      	movs	r0, #3
 80003ba:	f7ff ff45 	bl	8000248 <LCD_Send4Bits>
 80003be:	2032      	movs	r0, #50	@ 0x32
 80003c0:	f7ff ff12 	bl	80001e8 <LCD_Delay>
  LCD_Send4Bits(0x03); LCD_Delay(50);
 80003c4:	2003      	movs	r0, #3
 80003c6:	f7ff ff3f 	bl	8000248 <LCD_Send4Bits>
 80003ca:	2032      	movs	r0, #50	@ 0x32
 80003cc:	f7ff ff0c 	bl	80001e8 <LCD_Delay>
  LCD_Send4Bits(0x02);
 80003d0:	2002      	movs	r0, #2
 80003d2:	f7ff ff39 	bl	8000248 <LCD_Send4Bits>

  LCD_SendCommand(0x28);
 80003d6:	2028      	movs	r0, #40	@ 0x28
 80003d8:	f7ff ff72 	bl	80002c0 <LCD_SendCommand>
  LCD_SendCommand(0x0C);
 80003dc:	200c      	movs	r0, #12
 80003de:	f7ff ff6f 	bl	80002c0 <LCD_SendCommand>
  LCD_SendCommand(0x06);
 80003e2:	2006      	movs	r0, #6
 80003e4:	f7ff ff6c 	bl	80002c0 <LCD_SendCommand>
  LCD_SendCommand(0x01);
 80003e8:	2001      	movs	r0, #1
 80003ea:	f7ff ff69 	bl	80002c0 <LCD_SendCommand>
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}

080003f2 <LCD_Clear>:
void LCD_Clear(void) {
 80003f2:	b580      	push	{r7, lr}
 80003f4:	af00      	add	r7, sp, #0
  LCD_SendCommand(0x01);
 80003f6:	2001      	movs	r0, #1
 80003f8:	f7ff ff62 	bl	80002c0 <LCD_SendCommand>
  LCD_Delay(2);
 80003fc:	2002      	movs	r0, #2
 80003fe:	f7ff fef3 	bl	80001e8 <LCD_Delay>
}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
	...

08000408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040e:	f000 f94b 	bl	80006a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000412:	f000 f845 	bl	80004a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000416:	f7ff fe99 	bl	800014c <MX_GPIO_Init>

  /* USER CODE BEGIN 2 */


    LCD_Init();
 800041a:	f7ff ffc1 	bl	80003a0 <LCD_Init>
    LCD_SetCursor(0, 0);
 800041e:	2100      	movs	r1, #0
 8000420:	2000      	movs	r0, #0
 8000422:	f7ff ffa2 	bl	800036a <LCD_SetCursor>


    uint8_t button_pressed = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	71fb      	strb	r3, [r7, #7]
    uint8_t last_button_state = 1;
 800042a:	2301      	movs	r3, #1
 800042c:	71bb      	strb	r3, [r7, #6]
    uint8_t current_button_state = 0;
 800042e:	2300      	movs	r3, #0
 8000430:	713b      	strb	r3, [r7, #4]
    uint8_t lcd_state = 255;
 8000432:	23ff      	movs	r3, #255	@ 0xff
 8000434:	717b      	strb	r3, [r7, #5]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  current_button_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000436:	2101      	movs	r1, #1
 8000438:	4816      	ldr	r0, [pc, #88]	@ (8000494 <main+0x8c>)
 800043a:	f000 fc1b 	bl	8000c74 <HAL_GPIO_ReadPin>
 800043e:	4603      	mov	r3, r0
 8000440:	713b      	strb	r3, [r7, #4]
	    	 	  if (current_button_state == 1 && last_button_state == 1)
 8000442:	793b      	ldrb	r3, [r7, #4]
 8000444:	2b01      	cmp	r3, #1
 8000446:	d104      	bne.n	8000452 <main+0x4a>
 8000448:	79bb      	ldrb	r3, [r7, #6]
 800044a:	2b01      	cmp	r3, #1
 800044c:	d101      	bne.n	8000452 <main+0x4a>
	    	 	  	    		{
	    	 	  	    			button_pressed = 1;
 800044e:	2301      	movs	r3, #1
 8000450:	71fb      	strb	r3, [r7, #7]
	    	 	  	    		}
	    	 		last_button_state = current_button_state;
 8000452:	793b      	ldrb	r3, [r7, #4]
 8000454:	71bb      	strb	r3, [r7, #6]
	    	 		if (button_pressed)
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d00c      	beq.n	8000476 <main+0x6e>
	    	 			    		{
	    	 			    			button_pressed = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	71fb      	strb	r3, [r7, #7]
	    	 			    			if (lcd_state != 1) {
 8000460:	797b      	ldrb	r3, [r7, #5]
 8000462:	2b01      	cmp	r3, #1
 8000464:	d011      	beq.n	800048a <main+0x82>
	    	 			    				LCD_Clear();
 8000466:	f7ff ffc4 	bl	80003f2 <LCD_Clear>
	    	 			    				LCD_SendString("Touched");
 800046a:	480b      	ldr	r0, [pc, #44]	@ (8000498 <main+0x90>)
 800046c:	f7ff ff68 	bl	8000340 <LCD_SendString>
	    	 			    				lcd_state = 1;
 8000470:	2301      	movs	r3, #1
 8000472:	717b      	strb	r3, [r7, #5]
 8000474:	e009      	b.n	800048a <main+0x82>
	    	 			    			}

	    	 			    		}
	    	 		else {
	    	 			if (lcd_state != 0) {
 8000476:	797b      	ldrb	r3, [r7, #5]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d006      	beq.n	800048a <main+0x82>
	    	 							LCD_Clear();
 800047c:	f7ff ffb9 	bl	80003f2 <LCD_Clear>
	    	 						    LCD_SendString("Not Touched");
 8000480:	4806      	ldr	r0, [pc, #24]	@ (800049c <main+0x94>)
 8000482:	f7ff ff5d 	bl	8000340 <LCD_SendString>
	    	 						   lcd_state = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	717b      	strb	r3, [r7, #5]
	    	 			}
	    	 		}
	    	 		HAL_Delay(10);
 800048a:	200a      	movs	r0, #10
 800048c:	f000 f96e 	bl	800076c <HAL_Delay>
	  current_button_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000490:	e7d1      	b.n	8000436 <main+0x2e>
 8000492:	bf00      	nop
 8000494:	40010800 	.word	0x40010800
 8000498:	08001680 	.word	0x08001680
 800049c:	08001688 	.word	0x08001688

080004a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b094      	sub	sp, #80	@ 0x50
 80004a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004aa:	2228      	movs	r2, #40	@ 0x28
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f001 f8ae 	bl	8001610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b4:	f107 0314 	add.w	r3, r7, #20
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
 80004c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004d0:	2302      	movs	r3, #2
 80004d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d4:	2301      	movs	r3, #1
 80004d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004d8:	2310      	movs	r3, #16
 80004da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004dc:	2302      	movs	r3, #2
 80004de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80004e0:	2300      	movs	r3, #0
 80004e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 80004e4:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 80004e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 fbf0 	bl	8000cd4 <HAL_RCC_OscConfig>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004fa:	f000 f826 	bl	800054a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004fe:	230f      	movs	r3, #15
 8000500:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000502:	2302      	movs	r3, #2
 8000504:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000506:	2380      	movs	r3, #128	@ 0x80
 8000508:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	2100      	movs	r1, #0
 8000518:	4618      	mov	r0, r3
 800051a:	f000 fe5d 	bl	80011d8 <HAL_RCC_ClockConfig>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000524:	f000 f811 	bl	800054a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000528:	2302      	movs	r3, #2
 800052a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	4618      	mov	r0, r3
 8000534:	f000 ffb6 	bl	80014a4 <HAL_RCCEx_PeriphCLKConfig>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800053e:	f000 f804 	bl	800054a <Error_Handler>
  }
}
 8000542:	bf00      	nop
 8000544:	3750      	adds	r7, #80	@ 0x50
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800054e:	b672      	cpsid	i
}
 8000550:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000552:	bf00      	nop
 8000554:	e7fd      	b.n	8000552 <Error_Handler+0x8>
	...

08000558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800055e:	4b0e      	ldr	r3, [pc, #56]	@ (8000598 <HAL_MspInit+0x40>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a0d      	ldr	r2, [pc, #52]	@ (8000598 <HAL_MspInit+0x40>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6193      	str	r3, [r2, #24]
 800056a:	4b0b      	ldr	r3, [pc, #44]	@ (8000598 <HAL_MspInit+0x40>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000576:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <HAL_MspInit+0x40>)
 8000578:	69db      	ldr	r3, [r3, #28]
 800057a:	4a07      	ldr	r2, [pc, #28]	@ (8000598 <HAL_MspInit+0x40>)
 800057c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000580:	61d3      	str	r3, [r2, #28]
 8000582:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <HAL_MspInit+0x40>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	40021000 	.word	0x40021000

0800059c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <NMI_Handler+0x4>

080005a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <HardFault_Handler+0x4>

080005ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <MemManage_Handler+0x4>

080005b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <BusFault_Handler+0x4>

080005bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <UsageFault_Handler+0x4>

080005c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ec:	f000 f8a2 	bl	8000734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80005f8:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <SystemInit+0x5c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a14      	ldr	r2, [pc, #80]	@ (8000650 <SystemInit+0x5c>)
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <SystemInit+0x5c>)
 8000606:	685a      	ldr	r2, [r3, #4]
 8000608:	4911      	ldr	r1, [pc, #68]	@ (8000650 <SystemInit+0x5c>)
 800060a:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <SystemInit+0x60>)
 800060c:	4013      	ands	r3, r2
 800060e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000610:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <SystemInit+0x5c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a0e      	ldr	r2, [pc, #56]	@ (8000650 <SystemInit+0x5c>)
 8000616:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 800061a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800061e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000620:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <SystemInit+0x5c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a0a      	ldr	r2, [pc, #40]	@ (8000650 <SystemInit+0x5c>)
 8000626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800062a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800062c:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <SystemInit+0x5c>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	4a07      	ldr	r2, [pc, #28]	@ (8000650 <SystemInit+0x5c>)
 8000632:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8000636:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000638:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <SystemInit+0x5c>)
 800063a:	f44f 021f 	mov.w	r2, #10420224	@ 0x9f0000
 800063e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000640:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <SystemInit+0x64>)
 8000642:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000646:	609a      	str	r2, [r3, #8]
#endif 
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	40021000 	.word	0x40021000
 8000654:	f8ff0000 	.word	0xf8ff0000
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800065c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800065e:	e003      	b.n	8000668 <LoopCopyDataInit>

08000660 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000660:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000662:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000664:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000666:	3104      	adds	r1, #4

08000668 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000668:	480a      	ldr	r0, [pc, #40]	@ (8000694 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800066a:	4b0b      	ldr	r3, [pc, #44]	@ (8000698 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800066c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800066e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000670:	d3f6      	bcc.n	8000660 <CopyDataInit>
  ldr r2, =_sbss
 8000672:	4a0a      	ldr	r2, [pc, #40]	@ (800069c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000674:	e002      	b.n	800067c <LoopFillZerobss>

08000676 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000678:	f842 3b04 	str.w	r3, [r2], #4

0800067c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800067c:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800067e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000680:	d3f9      	bcc.n	8000676 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000682:	f7ff ffb7 	bl	80005f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000686:	f000 ffcb 	bl	8001620 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068a:	f7ff febd 	bl	8000408 <main>
  bx lr
 800068e:	4770      	bx	lr
  ldr r3, =_sidata
 8000690:	080016bc 	.word	0x080016bc
  ldr r0, =_sdata
 8000694:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000698:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800069c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80006a0:	2000002c 	.word	0x2000002c

080006a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a4:	e7fe      	b.n	80006a4 <ADC1_2_IRQHandler>
	...

080006a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006ac:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <HAL_Init+0x28>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a07      	ldr	r2, [pc, #28]	@ (80006d0 <HAL_Init+0x28>)
 80006b2:	f043 0310 	orr.w	r3, r3, #16
 80006b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b8:	2003      	movs	r0, #3
 80006ba:	f000 f92b 	bl	8000914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006be:	200f      	movs	r0, #15
 80006c0:	f000 f808 	bl	80006d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006c4:	f7ff ff48 	bl	8000558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006c8:	2300      	movs	r3, #0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40022000 	.word	0x40022000

080006d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <HAL_InitTick+0x54>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <HAL_InitTick+0x58>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	4619      	mov	r1, r3
 80006e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 f935 	bl	8000962 <HAL_SYSTICK_Config>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
 8000700:	e00e      	b.n	8000720 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b0f      	cmp	r3, #15
 8000706:	d80a      	bhi.n	800071e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000708:	2200      	movs	r2, #0
 800070a:	6879      	ldr	r1, [r7, #4]
 800070c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000710:	f000 f90b 	bl	800092a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000714:	4a06      	ldr	r2, [pc, #24]	@ (8000730 <HAL_InitTick+0x5c>)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800071a:	2300      	movs	r3, #0
 800071c:	e000      	b.n	8000720 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800071e:	2301      	movs	r3, #1
}
 8000720:	4618      	mov	r0, r3
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000000 	.word	0x20000000
 800072c:	20000008 	.word	0x20000008
 8000730:	20000004 	.word	0x20000004

08000734 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000738:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <HAL_IncTick+0x1c>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	461a      	mov	r2, r3
 800073e:	4b05      	ldr	r3, [pc, #20]	@ (8000754 <HAL_IncTick+0x20>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4413      	add	r3, r2
 8000744:	4a03      	ldr	r2, [pc, #12]	@ (8000754 <HAL_IncTick+0x20>)
 8000746:	6013      	str	r3, [r2, #0]
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	20000008 	.word	0x20000008
 8000754:	20000028 	.word	0x20000028

08000758 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return uwTick;
 800075c:	4b02      	ldr	r3, [pc, #8]	@ (8000768 <HAL_GetTick+0x10>)
 800075e:	681b      	ldr	r3, [r3, #0]
}
 8000760:	4618      	mov	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr
 8000768:	20000028 	.word	0x20000028

0800076c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000774:	f7ff fff0 	bl	8000758 <HAL_GetTick>
 8000778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000784:	d005      	beq.n	8000792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000786:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <HAL_Delay+0x44>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	461a      	mov	r2, r3
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	4413      	add	r3, r2
 8000790:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000792:	bf00      	nop
 8000794:	f7ff ffe0 	bl	8000758 <HAL_GetTick>
 8000798:	4602      	mov	r2, r0
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d8f7      	bhi.n	8000794 <HAL_Delay+0x28>
  {
  }
}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000008 	.word	0x20000008

080007b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f003 0307 	and.w	r3, r3, #7
 80007c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c4:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <__NVIC_SetPriorityGrouping+0x44>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007d0:	4013      	ands	r3, r2
 80007d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e6:	4a04      	ldr	r2, [pc, #16]	@ (80007f8 <__NVIC_SetPriorityGrouping+0x44>)
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	60d3      	str	r3, [r2, #12]
}
 80007ec:	bf00      	nop
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000800:	4b04      	ldr	r3, [pc, #16]	@ (8000814 <__NVIC_GetPriorityGrouping+0x18>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	0a1b      	lsrs	r3, r3, #8
 8000806:	f003 0307 	and.w	r3, r3, #7
}
 800080a:	4618      	mov	r0, r3
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	6039      	str	r1, [r7, #0]
 8000822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000828:	2b00      	cmp	r3, #0
 800082a:	db0a      	blt.n	8000842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	b2da      	uxtb	r2, r3
 8000830:	490c      	ldr	r1, [pc, #48]	@ (8000864 <__NVIC_SetPriority+0x4c>)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	0112      	lsls	r2, r2, #4
 8000838:	b2d2      	uxtb	r2, r2
 800083a:	440b      	add	r3, r1
 800083c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000840:	e00a      	b.n	8000858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4908      	ldr	r1, [pc, #32]	@ (8000868 <__NVIC_SetPriority+0x50>)
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	f003 030f 	and.w	r3, r3, #15
 800084e:	3b04      	subs	r3, #4
 8000850:	0112      	lsls	r2, r2, #4
 8000852:	b2d2      	uxtb	r2, r2
 8000854:	440b      	add	r3, r1
 8000856:	761a      	strb	r2, [r3, #24]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000e100 	.word	0xe000e100
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800086c:	b480      	push	{r7}
 800086e:	b089      	sub	sp, #36	@ 0x24
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	f1c3 0307 	rsb	r3, r3, #7
 8000886:	2b04      	cmp	r3, #4
 8000888:	bf28      	it	cs
 800088a:	2304      	movcs	r3, #4
 800088c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3304      	adds	r3, #4
 8000892:	2b06      	cmp	r3, #6
 8000894:	d902      	bls.n	800089c <NVIC_EncodePriority+0x30>
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	3b03      	subs	r3, #3
 800089a:	e000      	b.n	800089e <NVIC_EncodePriority+0x32>
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	43da      	mvns	r2, r3
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	401a      	ands	r2, r3
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	fa01 f303 	lsl.w	r3, r1, r3
 80008be:	43d9      	mvns	r1, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	4313      	orrs	r3, r2
         );
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3724      	adds	r7, #36	@ 0x24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3b01      	subs	r3, #1
 80008dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008e0:	d301      	bcc.n	80008e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008e2:	2301      	movs	r3, #1
 80008e4:	e00f      	b.n	8000906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000910 <SysTick_Config+0x40>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ee:	210f      	movs	r1, #15
 80008f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008f4:	f7ff ff90 	bl	8000818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f8:	4b05      	ldr	r3, [pc, #20]	@ (8000910 <SysTick_Config+0x40>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008fe:	4b04      	ldr	r3, [pc, #16]	@ (8000910 <SysTick_Config+0x40>)
 8000900:	2207      	movs	r2, #7
 8000902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	e000e010 	.word	0xe000e010

08000914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff ff49 	bl	80007b4 <__NVIC_SetPriorityGrouping>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800092a:	b580      	push	{r7, lr}
 800092c:	b086      	sub	sp, #24
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
 8000936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800093c:	f7ff ff5e 	bl	80007fc <__NVIC_GetPriorityGrouping>
 8000940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	68b9      	ldr	r1, [r7, #8]
 8000946:	6978      	ldr	r0, [r7, #20]
 8000948:	f7ff ff90 	bl	800086c <NVIC_EncodePriority>
 800094c:	4602      	mov	r2, r0
 800094e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000952:	4611      	mov	r1, r2
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff5f 	bl	8000818 <__NVIC_SetPriority>
}
 800095a:	bf00      	nop
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff ffb0 	bl	80008d0 <SysTick_Config>
 8000970:	4603      	mov	r3, r0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800097c:	b480      	push	{r7}
 800097e:	b08b      	sub	sp, #44	@ 0x2c
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800098e:	e161      	b.n	8000c54 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000990:	2201      	movs	r2, #1
 8000992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	69fa      	ldr	r2, [r7, #28]
 80009a0:	4013      	ands	r3, r2
 80009a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	f040 8150 	bne.w	8000c4e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	4a97      	ldr	r2, [pc, #604]	@ (8000c10 <HAL_GPIO_Init+0x294>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d05e      	beq.n	8000a76 <HAL_GPIO_Init+0xfa>
 80009b8:	4a95      	ldr	r2, [pc, #596]	@ (8000c10 <HAL_GPIO_Init+0x294>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d875      	bhi.n	8000aaa <HAL_GPIO_Init+0x12e>
 80009be:	4a95      	ldr	r2, [pc, #596]	@ (8000c14 <HAL_GPIO_Init+0x298>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d058      	beq.n	8000a76 <HAL_GPIO_Init+0xfa>
 80009c4:	4a93      	ldr	r2, [pc, #588]	@ (8000c14 <HAL_GPIO_Init+0x298>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d86f      	bhi.n	8000aaa <HAL_GPIO_Init+0x12e>
 80009ca:	4a93      	ldr	r2, [pc, #588]	@ (8000c18 <HAL_GPIO_Init+0x29c>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d052      	beq.n	8000a76 <HAL_GPIO_Init+0xfa>
 80009d0:	4a91      	ldr	r2, [pc, #580]	@ (8000c18 <HAL_GPIO_Init+0x29c>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d869      	bhi.n	8000aaa <HAL_GPIO_Init+0x12e>
 80009d6:	4a91      	ldr	r2, [pc, #580]	@ (8000c1c <HAL_GPIO_Init+0x2a0>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d04c      	beq.n	8000a76 <HAL_GPIO_Init+0xfa>
 80009dc:	4a8f      	ldr	r2, [pc, #572]	@ (8000c1c <HAL_GPIO_Init+0x2a0>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d863      	bhi.n	8000aaa <HAL_GPIO_Init+0x12e>
 80009e2:	4a8f      	ldr	r2, [pc, #572]	@ (8000c20 <HAL_GPIO_Init+0x2a4>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d046      	beq.n	8000a76 <HAL_GPIO_Init+0xfa>
 80009e8:	4a8d      	ldr	r2, [pc, #564]	@ (8000c20 <HAL_GPIO_Init+0x2a4>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d85d      	bhi.n	8000aaa <HAL_GPIO_Init+0x12e>
 80009ee:	2b12      	cmp	r3, #18
 80009f0:	d82a      	bhi.n	8000a48 <HAL_GPIO_Init+0xcc>
 80009f2:	2b12      	cmp	r3, #18
 80009f4:	d859      	bhi.n	8000aaa <HAL_GPIO_Init+0x12e>
 80009f6:	a201      	add	r2, pc, #4	@ (adr r2, 80009fc <HAL_GPIO_Init+0x80>)
 80009f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009fc:	08000a77 	.word	0x08000a77
 8000a00:	08000a51 	.word	0x08000a51
 8000a04:	08000a63 	.word	0x08000a63
 8000a08:	08000aa5 	.word	0x08000aa5
 8000a0c:	08000aab 	.word	0x08000aab
 8000a10:	08000aab 	.word	0x08000aab
 8000a14:	08000aab 	.word	0x08000aab
 8000a18:	08000aab 	.word	0x08000aab
 8000a1c:	08000aab 	.word	0x08000aab
 8000a20:	08000aab 	.word	0x08000aab
 8000a24:	08000aab 	.word	0x08000aab
 8000a28:	08000aab 	.word	0x08000aab
 8000a2c:	08000aab 	.word	0x08000aab
 8000a30:	08000aab 	.word	0x08000aab
 8000a34:	08000aab 	.word	0x08000aab
 8000a38:	08000aab 	.word	0x08000aab
 8000a3c:	08000aab 	.word	0x08000aab
 8000a40:	08000a59 	.word	0x08000a59
 8000a44:	08000a6d 	.word	0x08000a6d
 8000a48:	4a76      	ldr	r2, [pc, #472]	@ (8000c24 <HAL_GPIO_Init+0x2a8>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d013      	beq.n	8000a76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a4e:	e02c      	b.n	8000aaa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	623b      	str	r3, [r7, #32]
          break;
 8000a56:	e029      	b.n	8000aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	623b      	str	r3, [r7, #32]
          break;
 8000a60:	e024      	b.n	8000aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	3308      	adds	r3, #8
 8000a68:	623b      	str	r3, [r7, #32]
          break;
 8000a6a:	e01f      	b.n	8000aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	330c      	adds	r3, #12
 8000a72:	623b      	str	r3, [r7, #32]
          break;
 8000a74:	e01a      	b.n	8000aac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d102      	bne.n	8000a84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	623b      	str	r3, [r7, #32]
          break;
 8000a82:	e013      	b.n	8000aac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d105      	bne.n	8000a98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a8c:	2308      	movs	r3, #8
 8000a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	69fa      	ldr	r2, [r7, #28]
 8000a94:	611a      	str	r2, [r3, #16]
          break;
 8000a96:	e009      	b.n	8000aac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a98:	2308      	movs	r3, #8
 8000a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	69fa      	ldr	r2, [r7, #28]
 8000aa0:	615a      	str	r2, [r3, #20]
          break;
 8000aa2:	e003      	b.n	8000aac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
          break;
 8000aa8:	e000      	b.n	8000aac <HAL_GPIO_Init+0x130>
          break;
 8000aaa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	2bff      	cmp	r3, #255	@ 0xff
 8000ab0:	d801      	bhi.n	8000ab6 <HAL_GPIO_Init+0x13a>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	e001      	b.n	8000aba <HAL_GPIO_Init+0x13e>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	2bff      	cmp	r3, #255	@ 0xff
 8000ac0:	d802      	bhi.n	8000ac8 <HAL_GPIO_Init+0x14c>
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	e002      	b.n	8000ace <HAL_GPIO_Init+0x152>
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aca:	3b08      	subs	r3, #8
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	210f      	movs	r1, #15
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	401a      	ands	r2, r3
 8000ae0:	6a39      	ldr	r1, [r7, #32]
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f000 80a9 	beq.w	8000c4e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000afc:	4b4a      	ldr	r3, [pc, #296]	@ (8000c28 <HAL_GPIO_Init+0x2ac>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a49      	ldr	r2, [pc, #292]	@ (8000c28 <HAL_GPIO_Init+0x2ac>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b47      	ldr	r3, [pc, #284]	@ (8000c28 <HAL_GPIO_Init+0x2ac>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b14:	4a45      	ldr	r2, [pc, #276]	@ (8000c2c <HAL_GPIO_Init+0x2b0>)
 8000b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b18:	089b      	lsrs	r3, r3, #2
 8000b1a:	3302      	adds	r3, #2
 8000b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b24:	f003 0303 	and.w	r3, r3, #3
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	220f      	movs	r2, #15
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	4013      	ands	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a3d      	ldr	r2, [pc, #244]	@ (8000c30 <HAL_GPIO_Init+0x2b4>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d00d      	beq.n	8000b5c <HAL_GPIO_Init+0x1e0>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a3c      	ldr	r2, [pc, #240]	@ (8000c34 <HAL_GPIO_Init+0x2b8>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d007      	beq.n	8000b58 <HAL_GPIO_Init+0x1dc>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a3b      	ldr	r2, [pc, #236]	@ (8000c38 <HAL_GPIO_Init+0x2bc>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d101      	bne.n	8000b54 <HAL_GPIO_Init+0x1d8>
 8000b50:	2302      	movs	r3, #2
 8000b52:	e004      	b.n	8000b5e <HAL_GPIO_Init+0x1e2>
 8000b54:	2303      	movs	r3, #3
 8000b56:	e002      	b.n	8000b5e <HAL_GPIO_Init+0x1e2>
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e000      	b.n	8000b5e <HAL_GPIO_Init+0x1e2>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b60:	f002 0203 	and.w	r2, r2, #3
 8000b64:	0092      	lsls	r2, r2, #2
 8000b66:	4093      	lsls	r3, r2
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b6e:	492f      	ldr	r1, [pc, #188]	@ (8000c2c <HAL_GPIO_Init+0x2b0>)
 8000b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b72:	089b      	lsrs	r3, r3, #2
 8000b74:	3302      	adds	r3, #2
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d006      	beq.n	8000b96 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b88:	4b2c      	ldr	r3, [pc, #176]	@ (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	492b      	ldr	r1, [pc, #172]	@ (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	600b      	str	r3, [r1, #0]
 8000b94:	e006      	b.n	8000ba4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b96:	4b29      	ldr	r3, [pc, #164]	@ (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	4927      	ldr	r1, [pc, #156]	@ (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d006      	beq.n	8000bbe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bb0:	4b22      	ldr	r3, [pc, #136]	@ (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	4921      	ldr	r1, [pc, #132]	@ (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	604b      	str	r3, [r1, #4]
 8000bbc:	e006      	b.n	8000bcc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	491d      	ldr	r1, [pc, #116]	@ (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000bc8:	4013      	ands	r3, r2
 8000bca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d006      	beq.n	8000be6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bd8:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000bda:	689a      	ldr	r2, [r3, #8]
 8000bdc:	4917      	ldr	r1, [pc, #92]	@ (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	608b      	str	r3, [r1, #8]
 8000be4:	e006      	b.n	8000bf4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000be6:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000be8:	689a      	ldr	r2, [r3, #8]
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	4913      	ldr	r1, [pc, #76]	@ (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d01f      	beq.n	8000c40 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c00:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000c02:	68da      	ldr	r2, [r3, #12]
 8000c04:	490d      	ldr	r1, [pc, #52]	@ (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	60cb      	str	r3, [r1, #12]
 8000c0c:	e01f      	b.n	8000c4e <HAL_GPIO_Init+0x2d2>
 8000c0e:	bf00      	nop
 8000c10:	10320000 	.word	0x10320000
 8000c14:	10310000 	.word	0x10310000
 8000c18:	10220000 	.word	0x10220000
 8000c1c:	10210000 	.word	0x10210000
 8000c20:	10120000 	.word	0x10120000
 8000c24:	10110000 	.word	0x10110000
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010000 	.word	0x40010000
 8000c30:	40010800 	.word	0x40010800
 8000c34:	40010c00 	.word	0x40010c00
 8000c38:	40011000 	.word	0x40011000
 8000c3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c40:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <HAL_GPIO_Init+0x2f4>)
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	43db      	mvns	r3, r3
 8000c48:	4909      	ldr	r1, [pc, #36]	@ (8000c70 <HAL_GPIO_Init+0x2f4>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c50:	3301      	adds	r3, #1
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f47f ae96 	bne.w	8000990 <HAL_GPIO_Init+0x14>
  }
}
 8000c64:	bf00      	nop
 8000c66:	bf00      	nop
 8000c68:	372c      	adds	r7, #44	@ 0x2c
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	40010400 	.word	0x40010400

08000c74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	887b      	ldrh	r3, [r7, #2]
 8000c86:	4013      	ands	r3, r2
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d002      	beq.n	8000c92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	73fb      	strb	r3, [r7, #15]
 8000c90:	e001      	b.n	8000c96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c92:	2300      	movs	r3, #0
 8000c94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr

08000ca2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	460b      	mov	r3, r1
 8000cac:	807b      	strh	r3, [r7, #2]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cb2:	787b      	ldrb	r3, [r7, #1]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cb8:	887a      	ldrh	r2, [r7, #2]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cbe:	e003      	b.n	8000cc8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cc0:	887b      	ldrh	r3, [r7, #2]
 8000cc2:	041a      	lsls	r2, r3, #16
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	611a      	str	r2, [r3, #16]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
	...

08000cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e272      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f000 8087 	beq.w	8000e02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cf4:	4b92      	ldr	r3, [pc, #584]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 030c 	and.w	r3, r3, #12
 8000cfc:	2b04      	cmp	r3, #4
 8000cfe:	d00c      	beq.n	8000d1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d00:	4b8f      	ldr	r3, [pc, #572]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 030c 	and.w	r3, r3, #12
 8000d08:	2b08      	cmp	r3, #8
 8000d0a:	d112      	bne.n	8000d32 <HAL_RCC_OscConfig+0x5e>
 8000d0c:	4b8c      	ldr	r3, [pc, #560]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d18:	d10b      	bne.n	8000d32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d1a:	4b89      	ldr	r3, [pc, #548]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d06c      	beq.n	8000e00 <HAL_RCC_OscConfig+0x12c>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d168      	bne.n	8000e00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e24c      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d3a:	d106      	bne.n	8000d4a <HAL_RCC_OscConfig+0x76>
 8000d3c:	4b80      	ldr	r3, [pc, #512]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a7f      	ldr	r2, [pc, #508]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	e02e      	b.n	8000da8 <HAL_RCC_OscConfig+0xd4>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10c      	bne.n	8000d6c <HAL_RCC_OscConfig+0x98>
 8000d52:	4b7b      	ldr	r3, [pc, #492]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a7a      	ldr	r2, [pc, #488]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	4b78      	ldr	r3, [pc, #480]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a77      	ldr	r2, [pc, #476]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	e01d      	b.n	8000da8 <HAL_RCC_OscConfig+0xd4>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d74:	d10c      	bne.n	8000d90 <HAL_RCC_OscConfig+0xbc>
 8000d76:	4b72      	ldr	r3, [pc, #456]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a71      	ldr	r2, [pc, #452]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	4b6f      	ldr	r3, [pc, #444]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a6e      	ldr	r2, [pc, #440]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	e00b      	b.n	8000da8 <HAL_RCC_OscConfig+0xd4>
 8000d90:	4b6b      	ldr	r3, [pc, #428]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a6a      	ldr	r2, [pc, #424]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	4b68      	ldr	r3, [pc, #416]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a67      	ldr	r2, [pc, #412]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000da2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000da6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d013      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db0:	f7ff fcd2 	bl	8000758 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db8:	f7ff fcce 	bl	8000758 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b64      	cmp	r3, #100	@ 0x64
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e200      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dca:	4b5d      	ldr	r3, [pc, #372]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0f0      	beq.n	8000db8 <HAL_RCC_OscConfig+0xe4>
 8000dd6:	e014      	b.n	8000e02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fcbe 	bl	8000758 <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de0:	f7ff fcba 	bl	8000758 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b64      	cmp	r3, #100	@ 0x64
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e1ec      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df2:	4b53      	ldr	r3, [pc, #332]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1f0      	bne.n	8000de0 <HAL_RCC_OscConfig+0x10c>
 8000dfe:	e000      	b.n	8000e02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d063      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e0e:	4b4c      	ldr	r3, [pc, #304]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 030c 	and.w	r3, r3, #12
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d00b      	beq.n	8000e32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e1a:	4b49      	ldr	r3, [pc, #292]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 030c 	and.w	r3, r3, #12
 8000e22:	2b08      	cmp	r3, #8
 8000e24:	d11c      	bne.n	8000e60 <HAL_RCC_OscConfig+0x18c>
 8000e26:	4b46      	ldr	r3, [pc, #280]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d116      	bne.n	8000e60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e32:	4b43      	ldr	r3, [pc, #268]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d005      	beq.n	8000e4a <HAL_RCC_OscConfig+0x176>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d001      	beq.n	8000e4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e1c0      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e4a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	4939      	ldr	r1, [pc, #228]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e5e:	e03a      	b.n	8000ed6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d020      	beq.n	8000eaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e68:	4b36      	ldr	r3, [pc, #216]	@ (8000f44 <HAL_RCC_OscConfig+0x270>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6e:	f7ff fc73 	bl	8000758 <HAL_GetTick>
 8000e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e74:	e008      	b.n	8000e88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e76:	f7ff fc6f 	bl	8000758 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d901      	bls.n	8000e88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e1a1      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e88:	4b2d      	ldr	r3, [pc, #180]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0f0      	beq.n	8000e76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e94:	4b2a      	ldr	r3, [pc, #168]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4927      	ldr	r1, [pc, #156]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	600b      	str	r3, [r1, #0]
 8000ea8:	e015      	b.n	8000ed6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eaa:	4b26      	ldr	r3, [pc, #152]	@ (8000f44 <HAL_RCC_OscConfig+0x270>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fc52 	bl	8000758 <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb6:	e008      	b.n	8000eca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb8:	f7ff fc4e 	bl	8000758 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e180      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eca:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f0      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d03a      	beq.n	8000f58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d019      	beq.n	8000f1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eea:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <HAL_RCC_OscConfig+0x274>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef0:	f7ff fc32 	bl	8000758 <HAL_GetTick>
 8000ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef6:	e008      	b.n	8000f0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ef8:	f7ff fc2e 	bl	8000758 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e160      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0f0      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f16:	2001      	movs	r0, #1
 8000f18:	f000 faa6 	bl	8001468 <RCC_Delay>
 8000f1c:	e01c      	b.n	8000f58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <HAL_RCC_OscConfig+0x274>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f24:	f7ff fc18 	bl	8000758 <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f2a:	e00f      	b.n	8000f4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f2c:	f7ff fc14 	bl	8000758 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d908      	bls.n	8000f4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e146      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000
 8000f44:	42420000 	.word	0x42420000
 8000f48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f4c:	4b92      	ldr	r3, [pc, #584]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1e9      	bne.n	8000f2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 80a6 	beq.w	80010b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f66:	2300      	movs	r3, #0
 8000f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f6a:	4b8b      	ldr	r3, [pc, #556]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10d      	bne.n	8000f92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b88      	ldr	r3, [pc, #544]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	4a87      	ldr	r2, [pc, #540]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f80:	61d3      	str	r3, [r2, #28]
 8000f82:	4b85      	ldr	r3, [pc, #532]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f92:	4b82      	ldr	r3, [pc, #520]	@ (800119c <HAL_RCC_OscConfig+0x4c8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d118      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f9e:	4b7f      	ldr	r3, [pc, #508]	@ (800119c <HAL_RCC_OscConfig+0x4c8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a7e      	ldr	r2, [pc, #504]	@ (800119c <HAL_RCC_OscConfig+0x4c8>)
 8000fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000faa:	f7ff fbd5 	bl	8000758 <HAL_GetTick>
 8000fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb0:	e008      	b.n	8000fc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fb2:	f7ff fbd1 	bl	8000758 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b64      	cmp	r3, #100	@ 0x64
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e103      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc4:	4b75      	ldr	r3, [pc, #468]	@ (800119c <HAL_RCC_OscConfig+0x4c8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0f0      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d106      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x312>
 8000fd8:	4b6f      	ldr	r3, [pc, #444]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	4a6e      	ldr	r2, [pc, #440]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6213      	str	r3, [r2, #32]
 8000fe4:	e02d      	b.n	8001042 <HAL_RCC_OscConfig+0x36e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10c      	bne.n	8001008 <HAL_RCC_OscConfig+0x334>
 8000fee:	4b6a      	ldr	r3, [pc, #424]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	6a1b      	ldr	r3, [r3, #32]
 8000ff2:	4a69      	ldr	r2, [pc, #420]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	f023 0301 	bic.w	r3, r3, #1
 8000ff8:	6213      	str	r3, [r2, #32]
 8000ffa:	4b67      	ldr	r3, [pc, #412]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	6a1b      	ldr	r3, [r3, #32]
 8000ffe:	4a66      	ldr	r2, [pc, #408]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001000:	f023 0304 	bic.w	r3, r3, #4
 8001004:	6213      	str	r3, [r2, #32]
 8001006:	e01c      	b.n	8001042 <HAL_RCC_OscConfig+0x36e>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	2b05      	cmp	r3, #5
 800100e:	d10c      	bne.n	800102a <HAL_RCC_OscConfig+0x356>
 8001010:	4b61      	ldr	r3, [pc, #388]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	4a60      	ldr	r2, [pc, #384]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	6213      	str	r3, [r2, #32]
 800101c:	4b5e      	ldr	r3, [pc, #376]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	4a5d      	ldr	r2, [pc, #372]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6213      	str	r3, [r2, #32]
 8001028:	e00b      	b.n	8001042 <HAL_RCC_OscConfig+0x36e>
 800102a:	4b5b      	ldr	r3, [pc, #364]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800102c:	6a1b      	ldr	r3, [r3, #32]
 800102e:	4a5a      	ldr	r2, [pc, #360]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001030:	f023 0301 	bic.w	r3, r3, #1
 8001034:	6213      	str	r3, [r2, #32]
 8001036:	4b58      	ldr	r3, [pc, #352]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	6a1b      	ldr	r3, [r3, #32]
 800103a:	4a57      	ldr	r2, [pc, #348]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	f023 0304 	bic.w	r3, r3, #4
 8001040:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d015      	beq.n	8001076 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800104a:	f7ff fb85 	bl	8000758 <HAL_GetTick>
 800104e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001050:	e00a      	b.n	8001068 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001052:	f7ff fb81 	bl	8000758 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001060:	4293      	cmp	r3, r2
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e0b1      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001068:	4b4b      	ldr	r3, [pc, #300]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0ee      	beq.n	8001052 <HAL_RCC_OscConfig+0x37e>
 8001074:	e014      	b.n	80010a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001076:	f7ff fb6f 	bl	8000758 <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800107c:	e00a      	b.n	8001094 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800107e:	f7ff fb6b 	bl	8000758 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800108c:	4293      	cmp	r3, r2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e09b      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001094:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1ee      	bne.n	800107e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d105      	bne.n	80010b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 8087 	beq.w	80011ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 030c 	and.w	r3, r3, #12
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	d061      	beq.n	800118c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69db      	ldr	r3, [r3, #28]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d146      	bne.n	800115e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010d0:	4b33      	ldr	r3, [pc, #204]	@ (80011a0 <HAL_RCC_OscConfig+0x4cc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d6:	f7ff fb3f 	bl	8000758 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010de:	f7ff fb3b 	bl	8000758 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e06d      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f0:	4b29      	ldr	r3, [pc, #164]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1f0      	bne.n	80010de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001104:	d108      	bne.n	8001118 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001106:	4b24      	ldr	r3, [pc, #144]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	4921      	ldr	r1, [pc, #132]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001114:	4313      	orrs	r3, r2
 8001116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001118:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a19      	ldr	r1, [r3, #32]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001128:	430b      	orrs	r3, r1
 800112a:	491b      	ldr	r1, [pc, #108]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800112c:	4313      	orrs	r3, r2
 800112e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001130:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <HAL_RCC_OscConfig+0x4cc>)
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001136:	f7ff fb0f 	bl	8000758 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800113e:	f7ff fb0b 	bl	8000758 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e03d      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001150:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f0      	beq.n	800113e <HAL_RCC_OscConfig+0x46a>
 800115c:	e035      	b.n	80011ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <HAL_RCC_OscConfig+0x4cc>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff faf8 	bl	8000758 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800116c:	f7ff faf4 	bl	8000758 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e026      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0x498>
 800118a:	e01e      	b.n	80011ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d107      	bne.n	80011a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e019      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
 8001198:	40021000 	.word	0x40021000
 800119c:	40007000 	.word	0x40007000
 80011a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <HAL_RCC_OscConfig+0x500>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d106      	bne.n	80011c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d001      	beq.n	80011ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000

080011d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e0d0      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d910      	bls.n	800121c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011fa:	4b67      	ldr	r3, [pc, #412]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 0207 	bic.w	r2, r3, #7
 8001202:	4965      	ldr	r1, [pc, #404]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800120a:	4b63      	ldr	r3, [pc, #396]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d001      	beq.n	800121c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e0b8      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d020      	beq.n	800126a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001234:	4b59      	ldr	r3, [pc, #356]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	4a58      	ldr	r2, [pc, #352]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800123e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	2b00      	cmp	r3, #0
 800124a:	d005      	beq.n	8001258 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800124c:	4b53      	ldr	r3, [pc, #332]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4a52      	ldr	r2, [pc, #328]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001256:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001258:	4b50      	ldr	r3, [pc, #320]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	494d      	ldr	r1, [pc, #308]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	4313      	orrs	r3, r2
 8001268:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d040      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d107      	bne.n	800128e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127e:	4b47      	ldr	r3, [pc, #284]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d115      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e07f      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d107      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001296:	4b41      	ldr	r3, [pc, #260]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d109      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e073      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a6:	4b3d      	ldr	r3, [pc, #244]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e06b      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012b6:	4b39      	ldr	r3, [pc, #228]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f023 0203 	bic.w	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	4936      	ldr	r1, [pc, #216]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012c4:	4313      	orrs	r3, r2
 80012c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012c8:	f7ff fa46 	bl	8000758 <HAL_GetTick>
 80012cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ce:	e00a      	b.n	80012e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d0:	f7ff fa42 	bl	8000758 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012de:	4293      	cmp	r3, r2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e053      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e6:	4b2d      	ldr	r3, [pc, #180]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 020c 	and.w	r2, r3, #12
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d1eb      	bne.n	80012d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012f8:	4b27      	ldr	r3, [pc, #156]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d210      	bcs.n	8001328 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001306:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 0207 	bic.w	r2, r3, #7
 800130e:	4922      	ldr	r1, [pc, #136]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	4313      	orrs	r3, r2
 8001314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001316:	4b20      	ldr	r3, [pc, #128]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	429a      	cmp	r2, r3
 8001322:	d001      	beq.n	8001328 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e032      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	d008      	beq.n	8001346 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001334:	4b19      	ldr	r3, [pc, #100]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	4916      	ldr	r1, [pc, #88]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	4313      	orrs	r3, r2
 8001344:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	2b00      	cmp	r3, #0
 8001350:	d009      	beq.n	8001366 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001352:	4b12      	ldr	r3, [pc, #72]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	490e      	ldr	r1, [pc, #56]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	4313      	orrs	r3, r2
 8001364:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001366:	f000 f821 	bl	80013ac <HAL_RCC_GetSysClockFreq>
 800136a:	4602      	mov	r2, r0
 800136c:	4b0b      	ldr	r3, [pc, #44]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	490a      	ldr	r1, [pc, #40]	@ (80013a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001378:	5ccb      	ldrb	r3, [r1, r3]
 800137a:	fa22 f303 	lsr.w	r3, r2, r3
 800137e:	4a09      	ldr	r2, [pc, #36]	@ (80013a4 <HAL_RCC_ClockConfig+0x1cc>)
 8001380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001382:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <HAL_RCC_ClockConfig+0x1d0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f9a4 	bl	80006d4 <HAL_InitTick>

  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40022000 	.word	0x40022000
 800139c:	40021000 	.word	0x40021000
 80013a0:	080016a4 	.word	0x080016a4
 80013a4:	20000000 	.word	0x20000000
 80013a8:	20000004 	.word	0x20000004

080013ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013ac:	b490      	push	{r4, r7}
 80013ae:	b08a      	sub	sp, #40	@ 0x28
 80013b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013b2:	4b29      	ldr	r3, [pc, #164]	@ (8001458 <HAL_RCC_GetSysClockFreq+0xac>)
 80013b4:	1d3c      	adds	r4, r7, #4
 80013b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013bc:	f240 2301 	movw	r3, #513	@ 0x201
 80013c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013d6:	4b21      	ldr	r3, [pc, #132]	@ (800145c <HAL_RCC_GetSysClockFreq+0xb0>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d002      	beq.n	80013ec <HAL_RCC_GetSysClockFreq+0x40>
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d003      	beq.n	80013f2 <HAL_RCC_GetSysClockFreq+0x46>
 80013ea:	e02b      	b.n	8001444 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001460 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013ee:	623b      	str	r3, [r7, #32]
      break;
 80013f0:	e02b      	b.n	800144a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	0c9b      	lsrs	r3, r3, #18
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	3328      	adds	r3, #40	@ 0x28
 80013fc:	443b      	add	r3, r7
 80013fe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001402:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d012      	beq.n	8001434 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800140e:	4b13      	ldr	r3, [pc, #76]	@ (800145c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	0c5b      	lsrs	r3, r3, #17
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	3328      	adds	r3, #40	@ 0x28
 800141a:	443b      	add	r3, r7
 800141c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001420:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	4a0e      	ldr	r2, [pc, #56]	@ (8001460 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001426:	fb03 f202 	mul.w	r2, r3, r2
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
 8001432:	e004      	b.n	800143e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	4a0b      	ldr	r2, [pc, #44]	@ (8001464 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001438:	fb02 f303 	mul.w	r3, r2, r3
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 800143e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001440:	623b      	str	r3, [r7, #32]
      break;
 8001442:	e002      	b.n	800144a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001444:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001446:	623b      	str	r3, [r7, #32]
      break;
 8001448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800144a:	6a3b      	ldr	r3, [r7, #32]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3728      	adds	r7, #40	@ 0x28
 8001450:	46bd      	mov	sp, r7
 8001452:	bc90      	pop	{r4, r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	08001694 	.word	0x08001694
 800145c:	40021000 	.word	0x40021000
 8001460:	007a1200 	.word	0x007a1200
 8001464:	003d0900 	.word	0x003d0900

08001468 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001470:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <RCC_Delay+0x34>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a0a      	ldr	r2, [pc, #40]	@ (80014a0 <RCC_Delay+0x38>)
 8001476:	fba2 2303 	umull	r2, r3, r2, r3
 800147a:	0a5b      	lsrs	r3, r3, #9
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	fb02 f303 	mul.w	r3, r2, r3
 8001482:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001484:	bf00      	nop
  }
  while (Delay --);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1e5a      	subs	r2, r3, #1
 800148a:	60fa      	str	r2, [r7, #12]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f9      	bne.n	8001484 <RCC_Delay+0x1c>
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	20000000 	.word	0x20000000
 80014a0:	10624dd3 	.word	0x10624dd3

080014a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d07d      	beq.n	80015bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80014c0:	2300      	movs	r3, #0
 80014c2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014c4:	4b4f      	ldr	r3, [pc, #316]	@ (8001604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10d      	bne.n	80014ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d0:	4b4c      	ldr	r3, [pc, #304]	@ (8001604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	4a4b      	ldr	r2, [pc, #300]	@ (8001604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80014d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014da:	61d3      	str	r3, [r2, #28]
 80014dc:	4b49      	ldr	r3, [pc, #292]	@ (8001604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e8:	2301      	movs	r3, #1
 80014ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	4b46      	ldr	r3, [pc, #280]	@ (8001608 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d118      	bne.n	800152a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f8:	4b43      	ldr	r3, [pc, #268]	@ (8001608 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a42      	ldr	r2, [pc, #264]	@ (8001608 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80014fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001502:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001504:	f7ff f928 	bl	8000758 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150a:	e008      	b.n	800151e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800150c:	f7ff f924 	bl	8000758 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	@ 0x64
 8001518:	d901      	bls.n	800151e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e06d      	b.n	80015fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151e:	4b3a      	ldr	r3, [pc, #232]	@ (8001608 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800152a:	4b36      	ldr	r3, [pc, #216]	@ (8001604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001532:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d02e      	beq.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	429a      	cmp	r2, r3
 8001546:	d027      	beq.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001548:	4b2e      	ldr	r3, [pc, #184]	@ (8001604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001550:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001552:	4b2e      	ldr	r3, [pc, #184]	@ (800160c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001554:	2201      	movs	r2, #1
 8001556:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001558:	4b2c      	ldr	r3, [pc, #176]	@ (800160c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800155e:	4a29      	ldr	r2, [pc, #164]	@ (8001604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d014      	beq.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156e:	f7ff f8f3 	bl	8000758 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001574:	e00a      	b.n	800158c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001576:	f7ff f8ef 	bl	8000758 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001584:	4293      	cmp	r3, r2
 8001586:	d901      	bls.n	800158c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e036      	b.n	80015fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158c:	4b1d      	ldr	r3, [pc, #116]	@ (8001604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0ee      	beq.n	8001576 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001598:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	4917      	ldr	r1, [pc, #92]	@ (8001604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d105      	bne.n	80015bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b0:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	4a13      	ldr	r2, [pc, #76]	@ (8001604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80015c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	490b      	ldr	r1, [pc, #44]	@ (8001604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d008      	beq.n	80015f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80015e6:	4b07      	ldr	r3, [pc, #28]	@ (8001604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	4904      	ldr	r1, [pc, #16]	@ (8001604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	40007000 	.word	0x40007000
 800160c:	42420440 	.word	0x42420440

08001610 <memset>:
 8001610:	4603      	mov	r3, r0
 8001612:	4402      	add	r2, r0
 8001614:	4293      	cmp	r3, r2
 8001616:	d100      	bne.n	800161a <memset+0xa>
 8001618:	4770      	bx	lr
 800161a:	f803 1b01 	strb.w	r1, [r3], #1
 800161e:	e7f9      	b.n	8001614 <memset+0x4>

08001620 <__libc_init_array>:
 8001620:	b570      	push	{r4, r5, r6, lr}
 8001622:	2600      	movs	r6, #0
 8001624:	4d0c      	ldr	r5, [pc, #48]	@ (8001658 <__libc_init_array+0x38>)
 8001626:	4c0d      	ldr	r4, [pc, #52]	@ (800165c <__libc_init_array+0x3c>)
 8001628:	1b64      	subs	r4, r4, r5
 800162a:	10a4      	asrs	r4, r4, #2
 800162c:	42a6      	cmp	r6, r4
 800162e:	d109      	bne.n	8001644 <__libc_init_array+0x24>
 8001630:	f000 f81a 	bl	8001668 <_init>
 8001634:	2600      	movs	r6, #0
 8001636:	4d0a      	ldr	r5, [pc, #40]	@ (8001660 <__libc_init_array+0x40>)
 8001638:	4c0a      	ldr	r4, [pc, #40]	@ (8001664 <__libc_init_array+0x44>)
 800163a:	1b64      	subs	r4, r4, r5
 800163c:	10a4      	asrs	r4, r4, #2
 800163e:	42a6      	cmp	r6, r4
 8001640:	d105      	bne.n	800164e <__libc_init_array+0x2e>
 8001642:	bd70      	pop	{r4, r5, r6, pc}
 8001644:	f855 3b04 	ldr.w	r3, [r5], #4
 8001648:	4798      	blx	r3
 800164a:	3601      	adds	r6, #1
 800164c:	e7ee      	b.n	800162c <__libc_init_array+0xc>
 800164e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001652:	4798      	blx	r3
 8001654:	3601      	adds	r6, #1
 8001656:	e7f2      	b.n	800163e <__libc_init_array+0x1e>
 8001658:	080016b4 	.word	0x080016b4
 800165c:	080016b4 	.word	0x080016b4
 8001660:	080016b4 	.word	0x080016b4
 8001664:	080016b8 	.word	0x080016b8

08001668 <_init>:
 8001668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800166a:	bf00      	nop
 800166c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800166e:	bc08      	pop	{r3}
 8001670:	469e      	mov	lr, r3
 8001672:	4770      	bx	lr

08001674 <_fini>:
 8001674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001676:	bf00      	nop
 8001678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800167a:	bc08      	pop	{r3}
 800167c:	469e      	mov	lr, r3
 800167e:	4770      	bx	lr
